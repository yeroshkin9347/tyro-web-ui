/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "\n  query searchQuery($filter: SearchFilter) {\n    search_search(filter: $filter) {\n      partyId\n      type\n      text\n      avatarUrl\n      meta {\n        studentPartyId\n      }\n    }\n  }\n": types.SearchQueryDocument,
    "\n  query assessment_assessmentResult($filter: AssessmentResultFilter) {\n    assessment_assessmentResult(filter: $filter) {\n      id\n      assessmentId\n      studentPartyId\n      student {\n        person {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n      studentClassGroup\n      studentProgramme {\n        shortName\n      }\n      subjectGroup {\n        partyId\n        name\n        irePP {\n          examinable\n        }\n      }\n      studentStudyLevel\n      result\n      targetResult\n      gradeResult\n      gradeId\n      gradeNameTextId\n      targetGradeResult\n      targetGradeNameTextId\n      teacherComment {\n        id\n        assessmentId\n        studentPartyId\n        comment\n        commentBankCommentId\n        commenterUserType\n        commenterPartyId\n        subjectGroupPartyId\n      }\n      extraFields {\n        id\n        extraFieldType\n        assessmentResultId\n        assessmentExtraFieldId\n        result\n        gradeSetGradeId\n        gradeNameTextId\n        commentBankCommentId\n      }\n      examinable\n      ppodPublished\n      ppodResult\n    }\n  }\n": types.Assessment_AssessmentResultDocument,
    "\n  mutation assessment_saveAssessmentResults(\n    $input: [SaveAssessmentResultInput!]\n  ) {\n    assessment_saveAssessmentResults(input: $input) {\n      id\n    }\n  }\n": types.Assessment_SaveAssessmentResultsDocument,
    "\n  query assessmentSubjectGroups($filter: AssessmentSubjectGroupsFilter) {\n    assessment_assessmentSubjectGroups(filter: $filter) {\n      subjectGroup {\n        partyId\n        name\n        avatarUrl\n        subjects {\n          name\n        }\n        staff {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          avatarUrl\n          firstName\n          lastName\n        }\n        yearGroups {\n          yearGroupId\n          name\n        }\n      }\n      resultsTotal\n      resultsEntered\n      commentsEntered\n      commentsTotal\n      extraFieldResultsEntered\n      ppodSyncStatus\n      published\n    }\n  }\n": types.AssessmentSubjectGroupsDocument,
    "\n  query assessmentsList($filter: AssessmentFilter) {\n    assessment_assessment(filter: $filter) {\n      id\n      name\n      assessmentType\n      stateCbaType\n      academicNamespaceId\n      years {\n        yearGroupId\n        name\n      }\n      publish\n      publishedFrom\n      publishLearner\n      startDate\n      endDate\n      createdBy {\n        type\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n      }\n      canEnterOverallComments\n    }\n  }\n": types.AssessmentsListDocument,
    "\n  query assessment($filter: AssessmentFilter) {\n    assessment_assessment(filter: $filter) {\n      id\n      name\n      assessmentType\n      academicNamespaceId\n      years {\n        yearGroupId\n        name\n      }\n      yearGroupEnrolments {\n        yearGroupEnrollmentPartyId\n        name\n      }\n      publish\n      createdOn\n      gradeType\n      gradeSets {\n        gradeSetId\n        gradeSetName\n      }\n      passFailThreshold\n      captureTarget\n      commentType\n      commentLength\n      commentBank {\n        commentBankId\n        commentBankName\n      }\n      publish\n      publishLearner\n      extraFields {\n        id\n        name\n        assessmentId\n        extraFieldType\n        gradeSetId\n        commentBankId\n        commentBankName\n        selectOptions\n        commentLength\n        resultsEntered\n      }\n      createdBy {\n        type\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n      }\n      stateCbaType\n      subjectGroups {\n        partyId\n        name\n        subjects {\n          name\n          id\n          colour\n        }\n      }\n      startDate\n      endDate\n      captureTutorComment\n      capturePrincipalComment\n      captureYearHeadComment\n      captureHouseMasterComment\n      tutorCommentType\n      tutorCommentBank {\n        commentBankId\n        commentBankName\n      }\n      tutorCommentLength\n      yearHeadCommentType\n      yearHeadCommentBank {\n        commentBankId\n        commentBankName\n      }\n      yearHeadCommentLength\n      principalCommentType\n      principalCommentBank {\n        commentBankId\n        commentBankName\n      }\n      principalCommentLength\n      housemasterCommentType\n      housemasterCommentBank {\n        commentBankId\n        commentBankName\n      }\n      housemasterCommentLength\n    }\n  }\n": types.AssessmentDocument,
    "\n  query commentBankAssessment($filter: CommentBankFilter) {\n    assessment_commentBank(filter: $filter) {\n      id\n      name\n    }\n  }\n": types.CommentBankAssessmentDocument,
    "\n  query commentBanksWithComments($filter: CommentBankFilter) {\n    assessment_commentBank(filter: $filter) {\n      id\n      name\n      comments {\n        id\n        comment\n        active\n      }\n    }\n  }\n": types.CommentBanksWithCommentsDocument,
    "\n  query assessment_overallComments($filter: OverallCommentsFilter) {\n    assessment_overallComments(filter: $filter) {\n      tutorCommentsEntered\n      yearHeadCommentsEntered\n      principalCommentsEntered\n      totalCommentsToEnter\n      students {\n        studentPartyId\n        student {\n          person {\n            partyId\n            firstName\n            lastName\n            avatarUrl\n          }\n        }\n        commentStatus\n        principalComment\n        yearHeadComment\n        tutorComment\n      }\n    }\n  }\n": types.Assessment_OverallCommentsDocument,
    "\n  mutation assessment_publishStateCba($input: PublishAssessmentInput) {\n    assessment_publishStateCba(input: $input) {\n      success\n    }\n  }\n": types.Assessment_PublishStateCbaDocument,
    "\n  mutation assessment_publish($input: PublishAssessmentInput) {\n    assessment_publish(input: $input) {\n      success\n    }\n  }\n": types.Assessment_PublishDocument,
    "\n  mutation saveTermAssessment($input: SaveTermAssessmentInput) {\n    assessment_saveTermAssessment(input: $input) {\n      name\n      years {\n        name\n      }\n      startDate\n      endDate\n    }\n  }\n": types.SaveTermAssessmentDocument,
    "\n  query assessment_gradeSet($filter: GradeSetFilter) {\n    assessment_gradeSet(filter: $filter) {\n      id\n      name\n      description\n      nameTextId\n      active\n      customGradeSet\n      isCba\n      grades {\n        id\n        name\n        nameTextId\n        start\n        end\n        active\n      }\n      years\n    }\n  }\n": types.Assessment_GradeSetDocument,
    "\n  mutation assessment_publishPPODResults($input: PPODPublishResultsInput) {\n    assessment_publishPPODResults(input: $input) {\n      id\n      assessmentId\n      studentPartyId\n    }\n  }\n": types.Assessment_PublishPpodResultsDocument,
    "\n  mutation assessment_saveStateCbaAssessment(\n    $input: SaveStateCbaAssessmentInput\n  ) {\n    assessment_saveStateCbaAssessment(input: $input) {\n      id\n      academicNamespaceId\n      name\n      assessmentType\n      startDate\n      endDate\n      yearGroupIds\n      years {\n        yearGroupId\n        name\n      }\n      extraFields {\n        id\n        name\n        assessmentId\n        extraFieldType\n        gradeSetId\n        commentBankId\n        commentBankName\n        selectOptions\n        commentLength\n      }\n      createdBy {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n      }\n    }\n  }\n": types.Assessment_SaveStateCbaAssessmentDocument,
    "\n  mutation assessment_studentAssessmentExclusion(\n    $input: [StudentAssessmentExclusionInput]\n  ) {\n    assessment_studentAssessmentExclusion(input: $input) {\n      success\n    }\n  }\n": types.Assessment_StudentAssessmentExclusionDocument,
    "\n  query dashboardAssessment($filter: DashboardAssessmentFilter) {\n    assessment_dashboardAssessment(filter: $filter) {\n      id\n      name\n      description\n      assessmentType\n      startDate\n      endDate\n      results {\n        id\n        subject\n        result\n        grade\n        studyLevel\n      }\n    }\n  }\n": types.DashboardAssessmentDocument,
    "\n  query assessment_assessmentComment($filter: AssessmentCommentFilter) {\n    assessment_assessmentComment(filter: $filter) {\n      id\n      comment\n      commentBankCommentId\n      commenterUserType\n      commenterPartyId\n    }\n  }\n": types.Assessment_AssessmentCommentDocument,
    "\n  mutation assessment_saveAssessmentComments(\n    $input: [SaveAssessmentCommentInput!]\n  ) {\n    assessment_saveAssessmentComments(input: $input) {\n      id\n    }\n  }\n": types.Assessment_SaveAssessmentCommentsDocument,
    "\n  query assessment_calculateGrade($filter: CalculateGradeFilter) {\n    assessment_calculateGrade(filter: $filter) {\n      grade\n    }\n  }\n": types.Assessment_CalculateGradeDocument,
    "\n  query assessment_studentResult($filter: StudentResultFilter) {\n    assessment_studentResult(filter: $filter) {\n      id\n      assessmentId\n      studentPartyId\n      student {\n        person {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n      studentClassGroup\n      studentProgramme {\n        shortName\n      }\n      subjectGroup {\n        partyId\n        name\n        staff {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        subjects {\n          name\n          colour\n          nationalCode\n        }\n      }\n      studentStudyLevel\n      result\n      targetResult\n      gradeResult\n      gradeNameTextId\n      targetGradeResult\n      targetGradeNameTextId\n      examinable\n      teacherComment {\n        id\n        assessmentId\n        studentPartyId\n        comment\n        commentBankCommentId\n        commenterUserType\n        commenterPartyId\n        subjectGroupPartyId\n      }\n      extraFields {\n        id\n        extraFieldType\n        assessmentResultId\n        assessmentExtraFieldId\n        result\n        gradeSetGradeId\n        gradeNameTextId\n        commentBankCommentId\n      }\n    }\n  }\n": types.Assessment_StudentResultDocument,
    "\n  query attendance_parentalAttendanceRequests(\n    $filter: ParentalAttendanceRequestFilter\n  ) {\n    attendance_parentalAttendanceRequests(filter: $filter) {\n      id\n      adminNote\n      attendanceCode {\n        id\n        code\n        name\n        description\n      }\n      approvedBy {\n        firstName\n        lastName\n      }\n      approvedByPartyId\n      attendanceCodeId\n      contactPartyId\n      from\n      parentNote\n      requestType\n      status\n      studentPartyId\n      to\n      classGroup {\n        name\n      }\n      contact {\n        person {\n          avatarUrl\n          firstName\n          lastName\n        }\n        relationships {\n          relationshipType\n          studentPartyId\n        }\n      }\n      createdOn\n      studentNew {\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n    }\n  }\n": types.Attendance_ParentalAttendanceRequestsDocument,
    "\n  mutation attendance_saveParentalAttendanceRequest(\n    $input: [SaveParentalAttendanceRequest]\n  ) {\n    attendance_saveParentalAttendanceRequest(input: $input) {\n      id\n    }\n  }\n": types.Attendance_SaveParentalAttendanceRequestDocument,
    "\n  mutation attendance_withdrawParentalAttendanceRequest(\n    $input: WithdrawParentalAttendanceRequest\n  ) {\n    attendance_withdrawParentalAttendanceRequest(input: $input) {\n      success\n    }\n  }\n": types.Attendance_WithdrawParentalAttendanceRequestDocument,
    "\n  query attendance_attendanceCodes($filter: AttendanceCodeFilter) {\n    attendance_attendanceCodes(filter: $filter) {\n      id\n      name\n      description\n      code\n      active\n      visibleForTeacher\n      visibleForContact\n      nameTextId\n      codeType\n      sessionCodeType\n      custom\n    }\n  }\n": types.Attendance_AttendanceCodesDocument,
    "\n  mutation attendance_saveAttendanceCode($input: [SaveAttendanceCodeInput]) {\n    attendance_saveAttendanceCode(input: $input) {\n      id\n    }\n  }\n": types.Attendance_SaveAttendanceCodeDocument,
    "\n  mutation attendance_saveEventAttendance($input: [SaveEventAttendanceInput]) {\n    attendance_saveEventAttendance(input: $input) {\n      id\n      eventId\n      attendanceCodeId\n      personPartyId\n      date\n    }\n  }\n": types.Attendance_SaveEventAttendanceDocument,
    "\n  query attendance_bulkAttendanceActions(\n    $filter: Attendance_BulkAttendanceActionFilter!\n  ) {\n    attendance_bulkAttendanceActions(filter: $filter) {\n      id\n      attendanceForPartyIds\n      parties {\n        ... on PartyPerson {\n          __typename\n          person {\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        ... on SubjectGroup {\n          partyId\n          actualName\n          name\n          avatarUrl\n          __typename\n        }\n        ... on GeneralGroup {\n          __typename\n          partyId\n          generalGroupType\n          name\n          classGroupInfo {\n            __typename\n          }\n        }\n        ... on ProgrammeStageEnrollment {\n          __typename\n          partyId\n          name\n        }\n        ... on YearGroupEnrollment {\n          __typename\n          partyId\n          name\n        }\n        ... on Staff {\n          __typename\n          person {\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        ... on StudentContact {\n          __typename\n          person {\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n      }\n      attendanceCodeId\n      attendanceCode {\n        id\n        name\n        description\n        code\n        active\n        visibleForTeacher\n        visibleForContact\n        nameTextId\n        descriptionTextId\n        codeType\n        sessionCodeType\n        custom\n      }\n      startDate\n      endDate\n      leavesAt\n      returnsAt\n      partial\n      note\n      createdBy {\n        userId\n        partyId\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n        }\n      }\n      createdOn\n    }\n  }\n": types.Attendance_BulkAttendanceActionsDocument,
    "\n  mutation attendance_saveBulkAttendance(\n    $input: Attendance_SaveBulkAttendanceInput\n  ) {\n    attendance_saveBulkAttendance(input: $input) {\n      success\n    }\n  }\n": types.Attendance_SaveBulkAttendanceDocument,
    "\n  query attendance_calendarAttendance($filter: CalendarAttendanceFilter) {\n    attendance_calendarAttendance(filter: $filter) {\n      totalPresent\n      totalLate\n      totalAbsent\n      totalUnexplained\n      totalNotTaken\n      totalPartial\n      attendances {\n        date\n        status\n        partiallyTaken\n      }\n    }\n  }\n": types.Attendance_CalendarAttendanceDocument,
    "\n  query calendar_calendarDayBellTimes($filter: CalendarDayBellTimeFilter) {\n    calendar_calendarDayBellTimes(filter: $filter) {\n      date\n      bellTimeIds\n      bellTimes {\n        id\n        time\n        name\n      }\n    }\n  }\n": types.Calendar_CalendarDayBellTimesDocument,
    "\n  query calendar_calendarInformation($filter: CalendarEventFilter) {\n    calendar_calendarEvents(filter: $filter) {\n      resources {\n        events {\n          eventId\n          startTime\n          endTime\n          type\n          lessonInfo {\n            subjectGroupId\n          }\n          colour\n          name\n          extensions {\n            eventAttendance {\n              id\n              eventId\n              attendanceCodeId\n              attendanceCode {\n                name\n                codeType\n              }\n              personPartyId\n              date\n              note\n              createdByPartyId\n              createdBy {\n                partyId\n                firstName\n                lastName\n                avatarUrl\n              }\n              updatedByPartyId\n              updatedBy {\n                firstName\n                lastName\n                partyId\n                avatarUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.Calendar_CalendarInformationDocument,
    "\n  query studentSessionAttendance($filter: StudentSessionAttendanceFilter) {\n    attendance_studentSessionAttendance(filter: $filter) {\n      dateAttendance {\n        date\n        bellTimeAttendance {\n          bellTimeId\n          bellTime {\n            time\n            name\n          }\n          attendanceCode {\n            id\n            name\n            description\n            code\n            codeType\n          }\n          note\n          createdBy {\n            partyId\n            firstName\n            lastName\n            avatarUrl\n          }\n          createdByPartyId\n          updatedBy {\n            firstName\n            lastName\n            partyId\n            avatarUrl\n          }\n          updatedByPartyId\n        }\n      }\n      studentPartyId\n      student {\n        person {\n          partyId\n          firstName\n          lastName\n        }\n      }\n      classGroup {\n        name\n        staff {\n          partyId\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.StudentSessionAttendanceDocument,
    "\n  mutation saveStudentSessionAttendance(\n    $input: SaveStudentSessionAttendanceInput\n  ) {\n    attendance_saveStudentSessionAttendance(input: $input) {\n      studentPartyId\n    }\n  }\n": types.SaveStudentSessionAttendanceDocument,
    "\n  query attendance_sessionAttendanceReport(\n    $filter: SessionAttendanceListFilter\n  ) {\n    attendance_sessionAttendanceList(filter: $filter) {\n      id\n      studentPartyId\n      attendanceCode {\n        code\n        name\n      }\n      student {\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n      bellTime {\n        time\n        name\n      }\n      attendanceCodeId\n      classGroup {\n        name\n      }\n      date\n      note\n    }\n  }\n": types.Attendance_SessionAttendanceReportDocument,
    "\n  query attendance_studentSessionAttendance(\n    $filter: StudentSessionAttendanceFilter\n  ) {\n    attendance_studentSessionAttendance(filter: $filter) {\n      studentPartyId\n      student {\n        person {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n      classGroup {\n        name\n      }\n      dateAttendance {\n        date\n        bellTimeAttendance {\n          bellTimeId\n          attendanceCode {\n            id\n            name\n            codeType\n          }\n          note\n        }\n      }\n    }\n  }\n": types.Attendance_StudentSessionAttendanceDocument,
    "\n  mutation attendance_saveStudentSessionAttendance(\n    $input: SaveStudentSessionAttendanceInput\n  ) {\n    attendance_saveStudentSessionAttendance(input: $input) {\n      studentPartyId\n    }\n  }\n": types.Attendance_SaveStudentSessionAttendanceDocument,
    "\n  query sessionPartySearchQuery($filter: SearchFilter) {\n    search_search(filter: $filter) {\n      partyId\n      type\n      text\n      avatarUrl\n    }\n  }\n": types.SessionPartySearchQueryDocument,
    "\n  query tableSessionAttendanceView($filter: StudentSessionAttendanceFilter) {\n    attendance_studentSessionAttendance(filter: $filter) {\n      dateAttendance {\n        date\n        bellTimeAttendance {\n          bellTimeId\n          bellTime {\n            time\n            name\n          }\n          attendanceCode {\n            id\n            name\n            description\n            code\n            codeType\n          }\n          note\n          createdBy {\n            partyId\n            firstName\n            lastName\n            avatarUrl\n          }\n          createdByPartyId\n          updatedByPartyId\n          updatedBy {\n            firstName\n            lastName\n            partyId\n            avatarUrl\n          }\n        }\n      }\n    }\n  }\n": types.TableSessionAttendanceViewDocument,
    "\n  query calendar_findFreeResources($filter: FindFreeResourcesFilter) {\n    calendar_findFreeResources(filter: $filter) {\n      freeRooms {\n        roomId\n        name\n      }\n      clashingRooms {\n        room {\n          roomId\n          name\n        }\n      }\n    }\n  }\n": types.Calendar_FindFreeResourcesDocument,
    "\n  mutation calendar_createCalendarEvents($input: CreateCalendarEventsInput!) {\n    calendar_createCalendarEvents(input: $input) {\n      eventId\n    }\n  }\n": types.Calendar_CreateCalendarEventsDocument,
    "\n  query calendarSearchQuery($filter: SearchFilter) {\n    search_search(filter: $filter) {\n      partyId\n      type\n      text\n      avatarUrl\n    }\n  }\n": types.CalendarSearchQueryDocument,
    "\n  query calendar_calendarEvents($filter: CalendarEventFilter!) {\n    calendar_calendarEvents(filter: $filter) {\n      resources {\n        resourceId\n        ... on PartyCalendar {\n          __typename\n          partyInfo {\n            __typename\n            ... on PartyGroup {\n              name\n              avatarUrl\n            }\n            ... on PartyPerson {\n              person {\n                avatarUrl\n                firstName\n                lastName\n              }\n            }\n          }\n        }\n        ... on RoomCalendar {\n          room {\n            name\n          }\n        }\n        events {\n          name\n          eventId\n          calendarIds\n          startTime\n          endTime\n          type\n          colour\n          description\n          allDayEvent\n          editable\n          lessonInfo {\n            subjectGroupId\n            lessonId\n          }\n          exclusions {\n            partyId\n            type\n          }\n          attendees {\n            partyId\n            type\n            partyInfo {\n              partyId\n              __typename\n              ... on PartyGroup {\n                name\n                avatarUrl\n              }\n              ... on PartyPerson {\n                person {\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  avatarUrl\n                }\n              }\n            }\n          }\n          rooms {\n            roomId\n            name\n          }\n          tags {\n            label\n            context\n          }\n          alsoShowForParties\n        }\n      }\n    }\n  }\n": types.Calendar_CalendarEventsDocument,
    "\n  query calendar_partyTimetable($filter: CalendarEventFilter!) {\n    calendar_calendarEvents(filter: $filter) {\n      resources {\n        resourceId\n        events {\n          eventId\n          name\n          startTime\n          endTime\n          type\n          colour\n          attendees {\n            type\n            partyInfo {\n              __typename\n              partyId\n              ... on Staff {\n                person {\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  type\n                }\n              }\n              ... on SubjectGroup {\n                name\n                actualName\n              }\n            }\n          }\n          rooms {\n            name\n          }\n          tags {\n            label\n            context\n          }\n        }\n      }\n    }\n  }\n": types.Calendar_PartyTimetableDocument,
    "\n  query timetableInfo($filter: CalendarDayInfoFilter) {\n    calendar_dayInfo(filter: $filter) {\n      date\n      startTime\n      endTime\n      dayType\n      periods {\n        startTime\n        endTime\n        type\n      }\n    }\n  }\n": types.TimetableInfoDocument,
    "\n  query core_blocks($filter: BlockFilter) {\n    core_blocks(filter: $filter) {\n      blockId\n      name\n      description\n      subjectGroupNamesJoined\n      subjectGroupIds\n      isRotation\n      rotations {\n        iteration\n        startDate\n        endDate\n      }\n    }\n  }\n": types.Core_BlocksDocument,
    "\n  query enrollment_ire_blockMemberships(\n    $filter: EnrollmentIre_BlockEnrollmentFilter!\n  ) {\n    enrollment_ire_blockMemberships(filter: $filter) {\n      blockId\n      block {\n        blockId\n        name\n        description\n        classGroupIds\n        subjectGroupIds\n      }\n      isRotation\n      groups {\n        rotationIteration\n        unenrolledStudents {\n          isDuplicate\n          classGroupName\n          gender\n          person {\n            partyId\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        subjectGroups {\n          partyId\n          name\n          students {\n            isDuplicate\n            classGroupName\n            gender\n            person {\n              partyId\n              title {\n                id\n                name\n                nameTextId\n              }\n              firstName\n              lastName\n              avatarUrl\n              type\n            }\n          }\n          staff {\n            partyId\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n      }\n    }\n  }\n": types.Enrollment_Ire_BlockMembershipsDocument,
    "\n  mutation enrollment_ire_upsertBlockMemberships(\n    $input: EnrollmentIre_UpsertBlockMembership!\n  ) {\n    enrollment_ire_upsertBlockMemberships(input: $input) {\n      blockId\n    }\n  }\n": types.Enrollment_Ire_UpsertBlockMembershipsDocument,
    "\n  mutation core_enableBlockRotations($input: Core_EnableBlockRotationInput!) {\n    core_enableBlockRotations(input: $input) {\n      success\n    }\n  }\n": types.Core_EnableBlockRotationsDocument,
    "\n  mutation enrollment_ire_autoAssignBlocks(\n    $input: EnrollmentIre_AutoAssignBlockMembershipInput!\n  ) {\n    enrollment_ire_autoAssignBlocks(input: $input) {\n      success\n    }\n  }\n": types.Enrollment_Ire_AutoAssignBlocksDocument,
    "\n  query enrollment_ire_coreMemberships(\n    $filter: EnrollmentIre_CoreEnrollmentFilter!\n  ) {\n    enrollment_ire_coreMemberships(filter: $filter) {\n      yearGroupEnrollment {\n        yearGroupId\n        name\n      }\n      unenrolledStudents {\n        personalInformation {\n          gender\n        }\n        person {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n      }\n      classGroups {\n        partyId\n        name\n        students {\n          personalInformation {\n            gender\n          }\n          person {\n            partyId\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        staff {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n      }\n    }\n  }\n": types.Enrollment_Ire_CoreMembershipsDocument,
    "\n  mutation enrollment_ire_upsertCoreMemberships(\n    $input: EnrollmentIre_UpsertCoreMembership!\n  ) {\n    enrollment_ire_upsertCoreMemberships(input: $input) {\n      yearGroupEnrollment {\n        yearGroupId\n      }\n    }\n  }\n": types.Enrollment_Ire_UpsertCoreMembershipsDocument,
    "\n  mutation enrollment_ire_autoAssignCore(\n    $input: EnrollmentIre_AutoAssignCoreMembershipInput!\n  ) {\n    enrollment_ire_autoAssignCore(input: $input) {\n      success\n    }\n  }\n": types.Enrollment_Ire_AutoAssignCoreDocument,
    "\n  mutation fees_bulkApplyIndividualDiscounts(\n    $input: BulkApplyIndividualDiscountInput\n  ) {\n    fees_bulkApplyIndividualDiscounts(input: $input) {\n      success\n    }\n  }\n": types.Fees_BulkApplyIndividualDiscountsDocument,
    "\n  mutation createPayment($input: MakePaymentInput) {\n    fees_createPayment(input: $input) {\n      clientSecret\n    }\n  }\n": types.CreatePaymentDocument,
    "\n  query fees_payments($filter: FeeFilter) {\n    fees_fees(filter: $filter) {\n      debtors {\n        id\n        feeId\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        classGroup {\n          name\n        }\n        feeStatus\n        amount\n        amountPaid\n        amountDue\n        amountDiscounted\n        discounts {\n          id\n          name\n          discountType\n          value\n        }\n      }\n    }\n  }\n": types.Fees_PaymentsDocument,
    "\n  mutation fees_deleteDiscount($input: DeleteDiscountInput!) {\n    fees_deleteDiscount(input: $input) {\n      success\n    }\n  }\n": types.Fees_DeleteDiscountDocument,
    "\n  mutation fees_deleteFee($input: DeleteFeeInput!) {\n    fees_deleteFee(input: $input) {\n      success\n    }\n  }\n": types.Fees_DeleteFeeDocument,
    "\n  query fees_discounts($filter: DiscountFilter) {\n    fees_discounts(filter: $filter) {\n      id\n      name\n      description\n      discountType\n      value\n      siblingDiscount\n      active\n      createdBy {\n        firstName\n        lastName\n        avatarUrl\n      }\n    }\n  }\n": types.Fees_DiscountsDocument,
    "\n  query fees_categories($filter: CategoryFilter) {\n    fees_categories(filter: $filter) {\n      id\n      name\n      description\n      active\n      createdBy {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n      }\n    }\n  }\n": types.Fees_CategoriesDocument,
    "\n  query fees_fees($filter: FeeFilter) {\n    fees_fees(filter: $filter) {\n      id\n      name\n      dueDate\n      amount\n      feeType\n      absorbFees\n      published\n      publishedOn\n      assignedToParties {\n        ... on PartyPerson {\n          __typename\n          person {\n            partyId\n            firstName\n            lastName\n            avatarUrl\n          }\n        }\n        ... on SubjectGroup {\n          __typename\n          partyId\n          name\n          avatarUrl\n        }\n        ... on GeneralGroup {\n          __typename\n          partyId\n          name\n        }\n        ... on YearGroupEnrollment {\n          __typename\n          partyId\n          name\n        }\n        ... on ProgrammeStageEnrollment {\n          __typename\n          partyId\n          name\n        }\n      }\n      categories {\n        id\n        name\n      }\n      discounts {\n        id\n        name\n        discountType\n        value\n      }\n      individualDiscounts {\n        personPartyId\n        discount {\n          id\n          name\n          discountType\n          value\n        }\n      }\n      total\n      paid\n      due\n      feeStatus\n      createdBy {\n        firstName\n        lastName\n        avatarUrl\n      }\n    }\n  }\n": types.Fees_FeesDocument,
    "\n  mutation fees_publish($input: PublishInput!) {\n    fees_publish(input: $input) {\n      success\n    }\n  }\n": types.Fees_PublishDocument,
    "\n  mutation fees_saveDiscount($input: SaveDiscountInput) {\n    fees_saveDiscount(input: $input) {\n      id\n    }\n  }\n": types.Fees_SaveDiscountDocument,
    "\n  mutation fees_saveCategory($input: SaveCategoryInput) {\n    fees_saveCategory(input: $input) {\n      id\n    }\n  }\n": types.Fees_SaveCategoryDocument,
    "\n  mutation fees_saveFee($input: SaveFeeInput) {\n    fees_saveFee(input: $input) {\n      id\n    }\n  }\n": types.Fees_SaveFeeDocument,
    "\n  query fees_serviceCharges($filter: ChargesFilter) {\n    fees_serviceCharges(filter: $filter) {\n      amount\n      userServiceCharge\n      userVat\n    }\n  }\n": types.Fees_ServiceChargesDocument,
    "\n  query fees_stripeAccount {\n    fees_stripeAccount {\n      signUpStarted\n      onboardingComplete\n      onboardingLink\n    }\n  }\n": types.Fees_StripeAccountDocument,
    "\n  query fees_studentFees($filter: StudentFeeFilter) {\n    fees_studentFees(filter: $filter) {\n      id {\n        feeId\n        studentPartyId\n      }\n      person {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n      }\n      feeName\n      dueDate\n      amount\n      amountPaid\n      amountDue\n      feeType\n      feeStatus\n      discounts {\n        id\n        name\n        description\n        discountType\n        value\n        siblingDiscount\n      }\n    }\n  }\n": types.Fees_StudentFeesDocument,
    "\n  query core_blocksList($filter: BlockFilter) {\n    core_blocks(filter: $filter) {\n      blockId\n      name\n      description\n      subjectGroupNamesJoined\n      subjectGroupIds\n      isRotation\n    }\n  }\n": types.Core_BlocksListDocument,
    "\n  query classGroupsList($filter: GeneralGroupFilter!) {\n    generalGroups(filter: $filter) {\n      partyId\n      name\n      avatarUrl\n      studentMembers {\n        memberCount\n      }\n      generalGroupType\n      programmeStages {\n        programme {\n          name\n        }\n      }\n      tutors {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        type\n      }\n      yearGroupLeads {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        type\n      }\n      yearGroups {\n        yearGroupId\n        name\n      }\n    }\n  }\n": types.ClassGroupsListDocument,
    "\n  query classGroupsById($filter: GeneralGroupFilter!) {\n    generalGroups(filter: $filter) {\n      partyId\n      name\n      students {\n        person {\n          partyId\n          title {\n            nameTextId\n            id\n            name\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n      relatedSubjectGroups {\n        name\n        partyId\n        avatarUrl\n        studentMembershipType {\n          type\n        }\n        subjects {\n          name\n          colour\n        }\n        programmeStages {\n          name\n        }\n        staff {\n          title {\n            id\n            nameTextId\n            name\n          }\n          type\n          firstName\n          lastName\n        }\n        irePP {\n          level\n        }\n        studentMembers {\n          memberCount\n        }\n      }\n      blocks {\n        blockId\n      }\n    }\n  }\n": types.ClassGroupsByIdDocument,
    "\n  mutation core_updateClassGroups($input: [UpdateClassGroupGroupInput!]) {\n    core_updateClassGroups(input: $input) {\n      success\n    }\n  }\n": types.Core_UpdateClassGroupsDocument,
    "\n  query core_customGroupDefinition($filter: Core_CustomGroupDefinitionFilter!) {\n    core_customGroupDefinition(filter: $filter) {\n      id\n      name\n      organisers {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n      }\n      staffStatic {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n      }\n      studentsStatic {\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        partyId\n        classGroup {\n          name\n        }\n        extensions {\n          priority\n        }\n      }\n    }\n  }\n": types.Core_CustomGroupDefinitionDocument,
    "\n  mutation saveCustomGroupDefinition(\n    $input: Core_UpsertCustomGroupDefinition!\n  ) {\n    core_upsertCustomGroupDefinition(input: $input) {\n      success\n    }\n  }\n": types.SaveCustomGroupDefinitionDocument,
    "\n  query customGroupsList($filter: GeneralGroupFilter!) {\n    generalGroups(filter: $filter) {\n      partyId\n      name\n      avatarUrl\n      studentMembers {\n        memberCount\n      }\n      staffMembers {\n        memberCount\n      }\n      contactMembers {\n        memberCount\n      }\n    }\n  }\n": types.CustomGroupsListDocument,
    "\n  query customGroupById($filter: GeneralGroupFilter!) {\n    generalGroups(filter: $filter) {\n      partyId\n      name\n      avatarUrl\n      students {\n        partyId\n        classGroup {\n          name\n        }\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n        }\n        extensions {\n          priority\n        }\n      }\n    }\n  }\n": types.CustomGroupByIdDocument,
    "\n  mutation core_deleteGroups($input: Core_DeleteGroupInput!) {\n    core_deleteGroups(input: $input) {\n      success\n    }\n  }\n": types.Core_DeleteGroupsDocument,
    "\n  mutation core_modifyBlocks($input: Core_ModifyBlocks!) {\n    core_modifyBlocks(input: $input) {\n      success\n    }\n  }\n": types.Core_ModifyBlocksDocument,
    "\n  mutation core_modifyGroupMemberships($input: Core_ModifyMemberships!) {\n      core_modifyGroupMemberships(input: $input) {\n      success\n    }\n  }\n": types.Core_ModifyGroupMembershipsDocument,
    "\n  mutation coreModifySubjectGroupMembershipType(\n    $input: [Core_ModifySubjectGroupMembershipType]!\n  ) {\n    core_modifySubjectGroupMembershipType(input: $input) {\n      success\n    }\n  }\n": types.CoreModifySubjectGroupMembershipTypeDocument,
    "\n  query printGroupMembers($filter: Print_GroupMembers!) {\n    print_groupMembers(filter: $filter) {\n      url\n      html\n    }\n  }\n": types.PrintGroupMembersDocument,
    "\n  query studentsSearchQuery($filter: SearchFilter) {\n    search_search(filter: $filter) {\n      partyId\n      type\n      text\n      avatarUrl\n    }\n  }\n": types.StudentsSearchQueryDocument,
    "\n  query calendar_calendarEventsIterator($filter: CalendarEventIteratorFilter!) {\n    calendar_calendarEventsIterator_v2(filter: $filter) {\n      event {\n        eventId\n        name\n        colour\n        calendarIds\n        startTime\n        endTime\n        type\n        attendees {\n          partyId\n          type\n          partyInfo {\n            partyId\n            ... on Staff {\n              person {\n                firstName\n                lastName\n                avatarUrl\n              }\n            }\n          }\n        }\n        rooms {\n          name\n        }\n        extensions {\n          eventAttendance {\n            eventId\n            note\n            attendanceCodeId\n            attendanceCode {\n              name\n              codeType\n            }\n            personPartyId\n            adminSubmitted\n            createdBy {\n              firstName\n              lastName\n              type\n            }\n            updatedAt\n            updatedBy {\n              firstName\n              lastName\n              type\n            }\n          }\n          previousEventAttendance {\n            attendanceCode {\n              codeType\n            }\n            personPartyId\n          }\n        }\n      }\n      eventsOnSameDayForSameGroup {\n        eventId\n        name\n        colour\n        type\n        startTime\n        endTime\n        rooms {\n          name\n        }\n        tags {\n          label\n          context\n        }\n      }\n    }\n  }\n": types.Calendar_CalendarEventsIteratorDocument,
    "\n  query subjectGroups($filter: SubjectGroupFilter!) {\n    subjectGroups(filter: $filter) {\n      partyId\n      name\n      avatarUrl\n      subjects {\n        id\n        name\n        colour\n        nationalCode\n      }\n      studentMembers {\n        memberCount\n      }\n      staff {\n        firstName\n        lastName\n        avatarUrl\n      }\n      irePP {\n        level\n        examinable\n      }\n      programmeStages {\n        programme {\n          name\n        }\n      }\n      yearGroups {\n        name\n      }\n      studentMembershipType {\n        type\n      }\n    }\n  }\n": types.SubjectGroupsDocument,
    "\n  query subjectGroupById($filter: SubjectGroupFilter!) {\n    subjectGroups(filter: $filter) {\n      partyId\n      name\n      avatarUrl\n      yearGroups {\n        name\n      }\n      subjects {\n        name\n        colour\n      }\n      studentMembershipType {\n        type\n      }\n      staff {\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        type\n      }\n      students {\n        partyId\n        classGroup {\n          name\n        }\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n    }\n  }\n": types.SubjectGroupByIdDocument,
    "\n  mutation core_updateSubjectGroups($input: [UpdateSubjectGroupInput!]) {\n    core_updateSubjectGroups(input: $input) {\n      success\n    }\n  }\n": types.Core_UpdateSubjectGroupsDocument,
    "\n  mutation core_switchSubjectGroupType($input: Core_SwitchSubjectGroupType!) {\n    core_switchSubjectGroupType(input: $input) {\n      success\n    }\n  }\n": types.Core_SwitchSubjectGroupTypeDocument,
    "\n  query supportGroups($filter: SubjectGroupFilter!) {\n    subjectGroups(filter: $filter) {\n      partyId\n      name\n      avatarUrl\n      subjects {\n        name\n        colour\n      }\n      studentMembers {\n        memberCount\n      }\n      staff {\n        firstName\n        lastName\n        avatarUrl\n      }\n      irePP {\n        level\n      }\n      programmeStages {\n        programme {\n          name\n        }\n      }\n      yearGroups {\n        name\n      }\n    }\n  }\n": types.SupportGroupsDocument,
    "\n  query supportGroupById($filter: SubjectGroupFilter!) {\n    subjectGroups(filter: $filter) {\n      partyId\n      name\n      avatarUrl\n      yearGroups {\n        name\n      }\n      subjects {\n        name\n        colour\n      }\n      staff {\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        type\n      }\n      students {\n        partyId\n        classGroup {\n          name\n        }\n        person {\n          firstName\n          lastName\n          avatarUrl\n        }\n      }\n    }\n  }\n": types.SupportGroupByIdDocument,
    "\n  query yearGroupsList($filter: YearGroupEnrollmentFilter) {\n    core_yearGroupEnrollments(filter: $filter) {\n      yearGroupEnrollmentPartyId\n      name\n      nationalCode\n      yearGroupId\n      shortName\n      description\n      yearGroupLeads {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      studentMembers {\n        memberCount\n      }\n    }\n  }\n": types.YearGroupsListDocument,
    "\n  query yearGroupById($filter: YearGroupEnrollmentFilter) {\n    core_yearGroupEnrollments(filter: $filter) {\n      yearGroupEnrollmentPartyId\n      name\n      students {\n        partyId\n        person {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        classGroup {\n          name\n        }\n        tutors {\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n    }\n  }\n": types.YearGroupByIdDocument,
    "\n  mutation core_updateYearGroupEnrollments(\n    $input: [UpdateYearGroupEnrollmentInput!]\n  ) {\n    core_updateYearGroupEnrollments(input: $input) {\n      success\n    }\n  }\n": types.Core_UpdateYearGroupEnrollmentsDocument,
    "\n  query communications_label($filter: LabelFilter) {\n    communications_label(filter: $filter) {\n      id\n      name\n      personPartyId\n      colour\n      custom\n      type\n    }\n  }\n": types.Communications_LabelDocument,
    "\n  mutation update_communications_label($input: LabelInput) {\n    communications_saveLabel(input: $input) {\n      id\n      name\n      personPartyId\n      colour\n      custom\n    }\n  }\n": types.Update_Communications_LabelDocument,
    "\n  query communications_unreadCount($filter: UnreadCountFilter) {\n    communications_unreadCount(filter: $filter) {\n      labelId\n      labelType\n      count\n    }\n  }\n": types.Communications_UnreadCountDocument,
    "\n  mutation communications_assignLabel($input: AssignLabelInput) {\n    communications_assignLabel(input: $input) {\n      id\n    }\n  }\n": types.Communications_AssignLabelDocument,
    "\n  query communications_recipients($filter: RecipientFilter) {\n    communications_recipients(filter: $filter) {\n      partyId\n      type\n      text\n      avatarUrl\n    }\n  }\n": types.Communications_RecipientsDocument,
    "\n  query mailSearchQuery($filter: SearchFilter) {\n    search_search(filter: $filter) {\n      partyId\n      type\n      text\n      avatarUrl\n    }\n  }\n": types.MailSearchQueryDocument,
    "\n  query communications_mail($filter: MailFilter) {\n    communications_mail(filter: $filter) {\n      id\n      rootMailId\n      threadId\n      subject\n      body\n      senderPartyId\n      sender {\n        partyId\n        title {\n          id\n          nameTextId\n          name\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      sentOn\n      latestMessage\n      canReply\n      starred\n      readOn\n      recipients {\n        id\n        recipientPartyId\n        recipientType\n        recipient {\n          partyId\n          title {\n            id\n            nameTextId\n            name\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n      }\n      labels {\n        id\n        name\n        personPartyId\n        colour\n        custom\n      }\n      threads {\n        id\n        rootMailId\n        threadId\n        subject\n        body\n        senderPartyId\n        sentOn\n        latestMessage\n        canReply\n        starred\n        readOn\n        sender {\n          partyId\n          title {\n            id\n            nameTextId\n            name\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        recipients {\n          id\n          recipientPartyId\n          recipientType\n          recipient {\n            partyId\n            title {\n              id\n              nameTextId\n              name\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        labels {\n          id\n          name\n          personPartyId\n          colour\n          custom\n        }\n      }\n    }\n  }\n": types.Communications_MailDocument,
    "\n  mutation communications_sendMail($input: SendMailInput) {\n    communications_sendMail(input: $input) {\n      id\n    }\n  }\n": types.Communications_SendMailDocument,
    "\n  mutation communications_starred($input: MailStarredInput) {\n    communications_starred(input: $input)\n  }\n": types.Communications_StarredDocument,
    "\n  mutation communications_read($input: MailReadInput) {\n    communications_read(input: $input)\n  }\n": types.Communications_ReadDocument,
    "\n  query notes_behaviourCategories($filter: Notes_BehaviourCategoryFilter) {\n    notes_behaviourCategories(filter: $filter) {\n      behaviourCategoryId\n      name\n      description\n      colour\n      behaviourType\n    }\n  }\n": types.Notes_BehaviourCategoriesDocument,
    "\n  query notes_behaviourLevels($filter: Notes_BehaviourCategoryFilter) {\n    notes_behaviourCategories(filter: $filter) {\n      behaviourType\n      behaviourCategoryId\n      name\n      description\n      colour\n      tags {\n        id\n        category\n        name\n        nameTextId\n        description\n        descriptionTextId\n        tag_l1\n        tag_l2\n        tag_l3\n        behaviourType\n      }\n    }\n  }\n": types.Notes_BehaviourLevelsDocument,
    "\n  query notes_tags_behaviours($filter: Notes_TagFilter!) {\n    notes_tags(filter: $filter) {\n      id\n      name\n      description\n      behaviourType\n      tag_l2\n      category\n      behaviourCategory {\n        behaviourCategoryId\n        name\n      }\n    }\n  }\n": types.Notes_Tags_BehavioursDocument,
    "\n  mutation notes_deleteBehaviour($input: Notes_DeleteNotes!) {\n    notes_deleteNote(input: $input) {\n      success\n    }\n  }\n": types.Notes_DeleteBehaviourDocument,
    "\n  query notes_notes_behaviour($filter: Notes_NotesFilter!) {\n    notes_notes(filter: $filter) {\n      id\n      note\n      createdOn\n      createdBy\n      incidentDate\n      createdByPerson {\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n      }\n      tags {\n        id\n        name\n        category\n        behaviourType\n        descriptionTextId\n        nameTextId\n      }\n      associatedGroups {\n        __typename\n        partyId\n        ... on SubjectGroup {\n          subjects {\n            name\n            colour\n          }\n        }\n      }\n    }\n  }\n": types.Notes_Notes_BehaviourDocument,
    "\n  query notes_behaviour($filter: Notes_BehaviourFilter) {\n    notes_behaviour(filter: $filter) {\n      behaviours {\n        noteId\n        incidentDate\n        referencedParties {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        associatedParties {\n          __typename\n          partyId\n          ... on SubjectGroup {\n            name\n            subjects {\n              name\n              colour\n            }\n          }\n          ... on Student {\n            person {\n              partyId\n              firstName\n              lastName\n              avatarUrl\n              type\n            }\n          }\n        }\n        associatedPartyIds\n        category\n        details\n        takenByPartyId\n        takenBy {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        tags {\n          id\n          name\n          description\n          behaviourType\n        }\n        tagIds\n      }\n    }\n  }\n": types.Notes_BehaviourDocument,
    "\n  query notes_categories($filter: Notes_BehaviourFilter) {\n    notes_behaviour(filter: $filter) {\n      categories {\n        behaviourCategoryId\n        name\n        colour\n        count\n      }\n    }\n  }\n": types.Notes_CategoriesDocument,
    "\n  mutation notes_upsertBehaviourCategory($input: Notes_BehaviourCategoryInput) {\n    notes_upsertBehaviourCategory(input: $input) {\n      success\n    }\n  }\n": types.Notes_UpsertBehaviourCategoryDocument,
    "\n  mutation notes_upsertBehaviourTags($input: [Notes_UpsertBehaviourTagInput]) {\n    notes_upsertBehaviourTags(input: $input) {\n      id\n    }\n  }\n": types.Notes_UpsertBehaviourTagsDocument,
    "\n  mutation notes_upsertNotes($input: [Notes_UpsertNote]) {\n    notes_upsertNotes(input: $input) {\n      id\n    }\n  }\n": types.Notes_UpsertNotesDocument,
    "\n  query core_people($filter: Core_PeopleFilter!) {\n    core_people(filter: $filter) {\n      partyId\n      title {\n        id\n        name\n        nameTextId\n      }\n      firstName\n      lastName\n      avatarUrl\n      type\n    }\n  }\n": types.Core_PeopleDocument,
    "\n  query catalogue_personalTitles {\n    catalogue_personalTitles {\n      id\n      name\n    }\n  }\n": types.Catalogue_PersonalTitlesDocument,
    "\n  query printPersonsGroupMemberships($filter: Print_PersonsGroupMemberships!) {\n    print_personsGroupMemberships(filter: $filter) {\n      url\n      html\n    }\n  }\n": types.PrintPersonsGroupMembershipsDocument,
    "\n  mutation core_archiveStudentContacts($input: ArchiveStudentContactInput!) {\n    core_archiveStudentContacts(input: $input) {\n      success\n    }\n  }\n": types.Core_ArchiveStudentContactsDocument,
    "\n  query core_studentContacts {\n    core_studentContacts {\n      partyId\n      person {\n        avatarUrl\n        firstName\n        lastName\n      }\n      personalInformation {\n        primaryAddress {\n          line1\n          line2\n          line3\n          city\n          country\n          postCode\n        }\n        primaryPhoneNumber {\n          number\n        }\n        primaryEmail {\n          email\n        }\n      }\n      relationships {\n        student {\n          person {\n            avatarUrl\n            firstName\n            lastName\n          }\n        }\n        allowedToContact\n        includeInSms\n      }\n    }\n  }\n": types.Core_StudentContactsDocument,
    "\n  query core_studentContactsForSelect {\n    core_studentContacts {\n      person {\n        partyId\n        title {\n          nameTextId\n          id\n          name\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n    }\n  }\n": types.Core_StudentContactsForSelectDocument,
    "\n  query core_studentContacts_personal($filter: StudentContactFilter!) {\n    core_studentContacts(filter: $filter) {\n      partyId\n      person {\n        title {\n          id\n          name\n          nameTextId\n        }\n        avatarUrl\n        firstName\n        lastName\n      }\n      personalInformation {\n        firstName\n        lastName\n        preferredFirstName\n        middleName\n        gender\n        dateOfBirth\n        ire {\n          ppsNumber\n          religion\n          countryOfBirth\n        }\n        nationality\n        mothersMaidenName\n        primaryAddress {\n          id\n          line1\n          line2\n          line3\n          city\n          country\n          postCode\n        }\n        primaryPhoneNumber {\n          phoneNumberId\n          number\n          areaCode\n          countryCode\n        }\n        phoneNumbers {\n          phoneNumberId\n          primaryPhoneNumber\n          number\n          areaCode\n          countryCode\n        }\n        primaryEmail {\n          emailId\n          email\n        }\n      }\n      occupation\n      requiresInterpreter\n      spokenLanguages\n      relationships {\n        relationshipType\n        studentPartyId\n        priority\n        allowedToContact\n        includeInSms\n        includeInTmail\n        pickupRights\n        legalGuardian\n        allowAccessToStudentData\n      }\n    }\n  }\n": types.Core_StudentContacts_PersonalDocument,
    "\n  query core_studentContacts_students($filter: StudentContactFilter!) {\n    core_studentContacts(filter: $filter) {\n      partyId\n      relationships {\n        studentPartyId\n        relationshipType\n        priority\n        allowedToContact\n        includeInSms\n        includeInTmail\n        pickupRights\n        legalGuardian\n        allowAccessToStudentData\n        ... on StudentContactRelationshipInfo {\n          student {\n            partyId\n            classGroup {\n              name\n            }\n            ... on Student {\n              person {\n                partyId\n                firstName\n                lastName\n                avatarUrl\n                type\n              }\n              extensions {\n                priority\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.Core_StudentContacts_StudentsDocument,
    "\n  mutation core_upsertStudentContact($input: UpsertStudentContactInput!) {\n    core_upsertStudentContact(input: $input) {\n      partyId\n    }\n  }\n": types.Core_UpsertStudentContactDocument,
    "\n  mutation notes_deleteNote($input: Notes_DeleteNotes!) {\n    notes_deleteNote(input: $input) {\n      success\n    }\n  }\n": types.Notes_DeleteNoteDocument,
    "\n  query notes_notes($filter: Notes_NotesFilter!) {\n    notes_notes(filter: $filter) {\n      id\n      note\n      createdOn\n      createdBy\n      createdByPerson {\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n      }\n      tags {\n        id\n        name\n        category\n        descriptionTextId\n        nameTextId\n      }\n      priorityNote\n      priorityStartDate\n      priorityEndDate\n    }\n  }\n": types.Notes_NotesDocument,
    "\n  query notes_tags($filter: Notes_TagFilter!) {\n    notes_tags(filter: $filter) {\n      id\n      name\n      description\n      category\n      tag_l1\n    }\n  }\n": types.Notes_TagsDocument,
    "\n  mutation notes_upsertNotesTags($input: [Notes_UpsertNotesTagInput]) {\n    notes_upsertNotesTags(input: $input) {\n      id\n    }\n  }\n": types.Notes_UpsertNotesTagsDocument,
    "\n  query personStatus($filter: PersonStatusFilter) {\n      composite_personStatus(filter: $filter) {\n          partyId\n          sessionAttendance {\n              name\n              status\n          }\n          currentLocation {\n              partyId\n              eventId\n              room {\n                  roomId\n                  name\n                  capacity\n              }\n              lesson\n              teacher\n              currentAttendance {\n                  attendanceCodeName\n                  codeType\n              }\n          }\n          priorityStudent\n          activeSupportPlan\n      }\n  }\n": types.PersonStatusDocument,
    "\n  mutation eire_deleteNonClassContactHours(\n    $input: DeleteNonClassContactHoursInput!\n  ) {\n    eire_deleteNonClassContactHours(input: $input) {\n      success\n    }\n  }\n": types.Eire_DeleteNonClassContactHoursDocument,
    "\n  query catalogue_staffCapacities {\n    catalogue_staffCapacities {\n      id\n      name\n    }\n  }\n": types.Catalogue_StaffCapacitiesDocument,
    "\n  query core_staff($filter: StaffFilter) {\n    core_staff(filter: $filter) {\n      partyId\n      person {\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n      }\n      employmentCapacity {\n        name\n      }\n      startDate\n      endDate\n      personalInformation {\n        gender\n        primaryPhoneNumber {\n          number\n        }\n        primaryEmail {\n          email\n        }\n        ire {\n          ppsNumber\n        }\n      }\n      staffIre {\n        teacherCouncilNumber\n        staffPost {\n          id\n          name\n        }\n      }\n      carRegistrationNumber\n      parking\n      position\n    }\n  }\n": types.Core_StaffDocument,
    "\n  query core_staffInfoForSelect($filter: StaffFilter) {\n    core_staff(filter: $filter) {\n      person {\n        partyId\n        title {\n          nameTextId\n          id\n          name\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n    }\n  }\n": types.Core_StaffInfoForSelectDocument,
    "\n  query eire_nonClassContactHours($filter: NonClassContactHoursFilter) {\n    eire_nonClassContactHours(filter: $filter) {\n      academicNameSpaceId\n      activity\n      dayOfTheWeek\n      description\n      hours\n      minutes\n      nonClassContactHoursId\n      programme\n      staffPartyId\n    }\n  }\n": types.Eire_NonClassContactHoursDocument,
    "\n  query core_staff_personal($filter: StaffFilter) {\n    core_staff(filter: $filter) {\n      partyId\n      person {\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n      }\n      startDate\n      endDate\n      noLongerStaffMember\n      personalInformation {\n        gender\n        dateOfBirth\n        ire {\n          ppsNumber\n        }\n        primaryAddress {\n          id\n          line1\n          line2\n          line3\n          city\n          country\n          postCode\n        }\n        primaryPhoneNumber {\n          phoneNumberId\n          number\n          areaCode\n          countryCode\n        }\n        phoneNumbers {\n          phoneNumberId\n          primaryPhoneNumber\n          number\n          areaCode\n          countryCode\n        }\n        primaryEmail {\n          emailId\n          email\n        }\n        emails {\n          emailId\n          email\n          primaryEmail\n        }\n        nextOfKin {\n          firstName\n          lastName\n          phoneNumbers\n        }\n      }\n      staffIre {\n        teacherCouncilNumber\n        staffPost {\n          id\n          name\n        }\n      }\n      payrollNumber\n      employmentCapacity {\n        id\n        name\n      }\n      emergencyContact {\n        firstName\n        lastName\n        primaryNumber\n        additionalNumber\n      }\n      displayCode\n      carRegistrationNumber\n      makeAndModel\n      parking\n      jobSharing\n      qualifications\n      competencies\n      availableForTeaching\n      availableForSubstitution\n      availableForSupportClasses\n      position\n      competencySubjects {\n        id\n        name\n        colour\n      }\n    }\n  }\n": types.Core_Staff_PersonalDocument,
    "\n  query catalogue_staffPosts {\n    catalogue_staffPosts {\n      id\n      name\n    }\n  }\n": types.Catalogue_StaffPostsDocument,
    "\n  query core_staff_subjectGroups(\n    $filter: StaffFilter\n    $filter2: SubjectGroupRelationshipFilter\n  ) {\n    core_staff(filter: $filter) {\n      subjectGroups(filter: $filter2) {\n        partyId\n        name\n        avatarUrl\n        subjects {\n          name\n          colour\n        }\n        irePP {\n          level\n        }\n        studentMembers {\n          memberCount\n        }\n      }\n    }\n  }\n": types.Core_Staff_SubjectGroupsDocument,
    "\n  mutation eire_upsertNonClassContactHours(\n    $input: SaveNonClassContactHoursInput\n  ) {\n    eire_upsertNonClassContactHours(input: $input) {\n      success\n    }\n  }\n": types.Eire_UpsertNonClassContactHoursDocument,
    "\n  mutation core_upsertStaff($input: [UpsertStaffInput]) {\n    core_upsertStaff(input: $input) {\n      partyId\n    }\n  }\n": types.Core_UpsertStaffDocument,
    "\n  mutation wellbeing_deleteStudentAen(\n    $input: Wellbeing_DeleteStudentAenInput!\n  ) {\n    wellbeing_deleteStudentAen(input: $input) {\n      success\n    }\n  }\n": types.Wellbeing_DeleteStudentAenDocument,
    "\n  query wellbeing_studentAen($filter: StudentAenFilter!) {\n    wellbeing_studentAen(filter: $filter) {\n      studentPartyId\n      entries {\n        id\n        studentPartyId\n        startDate\n        endDate\n        type\n        typeNote\n        contact\n        snaSupport\n        provision\n        note\n      }\n    }\n  }\n": types.Wellbeing_StudentAenDocument,
    "\n  mutation wellbeing_upsertStudentAen(\n    $input: Wellbeing_UpsertStudentAenInput!\n  ) {\n    wellbeing_upsertStudentAen(input: $input) {\n      success\n    }\n  }\n": types.Wellbeing_UpsertStudentAenDocument,
    "\n  mutation enrollment_ire_changeProgrammeStage(\n    $input: [EnrollmentIre_ChangeProgrammeStage!]!\n  ) {\n    enrollment_ire_changeProgrammeStage(input: $input) {\n      success\n    }\n  }\n": types.Enrollment_Ire_ChangeProgrammeStageDocument,
    "\n  mutation wellbeing_deleteStudentMedicalCondition(\n    $input: DeleteStudentMedicalConditionInput!\n  ) {\n    wellbeing_deleteStudentMedicalCondition(input: $input) {\n      studentPartyId\n      conditions {\n        id\n        name\n        description\n      }\n    }\n  }\n": types.Wellbeing_DeleteStudentMedicalConditionDocument,
    "\n  mutation wellbeing_deleteStudentMedicalContact(\n    $input: DeleteStudentMedicalContactInput!\n  ) {\n    wellbeing_deleteStudentMedicalContact(input: $input) {\n      studentPartyId\n      medicalContacts {\n        id\n      }\n    }\n  }\n": types.Wellbeing_DeleteStudentMedicalContactDocument,
    "\n  query wellbeing_studentMedicalConditionLookup {\n    wellbeing_studentMedicalConditionLookup {\n      values\n    }\n  }\n": types.Wellbeing_StudentMedicalConditionLookupDocument,
    "\n  query wellbeing_studentMedical($filter: StudentMedicalFilter) {\n    wellbeing_studentMedical(filter: $filter) {\n      studentPartyId\n      student {\n        contacts {\n          partyId\n          person {\n            firstName\n            lastName\n          }\n          personalInformation {\n            preferredFirstName\n            preferredLastName\n            primaryPhoneNumber {\n              number\n            }\n          }\n          relationships {\n            relationshipType\n          }\n        }\n        siblings {\n          enrolledSiblings {\n            partyId\n            person {\n              title {\n                id\n                nameTextId\n                name\n              }\n              firstName\n              lastName\n              avatarUrl\n              type\n            }\n            classGroup {\n              name\n            }\n          }\n          nonEnrolledSiblings {\n            partyId\n            firstName\n            lastName\n          }\n        }\n      }\n      conditions {\n        id\n        name\n        description\n        equipment {\n          id\n          name\n          expiryDate\n          location\n          notes\n        }\n        emergencyPlan\n      }\n      medicalContacts {\n        id\n        personalTitle\n        firstName\n        lastName\n        occupation\n        addressLine1\n        addressLine2\n        addressLine3\n        county\n        postcode\n        primaryPhone\n        email\n      }\n    }\n  }\n": types.Wellbeing_StudentMedicalDocument,
    "\n  mutation wellbeing_upsertStudentMedicalCondition(\n    $input: UpsertStudentMedicalConditionInput!\n  ) {\n    wellbeing_upsertStudentMedicalCondition(input: $input) {\n      studentPartyId\n      conditions {\n        id\n        name\n        description\n        equipment {\n          id\n          name\n          location\n        }\n      }\n    }\n  }\n": types.Wellbeing_UpsertStudentMedicalConditionDocument,
    "\n  mutation wellbeing_upsertStudentMedicalContact(\n    $input: UpsertStudentMedicalContactInput!\n  ) {\n    wellbeing_upsertStudentMedicalContact(input: $input) {\n      studentPartyId\n      medicalContacts {\n        id\n        personalTitleId\n        firstName\n        lastName\n        addressLine1\n        addressLine2\n        addressLine3\n        county\n        postcode\n        primaryPhone\n        email\n        occupation\n      }\n    }\n  }\n": types.Wellbeing_UpsertStudentMedicalContactDocument,
    "\n  query core_student_contacts($filter: StudentFilter!) {\n    core_students(filter: $filter) {\n      partyId\n      contacts {\n        partyId\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        personalInformation {\n          gender\n          nationality\n          primaryAddress {\n            line1\n            line2\n            line3\n            city\n            country\n            postCode\n          }\n          primaryPhoneNumber {\n            number\n            areaCode\n            countryCode\n          }\n          primaryEmail {\n            email\n          }\n        }\n        relationships {\n          relationshipType\n          priority\n          allowedToContact\n          includeInSms\n          includeInTmail\n          pickupRights\n          legalGuardian\n          allowAccessToStudentData\n        }\n      }\n    }\n  }\n": types.Core_Student_ContactsDocument,
    "\n  query core_subjectGroupStudents($filter: SubjectGroupStudentFilter!) {\n    core_subjectGroupStudents(filter: $filter) {\n      students {\n        examinable\n      }\n      subjectGroup {\n        partyId\n        name\n        avatarUrl\n        subjects {\n          name\n          colour\n        }\n        staff {\n          firstName\n          lastName\n          avatarUrl\n        }\n        irePP {\n          level\n          examinable\n        }\n      }\n    }\n  }\n": types.Core_SubjectGroupStudentsDocument,
    "\n  query core_student_personal($filter: StudentFilter!) {\n    core_students(filter: $filter) {\n      partyId\n      startDate\n      leftEarly\n      endDate\n      guardianshipNote\n      exemptions {\n        id\n        exemption\n        exemptionTypeCode\n        grantor\n      }\n      person {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      personalInformation {\n        firstName\n        lastName\n        preferredFirstName\n        preferredLastName\n        middleName\n        gender\n        dateOfBirth\n        birthCertFirstName\n        birthCertLastName\n        ire {\n          ppsNumber\n          religion\n          countryOfBirth\n        }\n        nationality\n        mothersMaidenName\n        primaryAddress {\n          line1\n          line2\n          line3\n          city\n          country\n          postCode\n        }\n        addresses {\n          line1\n          line2\n          line3\n          city\n          country\n          postCode\n          primaryAddress\n        }\n        primaryPhoneNumber {\n          number\n          areaCode\n          countryCode\n        }\n        primaryEmail {\n          email\n        }\n      }\n      studentIrePP {\n        medicalCard\n        travellerHeritage\n        languageSupportApplicant\n        borderIndicator\n        examNumber\n        lockerNumber\n        previousSchoolRollNumber\n        dpin\n        examEntrant\n        repeatYear\n        boardingDays\n        shortTermPupil\n        shortTermPupilNumWeeks\n        reasonForLeaving\n        destinationRollNo\n        previousSchoolName\n        previousSchoolType\n      }\n      classGroup {\n        name\n      }\n      tutors {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n      }\n      yearGroupLeads {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n      }\n      yearGroups {\n        name\n      }\n      programmeStages {\n        name\n        programme {\n          name\n        }\n      }\n      siblings {\n        enrolledSiblings {\n          partyId\n          person {\n            partyId\n            title {\n              id\n              nameTextId\n              name\n            }\n            firstName\n            lastName\n            avatarUrl\n          }\n          classGroup {\n            name\n          }\n        }\n        nonEnrolledSiblings {\n          partyId\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.Core_Student_PersonalDocument,
    "\n  query studentsForSiblingSearch {\n    core_students {\n      partyId\n      person {\n        partyId\n        title {\n          id\n          nameTextId\n          name\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      classGroup {\n        name\n      }\n      contacts {\n        partyId\n        person {\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n      }\n    }\n  }\n": types.StudentsForSiblingSearchDocument,
    "\n  query core_students {\n    core_students {\n      partyId\n      person {\n        partyId\n        avatarUrl\n        firstName\n        lastName\n        type\n      }\n      classGroup {\n        name\n        staff {\n          firstName\n          lastName\n        }\n      }\n      personalInformation {\n        preferredFirstName\n        dateOfBirth\n        primaryPhoneNumber {\n          number\n        }\n        primaryEmail {\n          email\n        }\n      }\n      studentIrePP {\n        examNumber\n        previousSchoolName\n        dpin\n      }\n      tutors {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n      }\n      yearGroupLeads {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n      }\n      yearGroups {\n        name\n      }\n      programmeStages {\n        id\n        name\n        programme {\n          name\n        }\n      }\n      extensions {\n        priority\n      }\n    }\n  }\n": types.Core_StudentsDocument,
    "\n  query core_student($filter: StudentFilter!) {\n    core_students(filter: $filter) {\n      partyId\n      person {\n        partyId\n        avatarUrl\n        firstName\n        lastName\n      }\n      classGroup {\n        name\n        staff {\n          firstName\n          lastName\n        }\n      }\n      yearGroupLeads {\n        firstName\n        lastName\n        avatarUrl\n      }\n      yearGroups {\n        shortName\n      }\n      tutors {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      extensions {\n        priority\n      }\n    }\n  }\n": types.Core_StudentDocument,
    "\n  query core_studentsInfoForSelect($filter: StudentFilter) {\n    core_students(filter: $filter) {\n      person {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      classGroup {\n        name\n      }\n      yearGroups {\n        name\n      }\n    }\n  }\n": types.Core_StudentsInfoForSelectDocument,
    "\n  mutation updateCoreStudents($input: [UpdateStudentInput]!) {\n    core_updateStudents(input: $input) {\n      success\n    }\n  }\n": types.UpdateCoreStudentsDocument,
    "\n  mutation core_linkSiblingsAndContacts($input: Core_LinkSiblingsAndContacts!) {\n    core_linkSiblingsAndContacts(input: $input) {\n      success\n    }\n  }\n": types.Core_LinkSiblingsAndContactsDocument,
    "\n  mutation core_updateStudentContactRelationships(\n    $input: [Core_UpdateStudentContactRelationshipInput]\n  ) {\n    core_updateStudentContactRelationships(input: $input) {\n      success\n    }\n  }\n": types.Core_UpdateStudentContactRelationshipsDocument,
    "\n  mutation core_updateStudentSubjectGroup(\n    $input: [Core_UpdateStudentSubjectGroupInput]!\n  ) {\n    core_updateStudentSubjectGroup(input: $input) {\n      success\n    }\n  }\n": types.Core_UpdateStudentSubjectGroupDocument,
    "\n  mutation updateStudent($input: [UpdateStudentInput]!) {\n    core_updateStudents(input: $input) {\n      success\n    }\n  }\n": types.UpdateStudentDocument,
    "\n  query printTimetable($filter: Print_TimetableOptions!) {\n    print_printTimetable(filter: $filter) {\n      url\n      html\n    }\n  }\n": types.PrintTimetableDocument,
    "\n  query attendance_awolReport($filter: AwolFilter!) {\n    attendance_awolReport(filter: $filter) {\n      date\n      partyId\n      student {\n        partyId\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n        yearGroups {\n          name\n        }\n      }\n      classGroupId\n      classGroup {\n        partyId\n        name\n      }\n      absentEvent {\n        eventId\n        startTime\n        endTime\n        name\n        description\n        rooms {\n          name\n        }\n      }\n      absentSubjectGroup {\n        partyId\n        subjectGroupType\n        name\n        subjects {\n          colour\n        }\n      }\n      absentUpdatedBy {\n        firstName\n        lastName\n        avatarUrl\n      }\n      absentCreatedBy {\n        firstName\n        lastName\n        avatarUrl\n      }\n      presentEvent {\n        eventId\n        allDayEvent\n        startTime\n        endTime\n        name\n        rooms {\n          name\n        }\n      }\n      presentSubjectGroup {\n        partyId\n        subjectGroupType\n        name\n        subjects {\n          colour\n        }\n      }\n      presentUpdatedBy {\n        avatarUrl\n        firstName\n        lastName\n      }\n      presentCreatedBy {\n        avatarUrl\n        firstName\n        lastName\n      }\n    }\n  }\n": types.Attendance_AwolReportDocument,
    "\n  query reporting_reports {\n    reporting_reports {\n      info {\n        id\n        name\n      }\n      reports {\n        id\n        name\n      }\n    }\n  }\n": types.Reporting_ReportsDocument,
    "\n  query reporting_runReportExpand($filter: Reporting_ReportFilterExpand) {\n    reporting_runReportExpand(filter: $filter) {\n      id\n      fields {\n        id\n        label\n        visibleByDefault\n      }\n      data\n    }\n  }\n": types.Reporting_RunReportExpandDocument,
    "\n  query reporting_reportInfo($filter: Reporting_ReportFilter) {\n    reporting_runReport(filter: $filter) {\n      id\n      info {\n        name\n        supportsExpandRow\n      }\n      innerReports {\n        id\n        name\n      }\n    }\n  }\n": types.Reporting_ReportInfoDocument,
    "\n  query reporting_runReport($filter: Reporting_ReportFilter) {\n    reporting_runReport(filter: $filter) {\n      id\n      info {\n        name\n        supportsExpandRow\n        isInteractive\n      }\n      innerReports {\n        id\n        name\n      }\n      debug {\n        sql\n      }\n      filters {\n        id\n        inputType\n        label\n        defaultValue\n        required\n        values {\n          id\n          value\n        }\n        minValue\n        maxValue\n      }\n      fields {\n        id\n        label\n        visibleByDefault\n        checkExpandedRows\n        hideMenu\n        sortable\n        maxWidth\n        minWidth\n        pinned\n      }\n      metrics {\n        defaultValue\n        values {\n          id\n          name\n        }\n      }\n      timeGroupBy {\n        defaultValue\n        values {\n          id\n          name\n          description\n        }\n      }\n      groupBy {\n        defaultValue\n        values {\n          id\n          name\n          description\n        }\n      }\n      data\n      tableDisplayOptions {\n        gridOptions\n        tableContainerSx\n      }\n    }\n  }\n": types.Reporting_RunReportDocument,
    "\n  query sa_classAway($filter: Sa_ClassAwayFilter!) {\n    sa_classAway(filter: $filter) {\n      freeStaffPartyIds\n      cancelled\n      staffAreFreed\n      freeStaff {\n        partyId\n        title {\n          id\n          nameTextId\n          name\n        }\n        firstName\n        lastName\n        avatarUrl\n        archived\n        type\n      }\n      studentsAttendingActivityTotal\n      studentsInGroupTotal\n      event {\n        name\n        colour\n        calendarEventId {\n          eventId\n          date\n        }\n        eventId\n        calendarIds\n        startTime\n        endTime\n        type\n        allDayEvent\n        attendees {\n          partyId\n          type\n          partyInfo {\n            partyId\n          }\n        }\n        lessonInfo {\n          subjectGroupId\n          lessonId\n        }\n        roomIds\n        rooms {\n          roomId\n          name\n          capacity\n          description\n          pools\n          includeInTimetable\n          externalSystemId\n          location\n          disabled\n        }\n      }\n      affectedAttendees {\n        partyId\n      }\n    }\n  }\n": types.Sa_ClassAwayDocument,
    "\n  query roomsList {\n    core_rooms {\n      roomId\n      name\n      capacity\n      description\n    }\n  }\n": types.RoomsListDocument,
    "\n  query activitiesList($filter: Sa_SchoolActivityFilter!) {\n    sa_activities(filter: $filter) {\n      schoolActivityId\n      customGroupId\n      lastPublished\n      name\n      createdBy {\n        person {\n          firstName\n          lastName\n          avatarUrl\n        }\n      }\n      dates {\n        date\n        startTime\n        endTime\n        partial\n      }\n      location {\n        locationDetails\n        inSchoolGrounds\n        roomIds\n        rooms {\n          roomId\n          name\n        }\n      }\n      tripPurpose\n      notes\n      published\n      customGroup {\n        partyId\n        name\n        avatarUrl\n        relatedSubjectGroups {\n          partyId\n          name\n          subjects {\n            name\n          }\n        }\n        studentMembers {\n          groupPartyId\n          memberCount\n          members {\n            partyId\n            person {\n              avatarUrl\n              partyId\n              firstName\n              lastName\n            }\n          }\n        }\n        staffMembers {\n          groupPartyId\n          memberIds\n          members {\n            partyId\n            person {\n              avatarUrl\n              partyId\n              firstName\n              lastName\n            }\n          }\n          memberCount\n        }\n      }\n    }\n  }\n": types.ActivitiesListDocument,
    "\n  query activitiesById($filter: Sa_SchoolActivityFilter!) {\n    sa_activities(filter: $filter) {\n      schoolActivityId\n      customGroupId\n      lastPublished\n      name\n      staffAbsenceTypeId\n      dates {\n        date\n        startTime\n        endTime\n        partial\n      }\n      location {\n        locationDetails\n        inSchoolGrounds\n        roomIds\n        rooms {\n          roomId\n          name\n        }\n      }\n      tripPurpose\n      notes\n      published\n      customGroup {\n        partyId\n        name\n        avatarUrl\n        relatedSubjectGroups {\n          partyId\n          name\n          subjects {\n            name\n          }\n        }\n        studentMembers {\n          groupPartyId\n          memberCount\n          members {\n            partyId\n            person {\n              avatarUrl\n              partyId\n              firstName\n              lastName\n            }\n          }\n        }\n        staffMembers {\n          groupPartyId\n          memberIds\n          members {\n            partyId\n            person {\n              avatarUrl\n              partyId\n              firstName\n              lastName\n            }\n          }\n          memberCount\n        }\n      }\n    }\n  }\n": types.ActivitiesByIdDocument,
    "\n  query sa_lessonsNeedingCover($filter: Sa_LessonsNeedingCoverFilter!) {\n    sa_lessonsNeedingCover(filter: $filter) {\n      awayStaffPartyIds\n      awayStaff {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n        type\n        archived\n      }\n      studentsAttendingActivityTotal\n      studentsInGroupTotal\n      event {\n        colour\n        calendarEventId {\n          eventId\n        }\n        name\n        eventId\n        startTime\n        endTime\n        rooms {\n          name\n        }\n      }\n      affectedAttendees {\n        partyId\n      }\n    }\n  }\n": types.Sa_LessonsNeedingCoverDocument,
    "\n  mutation sa_upsertPublish($input: Sa_PublishInput) {\n    sa_upsertPublish(input: $input) {\n      success\n    }\n  }\n": types.Sa_UpsertPublishDocument,
    "\n  mutation sa_upsertActivity($input: Sa_SchoolActivityInput) {\n    sa_upsertActivity(input: $input) {\n      success\n    }\n  }\n": types.Sa_UpsertActivityDocument,
    "\n  mutation core_upsertAcademicNamespace($input: SaveAcademicNamespaceInput) {\n    core_upsertAcademicNamespace(input: $input) {\n      academicNamespaceId\n    }\n  }\n": types.Core_UpsertAcademicNamespaceDocument,
    "\n  mutation core_setActiveActiveAcademicNamespace(\n    $input: SetActiveAcademicNamespace\n  ) {\n    core_setActiveActiveAcademicNamespace(input: $input) {\n      academicNamespaceId\n      type\n      name\n      year\n      description\n      isActiveDefaultNamespace\n    }\n  }\n": types.Core_SetActiveActiveAcademicNamespaceDocument,
    "\n  mutation core_upsertRooms($input: [UpsertRoomInput]) {\n    core_upsertRooms(input: $input) {\n      roomId\n    }\n  }\n": types.Core_UpsertRoomsDocument,
    "\n  query assessment_commentBank($filter: CommentBankFilter) {\n    assessment_commentBank(filter: $filter) {\n      id\n      name\n      description\n      active\n      comments {\n        id\n        comment\n        active\n      }\n    }\n  }\n": types.Assessment_CommentBankDocument,
    "\n  query commentBankById($filter: CommentBankFilter) {\n    assessment_commentBank(filter: $filter) {\n      id\n      name\n      comments {\n        id\n        comment\n        active\n      }\n    }\n  }\n": types.CommentBankByIdDocument,
    "\n  mutation assessment_saveCommentBank($input: [SaveCommentBankInput]) {\n    assessment_saveCommentBank(input: $input) {\n      id\n      name\n      description\n      active\n      comments {\n        id\n        comment\n        active\n      }\n    }\n  }\n": types.Assessment_SaveCommentBankDocument,
    "\n  query core_staff_form_b($filter: StaffFilter) {\n    core_staff(filter: $filter) {\n      partyId\n      person {\n        firstName\n        lastName\n      }\n      personalInformation {\n        gender\n        ire {\n          ppsNumber\n        }\n      }\n      payrollNumber\n      jobSharing\n      qualifications\n      employmentCapacity {\n        id\n        name\n      }\n      staffIre {\n        teacherCouncilNumber\n        teacherReferenceNumber\n        includeDtrReturns\n        staffPost {\n          id\n          name\n        }\n        qualifications2\n        qualifications3\n        qualifications4\n        otherSchool1\n        otherSchool2\n        previousSchool1\n        previousSchool2\n      }\n    }\n  }\n": types.Core_Staff_Form_BDocument,
    "\n  mutation core_updateStaff($input: [UpdateStaffInput!]!) {\n    core_updateStaff(input: $input) {\n      success\n    }\n  }\n": types.Core_UpdateStaffDocument,
    "\n  mutation savePermissionGroup($input: SavePermissionGroup) {\n    users_savePermissionGroup(input: $input) {\n      id\n    }\n  }\n": types.SavePermissionGroupDocument,
    "\n  query composite_permissionGroups($filter: PermissionGroupFilter!) {\n    composite_permissionGroups(filter: $filter) {\n      id\n      name\n      description\n      memberType\n      memberPartyIds\n      custom\n      permissionSets {\n        id\n        toggle\n        permissionType\n        feature\n      }\n    }\n  }\n": types.Composite_PermissionGroupsDocument,
    "\n  query users_permissionSets($filter: PermissionSetFilter!) {\n    users_permissionSets(filter: $filter) {\n      id\n      name\n      description\n      permissionType\n      toggle\n      feature\n    }\n  }\n": types.Users_PermissionSetsDocument,
    "\n  query ppod_PPODCredentials {\n    ppod_PPODCredentials {\n      username\n      password\n      lastSyncSuccessful\n    }\n  }\n": types.Ppod_PpodCredentialsDocument,
    "\n  mutation ppod_savePPODCredentials($input: SavePPODCredentials!) {\n    ppod_savePPODCredentials(input: $input) {\n      username\n      password\n    }\n  }\n": types.Ppod_SavePpodCredentialsDocument,
    "\n  query users_schoolInfo {\n    users_schoolInfo {\n      id\n      rollNo\n      name\n      email\n      website\n      fax\n      principal\n      boardingFeeFiveDay\n      boardingFeeSixOrSevenDay\n      schoolGender\n      parentAssociation\n      studentCouncil\n      boardOfManagement\n      irishClassification\n      coOperatingSchoolRollNo1\n      coOperatingSchoolRollNo2\n      octoberReturnsContact\n      octoberReturnsPhoneNo\n      octoberReturnsFaxNo\n      octoberReturnsEmail\n      phones {\n        phone\n      }\n      addresses {\n        address1\n        address2\n        address3\n        address4\n        county\n        localAuthority\n      }\n      chairPeople {\n        chairPersonId\n        forename\n        surname\n        phoneNo\n        startDate\n        endDate\n      }\n      owners {\n        ownerId\n        forename\n        surname\n        addressLine1\n        addressLine2\n        addressLine3\n        addressLine4\n        startDate\n        endDate\n      }\n      trustees {\n        trusteeId\n        forename\n        surname\n        addressLine1\n        addressLine2\n        addressLine3\n        addressLine4\n        startDate\n        endDate\n      }\n    }\n  }\n": types.Users_SchoolInfoDocument,
    "\n  query ppod_syncRequests($filter: SyncRequestsFilter!) {\n    ppod_syncRequests(filter: $filter) {\n      id\n      syncRequestStatus\n      requesterPartyId\n      requester {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      failureReason\n      requestedOn\n    }\n  }\n": types.Ppod_SyncRequestsDocument,
    "\n  query core_rooms {\n    core_rooms {\n      roomId\n      name\n      capacity\n      description\n      pools\n      includeInTimetable\n      externalSystemId\n      location\n      disabled\n    }\n  }\n": types.Core_RoomsDocument,
    "\n  query catalogueSubjects($filter: SubjectFilter) {\n    catalogue_subjects(filter: $filter) {\n      id\n      name\n      description\n      shortCode\n      nationalCode\n      subjectSource\n      examinable\n      colour\n      icon\n      active\n    }\n  }\n": types.CatalogueSubjectsDocument,
    "\n  mutation catalogue_upsertSubjects($input: [UpsertSubject!]!) {\n    catalogue_upsertSubjects(input: $input) {\n      success\n      message\n    }\n  }\n": types.Catalogue_UpsertSubjectsDocument,
    "\n  mutation users_inviteUsers($input: [InviteUser]) {\n    users_inviteUsers(input: $input) {\n      userAccesses {\n        personPartyId\n        webLastLogin\n        mobileLastLogin\n        status\n        invitationId\n        invitingPersonPartyId\n        invitedOn\n      }\n      validations {\n        message\n        associatedUsers\n      }\n    }\n  }\n": types.Users_InviteUsersDocument,
    "\n  mutation core_updateStudentContacts($input: [UpdateStudentContactInput!]!) {\n    core_updateStudentContacts(input: $input) {\n      success\n    }\n  }\n": types.Core_UpdateStudentContactsDocument,
    "\n  mutation core_updateStudent($input: [UpdateStudentInput!]!) {\n    core_updateStudents(input: $input) {\n      success\n    }\n  }\n": types.Core_UpdateStudentDocument,
    "\n  query users_userAccess($filter: UserAccessFilter) {\n    users_userAccess(filter: $filter) {\n      personPartyId\n      personalInfo {\n        firstName\n        lastName\n        primaryEmail {\n          email\n        }\n      }\n      contactStudents {\n        firstName\n        lastName\n      }\n      webLastLogin\n      mobileLastLogin\n      status\n      invitedOn\n      yearGroup {\n        shortName\n      }\n      yearGroupContacts {\n        shortName\n      }\n      mobileAppVersion\n    }\n  }\n": types.Users_UserAccessDocument,
    "\n  mutation sendSms($input: SendSmsInput) {\n    communications_sendSms(input: $input)\n  }\n": types.SendSmsDocument,
    "\n  query communications_sms($filter: SmsFilter) {\n    communications_sms(filter: $filter) {\n      id\n      name\n      sender {\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      body\n      sentOn\n      canReply\n      numRecipients\n      totalCost\n      recipients {\n        id {\n          tenant\n          smsId\n          recipientPartyId\n        }\n        recipient {\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        recipientPhoneNumber\n        smsStatus\n      }\n    }\n  }\n": types.Communications_SmsDocument,
    "\n  query communications_smsCost($filter: SmsCostFilter) {\n    communications_smsCost(filter: $filter) {\n      total\n    }\n  }\n": types.Communications_SmsCostDocument,
    "\n  query communications_currentMonthlySpend {\n    communications_currentMonthlySpend {\n      currentMonthlySpend\n    }\n  }\n": types.Communications_CurrentMonthlySpendDocument,
    "\n  mutation swm_applySubstitutions($input: SWM_InsertSubstitution!) {\n    swm_applySubstitutions(input: $input) {\n      success\n    }\n  }\n": types.Swm_ApplySubstitutionsDocument,
    "\n  mutation swm_deleteSubstitutions($input: SWM_DeleteSubstitution!) {\n    swm_deleteSubstitutions(input: $input) {\n      success\n    }\n  }\n": types.Swm_DeleteSubstitutionsDocument,
    "\n  query swm_absenceTypes($filter: SWM_StaffAbsenceTypeFilter) {\n    swm_absenceTypes(filter: $filter) {\n      absenceTypeId\n      name\n      nameTextId\n      description\n      descriptionTextId\n      code\n      availableForRequests\n    }\n  }\n": types.Swm_AbsenceTypesDocument,
    "\n  mutation swm_upsertAbsenceType($input: [SWM_UpsertStaffAbsenceType]) {\n    swm_upsertAbsenceType(input: $input) {\n      absenceTypeId\n    }\n  }\n": types.Swm_UpsertAbsenceTypeDocument,
    "\n  query swm_absences($filter: SWM_StaffAbsenceFilter) {\n    swm_absences(filter: $filter) {\n      absenceId\n      absenceTypeId\n      staffPartyId\n      absenceType {\n        absenceTypeId\n        name\n        code\n      }\n      isLongTermLeave\n      longTermLeaveGroupsRequired\n      longTermLeaveGroupsApplied\n      staff {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      absenceReasonText\n      substitutionRequired\n      dates {\n        continuousStartDate\n        continuousEndDate\n        individualDates\n        partialAbsence\n        leavesAt\n        returnsAt\n      }\n      longTermLeaveGroups {\n        groupId\n        group {\n          name\n          avatarUrl\n        }\n        coveringStaffId\n        coveringStaff {\n          person {\n            partyId\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n      }\n    }\n  }\n": types.Swm_AbsencesDocument,
    "\n  mutation swm_upsertAbsence($input: [SWM_UpsertStaffAbsence!]!) {\n    swm_upsertAbsence(input: $input) {\n      staffPartyId\n      absenceTypeId\n      fromAbsenceRequestId\n      absenceReasonText\n    }\n  }\n": types.Swm_UpsertAbsenceDocument,
    "\n  mutation swm_deleteAbsence($input: SWM_DeleteStaffAbsence!) {\n    swm_deleteAbsence(input: $input) {\n      success\n    }\n  }\n": types.Swm_DeleteAbsenceDocument,
    "\n  query swm_substitutionLookup($filter: SWM_SubstitutionLookupFilter) {\n    swm_substitutionLookup(filter: $filter) {\n      staff {\n        staff {\n          person {\n            partyId\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n          extensions {\n            timetableSummary {\n              fulltimePeriods\n            }\n            substitutionSummary {\n              substitutionCountThisWeek\n              substitutionTimeThisWeekMinutes\n              substitutionCountThisYear\n              substitutionTimeThisYearMinutes\n            }\n          }\n        }\n        available\n        clashingEvents\n        substitutionStats {\n          sandsWeekCount\n          sandsWeekMinutes\n          sandsYearCount\n          sandsYearMinutes\n          casualWeekCount\n          casualWeekMinutes\n        }\n      }\n      freeRooms {\n        roomId\n        name\n        pools\n      }\n      clashingRooms {\n        room {\n          roomId\n          name\n          pools\n        }\n        clash\n      }\n    }\n  }\n": types.Swm_SubstitutionLookupDocument,
    "\n  query swm_eventsForSubstitutionsByStaffByPeriod(\n    $filter: SWM_EventsForSubstitutionFilter\n  ) {\n    swm_eventsForSubstitutionsByStaffByPeriod(filter: $filter) {\n      eventsByStaff {\n        staff {\n          person {\n            partyId\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        substitutionEventsByDay {\n          dayInfo {\n            date\n            startTime\n            endTime\n            dayType\n            periods {\n              startTime\n              endTime\n              type\n            }\n          }\n          requireSubstitutionReason {\n            reason\n            note\n          }\n          substitutionEventsByPeriod {\n            absenceId\n            staffPartyId\n            coverTeacherDuplicatedAtSameTime {\n              staffPartyId\n              event {\n                eventId\n                startTime\n                endTime\n                type\n                allDayEvent\n                attendees {\n                  partyInfo {\n                    __typename\n                    ... on Staff {\n                      person {\n                        partyId\n                        title {\n                          id\n                          name\n                          nameTextId\n                        }\n                        firstName\n                        lastName\n                        avatarUrl\n                        type\n                      }\n                    }\n                  }\n                }\n                rooms {\n                  name\n                  roomId\n                }\n                tags {\n                  label\n                  context\n                }\n                colour\n                name\n                description\n              }\n              substitution {\n                substitutionId\n                originalStaff {\n                  partyId\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  avatarUrl\n                  type\n                }\n                substituteStaff {\n                  partyId\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  avatarUrl\n                  type\n                }\n                substitutionType {\n                  substitutionTypeId\n                  name\n                  description\n                  code\n                }\n                substituteRoom {\n                  name\n                  roomId\n                }\n                note\n              }\n            }\n            event {\n              eventId\n              startTime\n              endTime\n              type\n              allDayEvent\n              attendees {\n                partyInfo {\n                  __typename\n                  ... on Staff {\n                    person {\n                      partyId\n                      title {\n                        id\n                        name\n                        nameTextId\n                      }\n                      firstName\n                      lastName\n                      avatarUrl\n                      type\n                    }\n                  }\n                }\n              }\n              rooms {\n                name\n                roomId\n              }\n              tags {\n                label\n                context\n              }\n              colour\n              name\n              description\n            }\n            substitution {\n              substitutionId\n              originalStaff {\n                partyId\n                title {\n                  id\n                  name\n                  nameTextId\n                }\n                firstName\n                lastName\n                avatarUrl\n                type\n              }\n              substituteStaff {\n                partyId\n                title {\n                  id\n                  name\n                  nameTextId\n                }\n                firstName\n                lastName\n                avatarUrl\n                type\n              }\n              substitutionType {\n                substitutionTypeId\n                name\n                description\n                code\n              }\n              substituteRoom {\n                name\n                roomId\n              }\n              note\n            }\n          }\n        }\n      }\n    }\n  }\n": types.Swm_EventsForSubstitutionsByStaffByPeriodDocument,
    "\n  query swm_substitutionTypes($filter: SWM_StaffSubstitutionTypeFilter) {\n    swm_substitutionTypes(filter: $filter) {\n      substitutionTypeId\n      name\n      description\n      code\n    }\n  }\n": types.Swm_SubstitutionTypesDocument,
    "\n  query tt_timetables($filter: TTTimetableFilter) {\n    tt_timetables(filter: $filter) {\n      timetableId\n      name\n      liveStatus {\n        totalChanges\n        lessonChanges\n        timetableGroupChanges\n        lastPublishedDate\n      }\n    }\n  }\n": types.Tt_TimetablesDocument,
    "\n  mutation tt_addLesson($input: Tt_AddLessonInput) {\n    tt_addLesson(input: $input) {\n      success\n    }\n  }\n": types.Tt_AddLessonDocument,
    "\n  query tt_addLessonOptions($filter: Tt_AddLessonFilter) {\n    tt_addLessonOptions(filter: $filter) {\n      freeStaffIds\n      freeStaff {\n        person {\n          partyId\n          title {\n            id\n            nameTextId\n            name\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n      }\n      freeTimetableGroupIds\n      freeTimetableGroups {\n        partyId\n        name\n        avatarUrl\n      }\n      freeRoomIds\n      freeRooms {\n        roomId\n        name\n        capacity\n        description\n        pools\n        includeInTimetable\n        externalSystemId\n        location\n        disabled\n      }\n    }\n  }\n": types.Tt_AddLessonOptionsDocument,
    "\n  query tt_swapTeacherOptions($filter: TTSwapTeacherFilter!) {\n    tt_swapTeacherOptions(filter: $filter) {\n      timeslots {\n        id {\n          gridIdx\n          dayIdx\n          periodIdx\n        }\n        info {\n          dayOfWeek\n          startTime\n          endTime\n        }\n      }\n      teachers {\n        staffId\n        teacher {\n          person {\n            partyId\n            title {\n              id\n              nameTextId\n              name\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        lessonOnTimeslots {\n          id {\n            lessonIdx\n            lessonInstanceIdx\n            timetableGroupId\n          }\n          partyGroup {\n            name\n          }\n        }\n      }\n    }\n  }\n": types.Tt_SwapTeacherOptionsDocument,
    "\n  query tt_swapRoomOptions($filter: TTSwapRoomFilter!) {\n    tt_swapRoomOptions(filter: $filter) {\n      timeslots {\n        id {\n          gridIdx\n          dayIdx\n          periodIdx\n        }\n        info {\n          dayOfWeek\n          startTime\n          endTime\n        }\n      }\n      rooms {\n        roomId\n        room {\n          name\n          capacity\n          description\n          pools\n        }\n        lessonOnTimeslots {\n          id {\n            lessonIdx\n            lessonInstanceIdx\n            timetableGroupId\n          }\n          partyGroup {\n            name\n          }\n        }\n      }\n    }\n  }\n": types.Tt_SwapRoomOptionsDocument,
    "\n  mutation tt_removeLesson($input: [Tt_RemoveLessonInput!]) {\n    tt_removeLesson(input: $input) {\n      success\n    }\n  }\n": types.Tt_RemoveLessonDocument,
    "\n  query tt_editLessonOptions($filter: Tt_EditLessonFilter) {\n    tt_editLessonOptions(filter: $filter) {\n      freeStaffIds\n      freeStaff {\n        person {\n          partyId\n          title {\n            id\n            nameTextId\n            name\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n      }\n      freeTimetableGroupIds\n      freeTimetableGroups {\n        partyId\n        name\n        avatarUrl\n      }\n      freeRoomIds\n      freeRooms {\n        roomId\n        name\n        capacity\n        description\n        pools\n        includeInTimetable\n        externalSystemId\n        location\n        disabled\n      }\n    }\n  }\n": types.Tt_EditLessonOptionsDocument,
    "\n  mutation tt_publish($input: TTPublishTimetableInput!) {\n    tt_publish(input: $input) {\n      success\n    }\n  }\n": types.Tt_PublishDocument,
    "\n  mutation tt_reset($input: TT_Reset!) {\n    tt_reset(input: $input) {\n      success\n    }\n  }\n": types.Tt_ResetDocument,
    "\n  query tt_resourceTimetableView($filter: TTResourceTimetableViewFilter!) {\n    tt_resourceTimetableView(filter: $filter) {\n      timeslots {\n        timeslotIds {\n          gridIdx\n          dayIdx\n          periodIdx\n        }\n        timeslots {\n          dayOfWeek\n          startTime\n          endTime\n          periodType\n        }\n        lessons {\n          id {\n            lessonIdx\n            lessonInstanceIdx\n            timetableGroupId\n          }\n          timeslotId {\n            gridIdx\n            dayIdx\n            periodIdx\n          }\n          timeslotInfo {\n            startTime\n            endTime\n          }\n          partyGroup {\n            __typename\n            partyId\n            name\n            avatarUrl\n            ... on SubjectGroup {\n              subjects {\n                name\n                colour\n              }\n            }\n          }\n          room {\n            roomId\n            name\n          }\n          teachers {\n            person {\n              partyId\n              title {\n                id\n                name\n                nameTextId\n              }\n              firstName\n              lastName\n              avatarUrl\n              type\n            }\n          }\n          spread\n        }\n      }\n    }\n  }\n": types.Tt_ResourceTimetableViewDocument,
    "\n  query tt_groups($filter: TT_GroupsFilter!) {\n    tt_groups(filter: $filter) {\n      partyGroup {\n        __typename\n        name\n        partyId\n        avatarUrl\n        ... on SubjectGroup {\n          yearGroups {\n            name\n          }\n          subjects {\n            colour\n          }\n            subjectGroupType  \n            subjectIds  \n          studentMembershipType {\n            type\n            classGroupId\n            blockId\n            classGroupName\n          }\n        }\n      }\n      studentMembershipType\n      teachers {\n        person {\n          partyId\n          title {\n            id\n            nameTextId\n            name\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n      }\n      lessons {\n        id {\n          lessonIdx\n          lessonInstanceIdx\n          timetableGroupId\n        }\n        timeslotId {\n          gridIdx\n          dayIdx\n          periodIdx\n        }\n        timeslotInfo {\n          startTime\n          endTime\n        }\n        partyGroup {\n          __typename\n          partyId\n          name\n          avatarUrl\n          ... on SubjectGroup {\n            subjects {\n              name\n              colour\n            }\n             \n          }\n        }\n        room {\n          roomId\n          name\n        }\n        teachers {\n          person {\n            partyId\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        spread\n      }\n    }\n  }\n": types.Tt_GroupsDocument,
    "\n  mutation tt_swap($input: TTSwapsInput!) {\n    tt_swap(input: $input) {\n      success\n    }\n  }\n": types.Tt_SwapDocument,
    "\n  query tt_unpublishedChanges($filter: TTTimetableFilter) {\n    tt_timetables(filter: $filter) {\n      timetableId\n      liveStatus {\n        totalChanges\n        publishDiff {\n          lessonDiffs {\n            newLesson {\n              id {\n                lessonIdx\n                lessonInstanceIdx\n                timetableGroupId\n              }\n              timeslotId {\n                gridIdx\n                dayIdx\n                periodIdx\n              }\n              timeslotInfo {\n                startTime\n                endTime\n              }\n              partyGroup {\n                __typename\n                partyId\n                name\n                avatarUrl\n                ... on SubjectGroup {\n                  subjects {\n                    name\n                    colour\n                  }\n                }\n              }\n              room {\n                roomId\n                name\n              }\n              teachers {\n                person {\n                  partyId\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  avatarUrl\n                  type\n                }\n              }\n              spread\n            }\n            oldLesson {\n              id {\n                lessonIdx\n                lessonInstanceIdx\n                timetableGroupId\n              }\n              timeslotId {\n                gridIdx\n                dayIdx\n                periodIdx\n              }\n              timeslotInfo {\n                startTime\n                endTime\n              }\n              partyGroup {\n                __typename\n                partyId\n                name\n                avatarUrl\n                ... on SubjectGroup {\n                  subjects {\n                    name\n                    colour\n                  }\n                }\n              }\n              room {\n                roomId\n                name\n              }\n              teachers {\n                person {\n                  partyId\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  avatarUrl\n                  type\n                }\n              }\n              spread\n            }\n            type\n            roomChanged\n            teachersChanged\n            timeslotChanged\n          }\n          groupDiffs {\n            newGroup {\n              partyGroup {\n                __typename\n                partyId\n                name\n                avatarUrl\n                ... on SubjectGroup {\n                  subjects {\n                    name\n                    colour\n                  }\n                }\n              }\n              partyId\n              teachers {\n                person {\n                  partyId\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  avatarUrl\n                  type\n                }\n              }\n            }\n            oldGroup {\n              partyGroup {\n                __typename\n                partyId\n                name\n                avatarUrl\n                ... on SubjectGroup {\n                  subjects {\n                    name\n                    colour\n                  }\n                }\n              }\n              partyId\n              teachers {\n                person {\n                  partyId\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  avatarUrl\n                  type\n                }\n              }\n            }\n            type\n            teachersChanged\n          }\n        }\n      }\n    }\n  }\n": types.Tt_UnpublishedChangesDocument,
    "\n  mutation tt_updateTimetableGroup($input: TT_UpdateTimetableGroupInput!) {\n    tt_updateTimetableGroup(input: $input) {\n      success\n    }\n  }\n": types.Tt_UpdateTimetableGroupDocument,
    "\n  mutation tt_upsertTimetableGroup($input: Tt_UpsertSubjectGroup!) {\n    tt_upsertSubjectGroup(input: $input) {\n      success\n    }\n  }\n": types.Tt_UpsertTimetableGroupDocument,
    "\n  query timetableSearchQuery($filter: SearchFilter) {\n    search_search(filter: $filter) {\n      partyId\n      type\n      text\n      avatarUrl\n    }\n  }\n": types.TimetableSearchQueryDocument,
    "\n  mutation tt_editLessonInstance($input: TTEditLessonPeriodInstanceWrapper!) {\n    tt_editLessonInstance(input: $input) {\n      id {\n        lessonIdx\n        lessonInstanceIdx\n        timetableGroupId\n      }\n    }\n  }\n": types.Tt_EditLessonInstanceDocument,
    "\n  query admin__party_people($tenant: Int!) {\n    admin__party_people(tenant: $tenant) {\n      partyId\n      firstName\n      lastName\n      avatarUrl\n      type\n    }\n  }\n": types.Admin__Party_PeopleDocument,
    "\n  query admin__tenants {\n    admin__tenants {\n      tenant\n      name\n      imgUrl\n      liveSchool\n    }\n  }\n": types.Admin__TenantsDocument,
    "\n  mutation admin__resetTenantCache($input: Int) {\n    admin__resetTenantCache(input: $input) {\n      success\n    }\n  }\n": types.Admin__ResetTenantCacheDocument,
    "\n  query core_academicNamespaces {\n    core_academicNamespaces {\n      academicNamespaceId\n      type\n      name\n      year\n      description\n      isActiveDefaultNamespace\n      startDate\n      endDate\n    }\n  }\n": types.Core_AcademicNamespacesDocument,
    "\n  query catalogue_programmeStages {\n    catalogue_programmeStages {\n      id\n      name\n    }\n  }\n": types.Catalogue_ProgrammeStagesDocument,
    "\n  query years($filter: YearGroupFilter) {\n    catalogue_years(filter: $filter) {\n      yearGroupId\n      name\n    }\n  }\n": types.YearsDocument,
    "\n  query myAuthDetails {\n    myAuthDetails {\n      id\n      email\n      name\n      defaultProfileId\n      activeProfileId\n      profiles {\n        id\n        nickName\n        avatarUrl\n        tenant {\n          tenant\n          name\n          imgUrl\n        }\n        profileType {\n          name\n          description\n          userType\n        }\n        permissionIds\n        partyId\n      }\n    }\n  }\n": types.MyAuthDetailsDocument,
};

export function graphql(source: "\n  query searchQuery($filter: SearchFilter) {\n    search_search(filter: $filter) {\n      partyId\n      type\n      text\n      avatarUrl\n      meta {\n        studentPartyId\n      }\n    }\n  }\n"): (typeof documents)["\n  query searchQuery($filter: SearchFilter) {\n    search_search(filter: $filter) {\n      partyId\n      type\n      text\n      avatarUrl\n      meta {\n        studentPartyId\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query assessment_assessmentResult($filter: AssessmentResultFilter) {\n    assessment_assessmentResult(filter: $filter) {\n      id\n      assessmentId\n      studentPartyId\n      student {\n        person {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n      studentClassGroup\n      studentProgramme {\n        shortName\n      }\n      subjectGroup {\n        partyId\n        name\n        irePP {\n          examinable\n        }\n      }\n      studentStudyLevel\n      result\n      targetResult\n      gradeResult\n      gradeId\n      gradeNameTextId\n      targetGradeResult\n      targetGradeNameTextId\n      teacherComment {\n        id\n        assessmentId\n        studentPartyId\n        comment\n        commentBankCommentId\n        commenterUserType\n        commenterPartyId\n        subjectGroupPartyId\n      }\n      extraFields {\n        id\n        extraFieldType\n        assessmentResultId\n        assessmentExtraFieldId\n        result\n        gradeSetGradeId\n        gradeNameTextId\n        commentBankCommentId\n      }\n      examinable\n      ppodPublished\n      ppodResult\n    }\n  }\n"): (typeof documents)["\n  query assessment_assessmentResult($filter: AssessmentResultFilter) {\n    assessment_assessmentResult(filter: $filter) {\n      id\n      assessmentId\n      studentPartyId\n      student {\n        person {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n      studentClassGroup\n      studentProgramme {\n        shortName\n      }\n      subjectGroup {\n        partyId\n        name\n        irePP {\n          examinable\n        }\n      }\n      studentStudyLevel\n      result\n      targetResult\n      gradeResult\n      gradeId\n      gradeNameTextId\n      targetGradeResult\n      targetGradeNameTextId\n      teacherComment {\n        id\n        assessmentId\n        studentPartyId\n        comment\n        commentBankCommentId\n        commenterUserType\n        commenterPartyId\n        subjectGroupPartyId\n      }\n      extraFields {\n        id\n        extraFieldType\n        assessmentResultId\n        assessmentExtraFieldId\n        result\n        gradeSetGradeId\n        gradeNameTextId\n        commentBankCommentId\n      }\n      examinable\n      ppodPublished\n      ppodResult\n    }\n  }\n"];
export function graphql(source: "\n  mutation assessment_saveAssessmentResults(\n    $input: [SaveAssessmentResultInput!]\n  ) {\n    assessment_saveAssessmentResults(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation assessment_saveAssessmentResults(\n    $input: [SaveAssessmentResultInput!]\n  ) {\n    assessment_saveAssessmentResults(input: $input) {\n      id\n    }\n  }\n"];
export function graphql(source: "\n  query assessmentSubjectGroups($filter: AssessmentSubjectGroupsFilter) {\n    assessment_assessmentSubjectGroups(filter: $filter) {\n      subjectGroup {\n        partyId\n        name\n        avatarUrl\n        subjects {\n          name\n        }\n        staff {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          avatarUrl\n          firstName\n          lastName\n        }\n        yearGroups {\n          yearGroupId\n          name\n        }\n      }\n      resultsTotal\n      resultsEntered\n      commentsEntered\n      commentsTotal\n      extraFieldResultsEntered\n      ppodSyncStatus\n      published\n    }\n  }\n"): (typeof documents)["\n  query assessmentSubjectGroups($filter: AssessmentSubjectGroupsFilter) {\n    assessment_assessmentSubjectGroups(filter: $filter) {\n      subjectGroup {\n        partyId\n        name\n        avatarUrl\n        subjects {\n          name\n        }\n        staff {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          avatarUrl\n          firstName\n          lastName\n        }\n        yearGroups {\n          yearGroupId\n          name\n        }\n      }\n      resultsTotal\n      resultsEntered\n      commentsEntered\n      commentsTotal\n      extraFieldResultsEntered\n      ppodSyncStatus\n      published\n    }\n  }\n"];
export function graphql(source: "\n  query assessmentsList($filter: AssessmentFilter) {\n    assessment_assessment(filter: $filter) {\n      id\n      name\n      assessmentType\n      stateCbaType\n      academicNamespaceId\n      years {\n        yearGroupId\n        name\n      }\n      publish\n      publishedFrom\n      publishLearner\n      startDate\n      endDate\n      createdBy {\n        type\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n      }\n      canEnterOverallComments\n    }\n  }\n"): (typeof documents)["\n  query assessmentsList($filter: AssessmentFilter) {\n    assessment_assessment(filter: $filter) {\n      id\n      name\n      assessmentType\n      stateCbaType\n      academicNamespaceId\n      years {\n        yearGroupId\n        name\n      }\n      publish\n      publishedFrom\n      publishLearner\n      startDate\n      endDate\n      createdBy {\n        type\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n      }\n      canEnterOverallComments\n    }\n  }\n"];
export function graphql(source: "\n  query assessment($filter: AssessmentFilter) {\n    assessment_assessment(filter: $filter) {\n      id\n      name\n      assessmentType\n      academicNamespaceId\n      years {\n        yearGroupId\n        name\n      }\n      yearGroupEnrolments {\n        yearGroupEnrollmentPartyId\n        name\n      }\n      publish\n      createdOn\n      gradeType\n      gradeSets {\n        gradeSetId\n        gradeSetName\n      }\n      passFailThreshold\n      captureTarget\n      commentType\n      commentLength\n      commentBank {\n        commentBankId\n        commentBankName\n      }\n      publish\n      publishLearner\n      extraFields {\n        id\n        name\n        assessmentId\n        extraFieldType\n        gradeSetId\n        commentBankId\n        commentBankName\n        selectOptions\n        commentLength\n        resultsEntered\n      }\n      createdBy {\n        type\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n      }\n      stateCbaType\n      subjectGroups {\n        partyId\n        name\n        subjects {\n          name\n          id\n          colour\n        }\n      }\n      startDate\n      endDate\n      captureTutorComment\n      capturePrincipalComment\n      captureYearHeadComment\n      captureHouseMasterComment\n      tutorCommentType\n      tutorCommentBank {\n        commentBankId\n        commentBankName\n      }\n      tutorCommentLength\n      yearHeadCommentType\n      yearHeadCommentBank {\n        commentBankId\n        commentBankName\n      }\n      yearHeadCommentLength\n      principalCommentType\n      principalCommentBank {\n        commentBankId\n        commentBankName\n      }\n      principalCommentLength\n      housemasterCommentType\n      housemasterCommentBank {\n        commentBankId\n        commentBankName\n      }\n      housemasterCommentLength\n    }\n  }\n"): (typeof documents)["\n  query assessment($filter: AssessmentFilter) {\n    assessment_assessment(filter: $filter) {\n      id\n      name\n      assessmentType\n      academicNamespaceId\n      years {\n        yearGroupId\n        name\n      }\n      yearGroupEnrolments {\n        yearGroupEnrollmentPartyId\n        name\n      }\n      publish\n      createdOn\n      gradeType\n      gradeSets {\n        gradeSetId\n        gradeSetName\n      }\n      passFailThreshold\n      captureTarget\n      commentType\n      commentLength\n      commentBank {\n        commentBankId\n        commentBankName\n      }\n      publish\n      publishLearner\n      extraFields {\n        id\n        name\n        assessmentId\n        extraFieldType\n        gradeSetId\n        commentBankId\n        commentBankName\n        selectOptions\n        commentLength\n        resultsEntered\n      }\n      createdBy {\n        type\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n      }\n      stateCbaType\n      subjectGroups {\n        partyId\n        name\n        subjects {\n          name\n          id\n          colour\n        }\n      }\n      startDate\n      endDate\n      captureTutorComment\n      capturePrincipalComment\n      captureYearHeadComment\n      captureHouseMasterComment\n      tutorCommentType\n      tutorCommentBank {\n        commentBankId\n        commentBankName\n      }\n      tutorCommentLength\n      yearHeadCommentType\n      yearHeadCommentBank {\n        commentBankId\n        commentBankName\n      }\n      yearHeadCommentLength\n      principalCommentType\n      principalCommentBank {\n        commentBankId\n        commentBankName\n      }\n      principalCommentLength\n      housemasterCommentType\n      housemasterCommentBank {\n        commentBankId\n        commentBankName\n      }\n      housemasterCommentLength\n    }\n  }\n"];
export function graphql(source: "\n  query commentBankAssessment($filter: CommentBankFilter) {\n    assessment_commentBank(filter: $filter) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query commentBankAssessment($filter: CommentBankFilter) {\n    assessment_commentBank(filter: $filter) {\n      id\n      name\n    }\n  }\n"];
export function graphql(source: "\n  query commentBanksWithComments($filter: CommentBankFilter) {\n    assessment_commentBank(filter: $filter) {\n      id\n      name\n      comments {\n        id\n        comment\n        active\n      }\n    }\n  }\n"): (typeof documents)["\n  query commentBanksWithComments($filter: CommentBankFilter) {\n    assessment_commentBank(filter: $filter) {\n      id\n      name\n      comments {\n        id\n        comment\n        active\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query assessment_overallComments($filter: OverallCommentsFilter) {\n    assessment_overallComments(filter: $filter) {\n      tutorCommentsEntered\n      yearHeadCommentsEntered\n      principalCommentsEntered\n      totalCommentsToEnter\n      students {\n        studentPartyId\n        student {\n          person {\n            partyId\n            firstName\n            lastName\n            avatarUrl\n          }\n        }\n        commentStatus\n        principalComment\n        yearHeadComment\n        tutorComment\n      }\n    }\n  }\n"): (typeof documents)["\n  query assessment_overallComments($filter: OverallCommentsFilter) {\n    assessment_overallComments(filter: $filter) {\n      tutorCommentsEntered\n      yearHeadCommentsEntered\n      principalCommentsEntered\n      totalCommentsToEnter\n      students {\n        studentPartyId\n        student {\n          person {\n            partyId\n            firstName\n            lastName\n            avatarUrl\n          }\n        }\n        commentStatus\n        principalComment\n        yearHeadComment\n        tutorComment\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation assessment_publishStateCba($input: PublishAssessmentInput) {\n    assessment_publishStateCba(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation assessment_publishStateCba($input: PublishAssessmentInput) {\n    assessment_publishStateCba(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation assessment_publish($input: PublishAssessmentInput) {\n    assessment_publish(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation assessment_publish($input: PublishAssessmentInput) {\n    assessment_publish(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation saveTermAssessment($input: SaveTermAssessmentInput) {\n    assessment_saveTermAssessment(input: $input) {\n      name\n      years {\n        name\n      }\n      startDate\n      endDate\n    }\n  }\n"): (typeof documents)["\n  mutation saveTermAssessment($input: SaveTermAssessmentInput) {\n    assessment_saveTermAssessment(input: $input) {\n      name\n      years {\n        name\n      }\n      startDate\n      endDate\n    }\n  }\n"];
export function graphql(source: "\n  query assessment_gradeSet($filter: GradeSetFilter) {\n    assessment_gradeSet(filter: $filter) {\n      id\n      name\n      description\n      nameTextId\n      active\n      customGradeSet\n      isCba\n      grades {\n        id\n        name\n        nameTextId\n        start\n        end\n        active\n      }\n      years\n    }\n  }\n"): (typeof documents)["\n  query assessment_gradeSet($filter: GradeSetFilter) {\n    assessment_gradeSet(filter: $filter) {\n      id\n      name\n      description\n      nameTextId\n      active\n      customGradeSet\n      isCba\n      grades {\n        id\n        name\n        nameTextId\n        start\n        end\n        active\n      }\n      years\n    }\n  }\n"];
export function graphql(source: "\n  mutation assessment_publishPPODResults($input: PPODPublishResultsInput) {\n    assessment_publishPPODResults(input: $input) {\n      id\n      assessmentId\n      studentPartyId\n    }\n  }\n"): (typeof documents)["\n  mutation assessment_publishPPODResults($input: PPODPublishResultsInput) {\n    assessment_publishPPODResults(input: $input) {\n      id\n      assessmentId\n      studentPartyId\n    }\n  }\n"];
export function graphql(source: "\n  mutation assessment_saveStateCbaAssessment(\n    $input: SaveStateCbaAssessmentInput\n  ) {\n    assessment_saveStateCbaAssessment(input: $input) {\n      id\n      academicNamespaceId\n      name\n      assessmentType\n      startDate\n      endDate\n      yearGroupIds\n      years {\n        yearGroupId\n        name\n      }\n      extraFields {\n        id\n        name\n        assessmentId\n        extraFieldType\n        gradeSetId\n        commentBankId\n        commentBankName\n        selectOptions\n        commentLength\n      }\n      createdBy {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation assessment_saveStateCbaAssessment(\n    $input: SaveStateCbaAssessmentInput\n  ) {\n    assessment_saveStateCbaAssessment(input: $input) {\n      id\n      academicNamespaceId\n      name\n      assessmentType\n      startDate\n      endDate\n      yearGroupIds\n      years {\n        yearGroupId\n        name\n      }\n      extraFields {\n        id\n        name\n        assessmentId\n        extraFieldType\n        gradeSetId\n        commentBankId\n        commentBankName\n        selectOptions\n        commentLength\n      }\n      createdBy {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation assessment_studentAssessmentExclusion(\n    $input: [StudentAssessmentExclusionInput]\n  ) {\n    assessment_studentAssessmentExclusion(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation assessment_studentAssessmentExclusion(\n    $input: [StudentAssessmentExclusionInput]\n  ) {\n    assessment_studentAssessmentExclusion(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query dashboardAssessment($filter: DashboardAssessmentFilter) {\n    assessment_dashboardAssessment(filter: $filter) {\n      id\n      name\n      description\n      assessmentType\n      startDate\n      endDate\n      results {\n        id\n        subject\n        result\n        grade\n        studyLevel\n      }\n    }\n  }\n"): (typeof documents)["\n  query dashboardAssessment($filter: DashboardAssessmentFilter) {\n    assessment_dashboardAssessment(filter: $filter) {\n      id\n      name\n      description\n      assessmentType\n      startDate\n      endDate\n      results {\n        id\n        subject\n        result\n        grade\n        studyLevel\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query assessment_assessmentComment($filter: AssessmentCommentFilter) {\n    assessment_assessmentComment(filter: $filter) {\n      id\n      comment\n      commentBankCommentId\n      commenterUserType\n      commenterPartyId\n    }\n  }\n"): (typeof documents)["\n  query assessment_assessmentComment($filter: AssessmentCommentFilter) {\n    assessment_assessmentComment(filter: $filter) {\n      id\n      comment\n      commentBankCommentId\n      commenterUserType\n      commenterPartyId\n    }\n  }\n"];
export function graphql(source: "\n  mutation assessment_saveAssessmentComments(\n    $input: [SaveAssessmentCommentInput!]\n  ) {\n    assessment_saveAssessmentComments(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation assessment_saveAssessmentComments(\n    $input: [SaveAssessmentCommentInput!]\n  ) {\n    assessment_saveAssessmentComments(input: $input) {\n      id\n    }\n  }\n"];
export function graphql(source: "\n  query assessment_calculateGrade($filter: CalculateGradeFilter) {\n    assessment_calculateGrade(filter: $filter) {\n      grade\n    }\n  }\n"): (typeof documents)["\n  query assessment_calculateGrade($filter: CalculateGradeFilter) {\n    assessment_calculateGrade(filter: $filter) {\n      grade\n    }\n  }\n"];
export function graphql(source: "\n  query assessment_studentResult($filter: StudentResultFilter) {\n    assessment_studentResult(filter: $filter) {\n      id\n      assessmentId\n      studentPartyId\n      student {\n        person {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n      studentClassGroup\n      studentProgramme {\n        shortName\n      }\n      subjectGroup {\n        partyId\n        name\n        staff {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        subjects {\n          name\n          colour\n          nationalCode\n        }\n      }\n      studentStudyLevel\n      result\n      targetResult\n      gradeResult\n      gradeNameTextId\n      targetGradeResult\n      targetGradeNameTextId\n      examinable\n      teacherComment {\n        id\n        assessmentId\n        studentPartyId\n        comment\n        commentBankCommentId\n        commenterUserType\n        commenterPartyId\n        subjectGroupPartyId\n      }\n      extraFields {\n        id\n        extraFieldType\n        assessmentResultId\n        assessmentExtraFieldId\n        result\n        gradeSetGradeId\n        gradeNameTextId\n        commentBankCommentId\n      }\n    }\n  }\n"): (typeof documents)["\n  query assessment_studentResult($filter: StudentResultFilter) {\n    assessment_studentResult(filter: $filter) {\n      id\n      assessmentId\n      studentPartyId\n      student {\n        person {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n      studentClassGroup\n      studentProgramme {\n        shortName\n      }\n      subjectGroup {\n        partyId\n        name\n        staff {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        subjects {\n          name\n          colour\n          nationalCode\n        }\n      }\n      studentStudyLevel\n      result\n      targetResult\n      gradeResult\n      gradeNameTextId\n      targetGradeResult\n      targetGradeNameTextId\n      examinable\n      teacherComment {\n        id\n        assessmentId\n        studentPartyId\n        comment\n        commentBankCommentId\n        commenterUserType\n        commenterPartyId\n        subjectGroupPartyId\n      }\n      extraFields {\n        id\n        extraFieldType\n        assessmentResultId\n        assessmentExtraFieldId\n        result\n        gradeSetGradeId\n        gradeNameTextId\n        commentBankCommentId\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query attendance_parentalAttendanceRequests(\n    $filter: ParentalAttendanceRequestFilter\n  ) {\n    attendance_parentalAttendanceRequests(filter: $filter) {\n      id\n      adminNote\n      attendanceCode {\n        id\n        code\n        name\n        description\n      }\n      approvedBy {\n        firstName\n        lastName\n      }\n      approvedByPartyId\n      attendanceCodeId\n      contactPartyId\n      from\n      parentNote\n      requestType\n      status\n      studentPartyId\n      to\n      classGroup {\n        name\n      }\n      contact {\n        person {\n          avatarUrl\n          firstName\n          lastName\n        }\n        relationships {\n          relationshipType\n          studentPartyId\n        }\n      }\n      createdOn\n      studentNew {\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query attendance_parentalAttendanceRequests(\n    $filter: ParentalAttendanceRequestFilter\n  ) {\n    attendance_parentalAttendanceRequests(filter: $filter) {\n      id\n      adminNote\n      attendanceCode {\n        id\n        code\n        name\n        description\n      }\n      approvedBy {\n        firstName\n        lastName\n      }\n      approvedByPartyId\n      attendanceCodeId\n      contactPartyId\n      from\n      parentNote\n      requestType\n      status\n      studentPartyId\n      to\n      classGroup {\n        name\n      }\n      contact {\n        person {\n          avatarUrl\n          firstName\n          lastName\n        }\n        relationships {\n          relationshipType\n          studentPartyId\n        }\n      }\n      createdOn\n      studentNew {\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation attendance_saveParentalAttendanceRequest(\n    $input: [SaveParentalAttendanceRequest]\n  ) {\n    attendance_saveParentalAttendanceRequest(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation attendance_saveParentalAttendanceRequest(\n    $input: [SaveParentalAttendanceRequest]\n  ) {\n    attendance_saveParentalAttendanceRequest(input: $input) {\n      id\n    }\n  }\n"];
export function graphql(source: "\n  mutation attendance_withdrawParentalAttendanceRequest(\n    $input: WithdrawParentalAttendanceRequest\n  ) {\n    attendance_withdrawParentalAttendanceRequest(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation attendance_withdrawParentalAttendanceRequest(\n    $input: WithdrawParentalAttendanceRequest\n  ) {\n    attendance_withdrawParentalAttendanceRequest(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query attendance_attendanceCodes($filter: AttendanceCodeFilter) {\n    attendance_attendanceCodes(filter: $filter) {\n      id\n      name\n      description\n      code\n      active\n      visibleForTeacher\n      visibleForContact\n      nameTextId\n      codeType\n      sessionCodeType\n      custom\n    }\n  }\n"): (typeof documents)["\n  query attendance_attendanceCodes($filter: AttendanceCodeFilter) {\n    attendance_attendanceCodes(filter: $filter) {\n      id\n      name\n      description\n      code\n      active\n      visibleForTeacher\n      visibleForContact\n      nameTextId\n      codeType\n      sessionCodeType\n      custom\n    }\n  }\n"];
export function graphql(source: "\n  mutation attendance_saveAttendanceCode($input: [SaveAttendanceCodeInput]) {\n    attendance_saveAttendanceCode(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation attendance_saveAttendanceCode($input: [SaveAttendanceCodeInput]) {\n    attendance_saveAttendanceCode(input: $input) {\n      id\n    }\n  }\n"];
export function graphql(source: "\n  mutation attendance_saveEventAttendance($input: [SaveEventAttendanceInput]) {\n    attendance_saveEventAttendance(input: $input) {\n      id\n      eventId\n      attendanceCodeId\n      personPartyId\n      date\n    }\n  }\n"): (typeof documents)["\n  mutation attendance_saveEventAttendance($input: [SaveEventAttendanceInput]) {\n    attendance_saveEventAttendance(input: $input) {\n      id\n      eventId\n      attendanceCodeId\n      personPartyId\n      date\n    }\n  }\n"];
export function graphql(source: "\n  query attendance_bulkAttendanceActions(\n    $filter: Attendance_BulkAttendanceActionFilter!\n  ) {\n    attendance_bulkAttendanceActions(filter: $filter) {\n      id\n      attendanceForPartyIds\n      parties {\n        ... on PartyPerson {\n          __typename\n          person {\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        ... on SubjectGroup {\n          partyId\n          actualName\n          name\n          avatarUrl\n          __typename\n        }\n        ... on GeneralGroup {\n          __typename\n          partyId\n          generalGroupType\n          name\n          classGroupInfo {\n            __typename\n          }\n        }\n        ... on ProgrammeStageEnrollment {\n          __typename\n          partyId\n          name\n        }\n        ... on YearGroupEnrollment {\n          __typename\n          partyId\n          name\n        }\n        ... on Staff {\n          __typename\n          person {\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        ... on StudentContact {\n          __typename\n          person {\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n      }\n      attendanceCodeId\n      attendanceCode {\n        id\n        name\n        description\n        code\n        active\n        visibleForTeacher\n        visibleForContact\n        nameTextId\n        descriptionTextId\n        codeType\n        sessionCodeType\n        custom\n      }\n      startDate\n      endDate\n      leavesAt\n      returnsAt\n      partial\n      note\n      createdBy {\n        userId\n        partyId\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n        }\n      }\n      createdOn\n    }\n  }\n"): (typeof documents)["\n  query attendance_bulkAttendanceActions(\n    $filter: Attendance_BulkAttendanceActionFilter!\n  ) {\n    attendance_bulkAttendanceActions(filter: $filter) {\n      id\n      attendanceForPartyIds\n      parties {\n        ... on PartyPerson {\n          __typename\n          person {\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        ... on SubjectGroup {\n          partyId\n          actualName\n          name\n          avatarUrl\n          __typename\n        }\n        ... on GeneralGroup {\n          __typename\n          partyId\n          generalGroupType\n          name\n          classGroupInfo {\n            __typename\n          }\n        }\n        ... on ProgrammeStageEnrollment {\n          __typename\n          partyId\n          name\n        }\n        ... on YearGroupEnrollment {\n          __typename\n          partyId\n          name\n        }\n        ... on Staff {\n          __typename\n          person {\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        ... on StudentContact {\n          __typename\n          person {\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n      }\n      attendanceCodeId\n      attendanceCode {\n        id\n        name\n        description\n        code\n        active\n        visibleForTeacher\n        visibleForContact\n        nameTextId\n        descriptionTextId\n        codeType\n        sessionCodeType\n        custom\n      }\n      startDate\n      endDate\n      leavesAt\n      returnsAt\n      partial\n      note\n      createdBy {\n        userId\n        partyId\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n        }\n      }\n      createdOn\n    }\n  }\n"];
export function graphql(source: "\n  mutation attendance_saveBulkAttendance(\n    $input: Attendance_SaveBulkAttendanceInput\n  ) {\n    attendance_saveBulkAttendance(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation attendance_saveBulkAttendance(\n    $input: Attendance_SaveBulkAttendanceInput\n  ) {\n    attendance_saveBulkAttendance(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query attendance_calendarAttendance($filter: CalendarAttendanceFilter) {\n    attendance_calendarAttendance(filter: $filter) {\n      totalPresent\n      totalLate\n      totalAbsent\n      totalUnexplained\n      totalNotTaken\n      totalPartial\n      attendances {\n        date\n        status\n        partiallyTaken\n      }\n    }\n  }\n"): (typeof documents)["\n  query attendance_calendarAttendance($filter: CalendarAttendanceFilter) {\n    attendance_calendarAttendance(filter: $filter) {\n      totalPresent\n      totalLate\n      totalAbsent\n      totalUnexplained\n      totalNotTaken\n      totalPartial\n      attendances {\n        date\n        status\n        partiallyTaken\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query calendar_calendarDayBellTimes($filter: CalendarDayBellTimeFilter) {\n    calendar_calendarDayBellTimes(filter: $filter) {\n      date\n      bellTimeIds\n      bellTimes {\n        id\n        time\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query calendar_calendarDayBellTimes($filter: CalendarDayBellTimeFilter) {\n    calendar_calendarDayBellTimes(filter: $filter) {\n      date\n      bellTimeIds\n      bellTimes {\n        id\n        time\n        name\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query calendar_calendarInformation($filter: CalendarEventFilter) {\n    calendar_calendarEvents(filter: $filter) {\n      resources {\n        events {\n          eventId\n          startTime\n          endTime\n          type\n          lessonInfo {\n            subjectGroupId\n          }\n          colour\n          name\n          extensions {\n            eventAttendance {\n              id\n              eventId\n              attendanceCodeId\n              attendanceCode {\n                name\n                codeType\n              }\n              personPartyId\n              date\n              note\n              createdByPartyId\n              createdBy {\n                partyId\n                firstName\n                lastName\n                avatarUrl\n              }\n              updatedByPartyId\n              updatedBy {\n                firstName\n                lastName\n                partyId\n                avatarUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query calendar_calendarInformation($filter: CalendarEventFilter) {\n    calendar_calendarEvents(filter: $filter) {\n      resources {\n        events {\n          eventId\n          startTime\n          endTime\n          type\n          lessonInfo {\n            subjectGroupId\n          }\n          colour\n          name\n          extensions {\n            eventAttendance {\n              id\n              eventId\n              attendanceCodeId\n              attendanceCode {\n                name\n                codeType\n              }\n              personPartyId\n              date\n              note\n              createdByPartyId\n              createdBy {\n                partyId\n                firstName\n                lastName\n                avatarUrl\n              }\n              updatedByPartyId\n              updatedBy {\n                firstName\n                lastName\n                partyId\n                avatarUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query studentSessionAttendance($filter: StudentSessionAttendanceFilter) {\n    attendance_studentSessionAttendance(filter: $filter) {\n      dateAttendance {\n        date\n        bellTimeAttendance {\n          bellTimeId\n          bellTime {\n            time\n            name\n          }\n          attendanceCode {\n            id\n            name\n            description\n            code\n            codeType\n          }\n          note\n          createdBy {\n            partyId\n            firstName\n            lastName\n            avatarUrl\n          }\n          createdByPartyId\n          updatedBy {\n            firstName\n            lastName\n            partyId\n            avatarUrl\n          }\n          updatedByPartyId\n        }\n      }\n      studentPartyId\n      student {\n        person {\n          partyId\n          firstName\n          lastName\n        }\n      }\n      classGroup {\n        name\n        staff {\n          partyId\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query studentSessionAttendance($filter: StudentSessionAttendanceFilter) {\n    attendance_studentSessionAttendance(filter: $filter) {\n      dateAttendance {\n        date\n        bellTimeAttendance {\n          bellTimeId\n          bellTime {\n            time\n            name\n          }\n          attendanceCode {\n            id\n            name\n            description\n            code\n            codeType\n          }\n          note\n          createdBy {\n            partyId\n            firstName\n            lastName\n            avatarUrl\n          }\n          createdByPartyId\n          updatedBy {\n            firstName\n            lastName\n            partyId\n            avatarUrl\n          }\n          updatedByPartyId\n        }\n      }\n      studentPartyId\n      student {\n        person {\n          partyId\n          firstName\n          lastName\n        }\n      }\n      classGroup {\n        name\n        staff {\n          partyId\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation saveStudentSessionAttendance(\n    $input: SaveStudentSessionAttendanceInput\n  ) {\n    attendance_saveStudentSessionAttendance(input: $input) {\n      studentPartyId\n    }\n  }\n"): (typeof documents)["\n  mutation saveStudentSessionAttendance(\n    $input: SaveStudentSessionAttendanceInput\n  ) {\n    attendance_saveStudentSessionAttendance(input: $input) {\n      studentPartyId\n    }\n  }\n"];
export function graphql(source: "\n  query attendance_sessionAttendanceReport(\n    $filter: SessionAttendanceListFilter\n  ) {\n    attendance_sessionAttendanceList(filter: $filter) {\n      id\n      studentPartyId\n      attendanceCode {\n        code\n        name\n      }\n      student {\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n      bellTime {\n        time\n        name\n      }\n      attendanceCodeId\n      classGroup {\n        name\n      }\n      date\n      note\n    }\n  }\n"): (typeof documents)["\n  query attendance_sessionAttendanceReport(\n    $filter: SessionAttendanceListFilter\n  ) {\n    attendance_sessionAttendanceList(filter: $filter) {\n      id\n      studentPartyId\n      attendanceCode {\n        code\n        name\n      }\n      student {\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n      bellTime {\n        time\n        name\n      }\n      attendanceCodeId\n      classGroup {\n        name\n      }\n      date\n      note\n    }\n  }\n"];
export function graphql(source: "\n  query attendance_studentSessionAttendance(\n    $filter: StudentSessionAttendanceFilter\n  ) {\n    attendance_studentSessionAttendance(filter: $filter) {\n      studentPartyId\n      student {\n        person {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n      classGroup {\n        name\n      }\n      dateAttendance {\n        date\n        bellTimeAttendance {\n          bellTimeId\n          attendanceCode {\n            id\n            name\n            codeType\n          }\n          note\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query attendance_studentSessionAttendance(\n    $filter: StudentSessionAttendanceFilter\n  ) {\n    attendance_studentSessionAttendance(filter: $filter) {\n      studentPartyId\n      student {\n        person {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n      classGroup {\n        name\n      }\n      dateAttendance {\n        date\n        bellTimeAttendance {\n          bellTimeId\n          attendanceCode {\n            id\n            name\n            codeType\n          }\n          note\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation attendance_saveStudentSessionAttendance(\n    $input: SaveStudentSessionAttendanceInput\n  ) {\n    attendance_saveStudentSessionAttendance(input: $input) {\n      studentPartyId\n    }\n  }\n"): (typeof documents)["\n  mutation attendance_saveStudentSessionAttendance(\n    $input: SaveStudentSessionAttendanceInput\n  ) {\n    attendance_saveStudentSessionAttendance(input: $input) {\n      studentPartyId\n    }\n  }\n"];
export function graphql(source: "\n  query sessionPartySearchQuery($filter: SearchFilter) {\n    search_search(filter: $filter) {\n      partyId\n      type\n      text\n      avatarUrl\n    }\n  }\n"): (typeof documents)["\n  query sessionPartySearchQuery($filter: SearchFilter) {\n    search_search(filter: $filter) {\n      partyId\n      type\n      text\n      avatarUrl\n    }\n  }\n"];
export function graphql(source: "\n  query tableSessionAttendanceView($filter: StudentSessionAttendanceFilter) {\n    attendance_studentSessionAttendance(filter: $filter) {\n      dateAttendance {\n        date\n        bellTimeAttendance {\n          bellTimeId\n          bellTime {\n            time\n            name\n          }\n          attendanceCode {\n            id\n            name\n            description\n            code\n            codeType\n          }\n          note\n          createdBy {\n            partyId\n            firstName\n            lastName\n            avatarUrl\n          }\n          createdByPartyId\n          updatedByPartyId\n          updatedBy {\n            firstName\n            lastName\n            partyId\n            avatarUrl\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query tableSessionAttendanceView($filter: StudentSessionAttendanceFilter) {\n    attendance_studentSessionAttendance(filter: $filter) {\n      dateAttendance {\n        date\n        bellTimeAttendance {\n          bellTimeId\n          bellTime {\n            time\n            name\n          }\n          attendanceCode {\n            id\n            name\n            description\n            code\n            codeType\n          }\n          note\n          createdBy {\n            partyId\n            firstName\n            lastName\n            avatarUrl\n          }\n          createdByPartyId\n          updatedByPartyId\n          updatedBy {\n            firstName\n            lastName\n            partyId\n            avatarUrl\n          }\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query calendar_findFreeResources($filter: FindFreeResourcesFilter) {\n    calendar_findFreeResources(filter: $filter) {\n      freeRooms {\n        roomId\n        name\n      }\n      clashingRooms {\n        room {\n          roomId\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query calendar_findFreeResources($filter: FindFreeResourcesFilter) {\n    calendar_findFreeResources(filter: $filter) {\n      freeRooms {\n        roomId\n        name\n      }\n      clashingRooms {\n        room {\n          roomId\n          name\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation calendar_createCalendarEvents($input: CreateCalendarEventsInput!) {\n    calendar_createCalendarEvents(input: $input) {\n      eventId\n    }\n  }\n"): (typeof documents)["\n  mutation calendar_createCalendarEvents($input: CreateCalendarEventsInput!) {\n    calendar_createCalendarEvents(input: $input) {\n      eventId\n    }\n  }\n"];
export function graphql(source: "\n  query calendarSearchQuery($filter: SearchFilter) {\n    search_search(filter: $filter) {\n      partyId\n      type\n      text\n      avatarUrl\n    }\n  }\n"): (typeof documents)["\n  query calendarSearchQuery($filter: SearchFilter) {\n    search_search(filter: $filter) {\n      partyId\n      type\n      text\n      avatarUrl\n    }\n  }\n"];
export function graphql(source: "\n  query calendar_calendarEvents($filter: CalendarEventFilter!) {\n    calendar_calendarEvents(filter: $filter) {\n      resources {\n        resourceId\n        ... on PartyCalendar {\n          __typename\n          partyInfo {\n            __typename\n            ... on PartyGroup {\n              name\n              avatarUrl\n            }\n            ... on PartyPerson {\n              person {\n                avatarUrl\n                firstName\n                lastName\n              }\n            }\n          }\n        }\n        ... on RoomCalendar {\n          room {\n            name\n          }\n        }\n        events {\n          name\n          eventId\n          calendarIds\n          startTime\n          endTime\n          type\n          colour\n          description\n          allDayEvent\n          editable\n          lessonInfo {\n            subjectGroupId\n            lessonId\n          }\n          exclusions {\n            partyId\n            type\n          }\n          attendees {\n            partyId\n            type\n            partyInfo {\n              partyId\n              __typename\n              ... on PartyGroup {\n                name\n                avatarUrl\n              }\n              ... on PartyPerson {\n                person {\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  avatarUrl\n                }\n              }\n            }\n          }\n          rooms {\n            roomId\n            name\n          }\n          tags {\n            label\n            context\n          }\n          alsoShowForParties\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query calendar_calendarEvents($filter: CalendarEventFilter!) {\n    calendar_calendarEvents(filter: $filter) {\n      resources {\n        resourceId\n        ... on PartyCalendar {\n          __typename\n          partyInfo {\n            __typename\n            ... on PartyGroup {\n              name\n              avatarUrl\n            }\n            ... on PartyPerson {\n              person {\n                avatarUrl\n                firstName\n                lastName\n              }\n            }\n          }\n        }\n        ... on RoomCalendar {\n          room {\n            name\n          }\n        }\n        events {\n          name\n          eventId\n          calendarIds\n          startTime\n          endTime\n          type\n          colour\n          description\n          allDayEvent\n          editable\n          lessonInfo {\n            subjectGroupId\n            lessonId\n          }\n          exclusions {\n            partyId\n            type\n          }\n          attendees {\n            partyId\n            type\n            partyInfo {\n              partyId\n              __typename\n              ... on PartyGroup {\n                name\n                avatarUrl\n              }\n              ... on PartyPerson {\n                person {\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  avatarUrl\n                }\n              }\n            }\n          }\n          rooms {\n            roomId\n            name\n          }\n          tags {\n            label\n            context\n          }\n          alsoShowForParties\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query calendar_partyTimetable($filter: CalendarEventFilter!) {\n    calendar_calendarEvents(filter: $filter) {\n      resources {\n        resourceId\n        events {\n          eventId\n          name\n          startTime\n          endTime\n          type\n          colour\n          attendees {\n            type\n            partyInfo {\n              __typename\n              partyId\n              ... on Staff {\n                person {\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  type\n                }\n              }\n              ... on SubjectGroup {\n                name\n                actualName\n              }\n            }\n          }\n          rooms {\n            name\n          }\n          tags {\n            label\n            context\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query calendar_partyTimetable($filter: CalendarEventFilter!) {\n    calendar_calendarEvents(filter: $filter) {\n      resources {\n        resourceId\n        events {\n          eventId\n          name\n          startTime\n          endTime\n          type\n          colour\n          attendees {\n            type\n            partyInfo {\n              __typename\n              partyId\n              ... on Staff {\n                person {\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  type\n                }\n              }\n              ... on SubjectGroup {\n                name\n                actualName\n              }\n            }\n          }\n          rooms {\n            name\n          }\n          tags {\n            label\n            context\n          }\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query timetableInfo($filter: CalendarDayInfoFilter) {\n    calendar_dayInfo(filter: $filter) {\n      date\n      startTime\n      endTime\n      dayType\n      periods {\n        startTime\n        endTime\n        type\n      }\n    }\n  }\n"): (typeof documents)["\n  query timetableInfo($filter: CalendarDayInfoFilter) {\n    calendar_dayInfo(filter: $filter) {\n      date\n      startTime\n      endTime\n      dayType\n      periods {\n        startTime\n        endTime\n        type\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query core_blocks($filter: BlockFilter) {\n    core_blocks(filter: $filter) {\n      blockId\n      name\n      description\n      subjectGroupNamesJoined\n      subjectGroupIds\n      isRotation\n      rotations {\n        iteration\n        startDate\n        endDate\n      }\n    }\n  }\n"): (typeof documents)["\n  query core_blocks($filter: BlockFilter) {\n    core_blocks(filter: $filter) {\n      blockId\n      name\n      description\n      subjectGroupNamesJoined\n      subjectGroupIds\n      isRotation\n      rotations {\n        iteration\n        startDate\n        endDate\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query enrollment_ire_blockMemberships(\n    $filter: EnrollmentIre_BlockEnrollmentFilter!\n  ) {\n    enrollment_ire_blockMemberships(filter: $filter) {\n      blockId\n      block {\n        blockId\n        name\n        description\n        classGroupIds\n        subjectGroupIds\n      }\n      isRotation\n      groups {\n        rotationIteration\n        unenrolledStudents {\n          isDuplicate\n          classGroupName\n          gender\n          person {\n            partyId\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        subjectGroups {\n          partyId\n          name\n          students {\n            isDuplicate\n            classGroupName\n            gender\n            person {\n              partyId\n              title {\n                id\n                name\n                nameTextId\n              }\n              firstName\n              lastName\n              avatarUrl\n              type\n            }\n          }\n          staff {\n            partyId\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query enrollment_ire_blockMemberships(\n    $filter: EnrollmentIre_BlockEnrollmentFilter!\n  ) {\n    enrollment_ire_blockMemberships(filter: $filter) {\n      blockId\n      block {\n        blockId\n        name\n        description\n        classGroupIds\n        subjectGroupIds\n      }\n      isRotation\n      groups {\n        rotationIteration\n        unenrolledStudents {\n          isDuplicate\n          classGroupName\n          gender\n          person {\n            partyId\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        subjectGroups {\n          partyId\n          name\n          students {\n            isDuplicate\n            classGroupName\n            gender\n            person {\n              partyId\n              title {\n                id\n                name\n                nameTextId\n              }\n              firstName\n              lastName\n              avatarUrl\n              type\n            }\n          }\n          staff {\n            partyId\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation enrollment_ire_upsertBlockMemberships(\n    $input: EnrollmentIre_UpsertBlockMembership!\n  ) {\n    enrollment_ire_upsertBlockMemberships(input: $input) {\n      blockId\n    }\n  }\n"): (typeof documents)["\n  mutation enrollment_ire_upsertBlockMemberships(\n    $input: EnrollmentIre_UpsertBlockMembership!\n  ) {\n    enrollment_ire_upsertBlockMemberships(input: $input) {\n      blockId\n    }\n  }\n"];
export function graphql(source: "\n  mutation core_enableBlockRotations($input: Core_EnableBlockRotationInput!) {\n    core_enableBlockRotations(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation core_enableBlockRotations($input: Core_EnableBlockRotationInput!) {\n    core_enableBlockRotations(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation enrollment_ire_autoAssignBlocks(\n    $input: EnrollmentIre_AutoAssignBlockMembershipInput!\n  ) {\n    enrollment_ire_autoAssignBlocks(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation enrollment_ire_autoAssignBlocks(\n    $input: EnrollmentIre_AutoAssignBlockMembershipInput!\n  ) {\n    enrollment_ire_autoAssignBlocks(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query enrollment_ire_coreMemberships(\n    $filter: EnrollmentIre_CoreEnrollmentFilter!\n  ) {\n    enrollment_ire_coreMemberships(filter: $filter) {\n      yearGroupEnrollment {\n        yearGroupId\n        name\n      }\n      unenrolledStudents {\n        personalInformation {\n          gender\n        }\n        person {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n      }\n      classGroups {\n        partyId\n        name\n        students {\n          personalInformation {\n            gender\n          }\n          person {\n            partyId\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        staff {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query enrollment_ire_coreMemberships(\n    $filter: EnrollmentIre_CoreEnrollmentFilter!\n  ) {\n    enrollment_ire_coreMemberships(filter: $filter) {\n      yearGroupEnrollment {\n        yearGroupId\n        name\n      }\n      unenrolledStudents {\n        personalInformation {\n          gender\n        }\n        person {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n      }\n      classGroups {\n        partyId\n        name\n        students {\n          personalInformation {\n            gender\n          }\n          person {\n            partyId\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        staff {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation enrollment_ire_upsertCoreMemberships(\n    $input: EnrollmentIre_UpsertCoreMembership!\n  ) {\n    enrollment_ire_upsertCoreMemberships(input: $input) {\n      yearGroupEnrollment {\n        yearGroupId\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation enrollment_ire_upsertCoreMemberships(\n    $input: EnrollmentIre_UpsertCoreMembership!\n  ) {\n    enrollment_ire_upsertCoreMemberships(input: $input) {\n      yearGroupEnrollment {\n        yearGroupId\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation enrollment_ire_autoAssignCore(\n    $input: EnrollmentIre_AutoAssignCoreMembershipInput!\n  ) {\n    enrollment_ire_autoAssignCore(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation enrollment_ire_autoAssignCore(\n    $input: EnrollmentIre_AutoAssignCoreMembershipInput!\n  ) {\n    enrollment_ire_autoAssignCore(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation fees_bulkApplyIndividualDiscounts(\n    $input: BulkApplyIndividualDiscountInput\n  ) {\n    fees_bulkApplyIndividualDiscounts(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation fees_bulkApplyIndividualDiscounts(\n    $input: BulkApplyIndividualDiscountInput\n  ) {\n    fees_bulkApplyIndividualDiscounts(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation createPayment($input: MakePaymentInput) {\n    fees_createPayment(input: $input) {\n      clientSecret\n    }\n  }\n"): (typeof documents)["\n  mutation createPayment($input: MakePaymentInput) {\n    fees_createPayment(input: $input) {\n      clientSecret\n    }\n  }\n"];
export function graphql(source: "\n  query fees_payments($filter: FeeFilter) {\n    fees_fees(filter: $filter) {\n      debtors {\n        id\n        feeId\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        classGroup {\n          name\n        }\n        feeStatus\n        amount\n        amountPaid\n        amountDue\n        amountDiscounted\n        discounts {\n          id\n          name\n          discountType\n          value\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query fees_payments($filter: FeeFilter) {\n    fees_fees(filter: $filter) {\n      debtors {\n        id\n        feeId\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        classGroup {\n          name\n        }\n        feeStatus\n        amount\n        amountPaid\n        amountDue\n        amountDiscounted\n        discounts {\n          id\n          name\n          discountType\n          value\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation fees_deleteDiscount($input: DeleteDiscountInput!) {\n    fees_deleteDiscount(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation fees_deleteDiscount($input: DeleteDiscountInput!) {\n    fees_deleteDiscount(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation fees_deleteFee($input: DeleteFeeInput!) {\n    fees_deleteFee(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation fees_deleteFee($input: DeleteFeeInput!) {\n    fees_deleteFee(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query fees_discounts($filter: DiscountFilter) {\n    fees_discounts(filter: $filter) {\n      id\n      name\n      description\n      discountType\n      value\n      siblingDiscount\n      active\n      createdBy {\n        firstName\n        lastName\n        avatarUrl\n      }\n    }\n  }\n"): (typeof documents)["\n  query fees_discounts($filter: DiscountFilter) {\n    fees_discounts(filter: $filter) {\n      id\n      name\n      description\n      discountType\n      value\n      siblingDiscount\n      active\n      createdBy {\n        firstName\n        lastName\n        avatarUrl\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query fees_categories($filter: CategoryFilter) {\n    fees_categories(filter: $filter) {\n      id\n      name\n      description\n      active\n      createdBy {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n      }\n    }\n  }\n"): (typeof documents)["\n  query fees_categories($filter: CategoryFilter) {\n    fees_categories(filter: $filter) {\n      id\n      name\n      description\n      active\n      createdBy {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query fees_fees($filter: FeeFilter) {\n    fees_fees(filter: $filter) {\n      id\n      name\n      dueDate\n      amount\n      feeType\n      absorbFees\n      published\n      publishedOn\n      assignedToParties {\n        ... on PartyPerson {\n          __typename\n          person {\n            partyId\n            firstName\n            lastName\n            avatarUrl\n          }\n        }\n        ... on SubjectGroup {\n          __typename\n          partyId\n          name\n          avatarUrl\n        }\n        ... on GeneralGroup {\n          __typename\n          partyId\n          name\n        }\n        ... on YearGroupEnrollment {\n          __typename\n          partyId\n          name\n        }\n        ... on ProgrammeStageEnrollment {\n          __typename\n          partyId\n          name\n        }\n      }\n      categories {\n        id\n        name\n      }\n      discounts {\n        id\n        name\n        discountType\n        value\n      }\n      individualDiscounts {\n        personPartyId\n        discount {\n          id\n          name\n          discountType\n          value\n        }\n      }\n      total\n      paid\n      due\n      feeStatus\n      createdBy {\n        firstName\n        lastName\n        avatarUrl\n      }\n    }\n  }\n"): (typeof documents)["\n  query fees_fees($filter: FeeFilter) {\n    fees_fees(filter: $filter) {\n      id\n      name\n      dueDate\n      amount\n      feeType\n      absorbFees\n      published\n      publishedOn\n      assignedToParties {\n        ... on PartyPerson {\n          __typename\n          person {\n            partyId\n            firstName\n            lastName\n            avatarUrl\n          }\n        }\n        ... on SubjectGroup {\n          __typename\n          partyId\n          name\n          avatarUrl\n        }\n        ... on GeneralGroup {\n          __typename\n          partyId\n          name\n        }\n        ... on YearGroupEnrollment {\n          __typename\n          partyId\n          name\n        }\n        ... on ProgrammeStageEnrollment {\n          __typename\n          partyId\n          name\n        }\n      }\n      categories {\n        id\n        name\n      }\n      discounts {\n        id\n        name\n        discountType\n        value\n      }\n      individualDiscounts {\n        personPartyId\n        discount {\n          id\n          name\n          discountType\n          value\n        }\n      }\n      total\n      paid\n      due\n      feeStatus\n      createdBy {\n        firstName\n        lastName\n        avatarUrl\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation fees_publish($input: PublishInput!) {\n    fees_publish(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation fees_publish($input: PublishInput!) {\n    fees_publish(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation fees_saveDiscount($input: SaveDiscountInput) {\n    fees_saveDiscount(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation fees_saveDiscount($input: SaveDiscountInput) {\n    fees_saveDiscount(input: $input) {\n      id\n    }\n  }\n"];
export function graphql(source: "\n  mutation fees_saveCategory($input: SaveCategoryInput) {\n    fees_saveCategory(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation fees_saveCategory($input: SaveCategoryInput) {\n    fees_saveCategory(input: $input) {\n      id\n    }\n  }\n"];
export function graphql(source: "\n  mutation fees_saveFee($input: SaveFeeInput) {\n    fees_saveFee(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation fees_saveFee($input: SaveFeeInput) {\n    fees_saveFee(input: $input) {\n      id\n    }\n  }\n"];
export function graphql(source: "\n  query fees_serviceCharges($filter: ChargesFilter) {\n    fees_serviceCharges(filter: $filter) {\n      amount\n      userServiceCharge\n      userVat\n    }\n  }\n"): (typeof documents)["\n  query fees_serviceCharges($filter: ChargesFilter) {\n    fees_serviceCharges(filter: $filter) {\n      amount\n      userServiceCharge\n      userVat\n    }\n  }\n"];
export function graphql(source: "\n  query fees_stripeAccount {\n    fees_stripeAccount {\n      signUpStarted\n      onboardingComplete\n      onboardingLink\n    }\n  }\n"): (typeof documents)["\n  query fees_stripeAccount {\n    fees_stripeAccount {\n      signUpStarted\n      onboardingComplete\n      onboardingLink\n    }\n  }\n"];
export function graphql(source: "\n  query fees_studentFees($filter: StudentFeeFilter) {\n    fees_studentFees(filter: $filter) {\n      id {\n        feeId\n        studentPartyId\n      }\n      person {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n      }\n      feeName\n      dueDate\n      amount\n      amountPaid\n      amountDue\n      feeType\n      feeStatus\n      discounts {\n        id\n        name\n        description\n        discountType\n        value\n        siblingDiscount\n      }\n    }\n  }\n"): (typeof documents)["\n  query fees_studentFees($filter: StudentFeeFilter) {\n    fees_studentFees(filter: $filter) {\n      id {\n        feeId\n        studentPartyId\n      }\n      person {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n      }\n      feeName\n      dueDate\n      amount\n      amountPaid\n      amountDue\n      feeType\n      feeStatus\n      discounts {\n        id\n        name\n        description\n        discountType\n        value\n        siblingDiscount\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query core_blocksList($filter: BlockFilter) {\n    core_blocks(filter: $filter) {\n      blockId\n      name\n      description\n      subjectGroupNamesJoined\n      subjectGroupIds\n      isRotation\n    }\n  }\n"): (typeof documents)["\n  query core_blocksList($filter: BlockFilter) {\n    core_blocks(filter: $filter) {\n      blockId\n      name\n      description\n      subjectGroupNamesJoined\n      subjectGroupIds\n      isRotation\n    }\n  }\n"];
export function graphql(source: "\n  query classGroupsList($filter: GeneralGroupFilter!) {\n    generalGroups(filter: $filter) {\n      partyId\n      name\n      avatarUrl\n      studentMembers {\n        memberCount\n      }\n      generalGroupType\n      programmeStages {\n        programme {\n          name\n        }\n      }\n      tutors {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        type\n      }\n      yearGroupLeads {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        type\n      }\n      yearGroups {\n        yearGroupId\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query classGroupsList($filter: GeneralGroupFilter!) {\n    generalGroups(filter: $filter) {\n      partyId\n      name\n      avatarUrl\n      studentMembers {\n        memberCount\n      }\n      generalGroupType\n      programmeStages {\n        programme {\n          name\n        }\n      }\n      tutors {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        type\n      }\n      yearGroupLeads {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        type\n      }\n      yearGroups {\n        yearGroupId\n        name\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query classGroupsById($filter: GeneralGroupFilter!) {\n    generalGroups(filter: $filter) {\n      partyId\n      name\n      students {\n        person {\n          partyId\n          title {\n            nameTextId\n            id\n            name\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n      relatedSubjectGroups {\n        name\n        partyId\n        avatarUrl\n        studentMembershipType {\n          type\n        }\n        subjects {\n          name\n          colour\n        }\n        programmeStages {\n          name\n        }\n        staff {\n          title {\n            id\n            nameTextId\n            name\n          }\n          type\n          firstName\n          lastName\n        }\n        irePP {\n          level\n        }\n        studentMembers {\n          memberCount\n        }\n      }\n      blocks {\n        blockId\n      }\n    }\n  }\n"): (typeof documents)["\n  query classGroupsById($filter: GeneralGroupFilter!) {\n    generalGroups(filter: $filter) {\n      partyId\n      name\n      students {\n        person {\n          partyId\n          title {\n            nameTextId\n            id\n            name\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n      relatedSubjectGroups {\n        name\n        partyId\n        avatarUrl\n        studentMembershipType {\n          type\n        }\n        subjects {\n          name\n          colour\n        }\n        programmeStages {\n          name\n        }\n        staff {\n          title {\n            id\n            nameTextId\n            name\n          }\n          type\n          firstName\n          lastName\n        }\n        irePP {\n          level\n        }\n        studentMembers {\n          memberCount\n        }\n      }\n      blocks {\n        blockId\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation core_updateClassGroups($input: [UpdateClassGroupGroupInput!]) {\n    core_updateClassGroups(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation core_updateClassGroups($input: [UpdateClassGroupGroupInput!]) {\n    core_updateClassGroups(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query core_customGroupDefinition($filter: Core_CustomGroupDefinitionFilter!) {\n    core_customGroupDefinition(filter: $filter) {\n      id\n      name\n      organisers {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n      }\n      staffStatic {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n      }\n      studentsStatic {\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        partyId\n        classGroup {\n          name\n        }\n        extensions {\n          priority\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query core_customGroupDefinition($filter: Core_CustomGroupDefinitionFilter!) {\n    core_customGroupDefinition(filter: $filter) {\n      id\n      name\n      organisers {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n      }\n      staffStatic {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n      }\n      studentsStatic {\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        partyId\n        classGroup {\n          name\n        }\n        extensions {\n          priority\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation saveCustomGroupDefinition(\n    $input: Core_UpsertCustomGroupDefinition!\n  ) {\n    core_upsertCustomGroupDefinition(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation saveCustomGroupDefinition(\n    $input: Core_UpsertCustomGroupDefinition!\n  ) {\n    core_upsertCustomGroupDefinition(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query customGroupsList($filter: GeneralGroupFilter!) {\n    generalGroups(filter: $filter) {\n      partyId\n      name\n      avatarUrl\n      studentMembers {\n        memberCount\n      }\n      staffMembers {\n        memberCount\n      }\n      contactMembers {\n        memberCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query customGroupsList($filter: GeneralGroupFilter!) {\n    generalGroups(filter: $filter) {\n      partyId\n      name\n      avatarUrl\n      studentMembers {\n        memberCount\n      }\n      staffMembers {\n        memberCount\n      }\n      contactMembers {\n        memberCount\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query customGroupById($filter: GeneralGroupFilter!) {\n    generalGroups(filter: $filter) {\n      partyId\n      name\n      avatarUrl\n      students {\n        partyId\n        classGroup {\n          name\n        }\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n        }\n        extensions {\n          priority\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query customGroupById($filter: GeneralGroupFilter!) {\n    generalGroups(filter: $filter) {\n      partyId\n      name\n      avatarUrl\n      students {\n        partyId\n        classGroup {\n          name\n        }\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n        }\n        extensions {\n          priority\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation core_deleteGroups($input: Core_DeleteGroupInput!) {\n    core_deleteGroups(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation core_deleteGroups($input: Core_DeleteGroupInput!) {\n    core_deleteGroups(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation core_modifyBlocks($input: Core_ModifyBlocks!) {\n    core_modifyBlocks(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation core_modifyBlocks($input: Core_ModifyBlocks!) {\n    core_modifyBlocks(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation core_modifyGroupMemberships($input: Core_ModifyMemberships!) {\n      core_modifyGroupMemberships(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation core_modifyGroupMemberships($input: Core_ModifyMemberships!) {\n      core_modifyGroupMemberships(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation coreModifySubjectGroupMembershipType(\n    $input: [Core_ModifySubjectGroupMembershipType]!\n  ) {\n    core_modifySubjectGroupMembershipType(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation coreModifySubjectGroupMembershipType(\n    $input: [Core_ModifySubjectGroupMembershipType]!\n  ) {\n    core_modifySubjectGroupMembershipType(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query printGroupMembers($filter: Print_GroupMembers!) {\n    print_groupMembers(filter: $filter) {\n      url\n      html\n    }\n  }\n"): (typeof documents)["\n  query printGroupMembers($filter: Print_GroupMembers!) {\n    print_groupMembers(filter: $filter) {\n      url\n      html\n    }\n  }\n"];
export function graphql(source: "\n  query studentsSearchQuery($filter: SearchFilter) {\n    search_search(filter: $filter) {\n      partyId\n      type\n      text\n      avatarUrl\n    }\n  }\n"): (typeof documents)["\n  query studentsSearchQuery($filter: SearchFilter) {\n    search_search(filter: $filter) {\n      partyId\n      type\n      text\n      avatarUrl\n    }\n  }\n"];
export function graphql(source: "\n  query calendar_calendarEventsIterator($filter: CalendarEventIteratorFilter!) {\n    calendar_calendarEventsIterator_v2(filter: $filter) {\n      event {\n        eventId\n        name\n        colour\n        calendarIds\n        startTime\n        endTime\n        type\n        attendees {\n          partyId\n          type\n          partyInfo {\n            partyId\n            ... on Staff {\n              person {\n                firstName\n                lastName\n                avatarUrl\n              }\n            }\n          }\n        }\n        rooms {\n          name\n        }\n        extensions {\n          eventAttendance {\n            eventId\n            note\n            attendanceCodeId\n            attendanceCode {\n              name\n              codeType\n            }\n            personPartyId\n            adminSubmitted\n            createdBy {\n              firstName\n              lastName\n              type\n            }\n            updatedAt\n            updatedBy {\n              firstName\n              lastName\n              type\n            }\n          }\n          previousEventAttendance {\n            attendanceCode {\n              codeType\n            }\n            personPartyId\n          }\n        }\n      }\n      eventsOnSameDayForSameGroup {\n        eventId\n        name\n        colour\n        type\n        startTime\n        endTime\n        rooms {\n          name\n        }\n        tags {\n          label\n          context\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query calendar_calendarEventsIterator($filter: CalendarEventIteratorFilter!) {\n    calendar_calendarEventsIterator_v2(filter: $filter) {\n      event {\n        eventId\n        name\n        colour\n        calendarIds\n        startTime\n        endTime\n        type\n        attendees {\n          partyId\n          type\n          partyInfo {\n            partyId\n            ... on Staff {\n              person {\n                firstName\n                lastName\n                avatarUrl\n              }\n            }\n          }\n        }\n        rooms {\n          name\n        }\n        extensions {\n          eventAttendance {\n            eventId\n            note\n            attendanceCodeId\n            attendanceCode {\n              name\n              codeType\n            }\n            personPartyId\n            adminSubmitted\n            createdBy {\n              firstName\n              lastName\n              type\n            }\n            updatedAt\n            updatedBy {\n              firstName\n              lastName\n              type\n            }\n          }\n          previousEventAttendance {\n            attendanceCode {\n              codeType\n            }\n            personPartyId\n          }\n        }\n      }\n      eventsOnSameDayForSameGroup {\n        eventId\n        name\n        colour\n        type\n        startTime\n        endTime\n        rooms {\n          name\n        }\n        tags {\n          label\n          context\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query subjectGroups($filter: SubjectGroupFilter!) {\n    subjectGroups(filter: $filter) {\n      partyId\n      name\n      avatarUrl\n      subjects {\n        id\n        name\n        colour\n        nationalCode\n      }\n      studentMembers {\n        memberCount\n      }\n      staff {\n        firstName\n        lastName\n        avatarUrl\n      }\n      irePP {\n        level\n        examinable\n      }\n      programmeStages {\n        programme {\n          name\n        }\n      }\n      yearGroups {\n        name\n      }\n      studentMembershipType {\n        type\n      }\n    }\n  }\n"): (typeof documents)["\n  query subjectGroups($filter: SubjectGroupFilter!) {\n    subjectGroups(filter: $filter) {\n      partyId\n      name\n      avatarUrl\n      subjects {\n        id\n        name\n        colour\n        nationalCode\n      }\n      studentMembers {\n        memberCount\n      }\n      staff {\n        firstName\n        lastName\n        avatarUrl\n      }\n      irePP {\n        level\n        examinable\n      }\n      programmeStages {\n        programme {\n          name\n        }\n      }\n      yearGroups {\n        name\n      }\n      studentMembershipType {\n        type\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query subjectGroupById($filter: SubjectGroupFilter!) {\n    subjectGroups(filter: $filter) {\n      partyId\n      name\n      avatarUrl\n      yearGroups {\n        name\n      }\n      subjects {\n        name\n        colour\n      }\n      studentMembershipType {\n        type\n      }\n      staff {\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        type\n      }\n      students {\n        partyId\n        classGroup {\n          name\n        }\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query subjectGroupById($filter: SubjectGroupFilter!) {\n    subjectGroups(filter: $filter) {\n      partyId\n      name\n      avatarUrl\n      yearGroups {\n        name\n      }\n      subjects {\n        name\n        colour\n      }\n      studentMembershipType {\n        type\n      }\n      staff {\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        type\n      }\n      students {\n        partyId\n        classGroup {\n          name\n        }\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation core_updateSubjectGroups($input: [UpdateSubjectGroupInput!]) {\n    core_updateSubjectGroups(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation core_updateSubjectGroups($input: [UpdateSubjectGroupInput!]) {\n    core_updateSubjectGroups(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation core_switchSubjectGroupType($input: Core_SwitchSubjectGroupType!) {\n    core_switchSubjectGroupType(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation core_switchSubjectGroupType($input: Core_SwitchSubjectGroupType!) {\n    core_switchSubjectGroupType(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query supportGroups($filter: SubjectGroupFilter!) {\n    subjectGroups(filter: $filter) {\n      partyId\n      name\n      avatarUrl\n      subjects {\n        name\n        colour\n      }\n      studentMembers {\n        memberCount\n      }\n      staff {\n        firstName\n        lastName\n        avatarUrl\n      }\n      irePP {\n        level\n      }\n      programmeStages {\n        programme {\n          name\n        }\n      }\n      yearGroups {\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query supportGroups($filter: SubjectGroupFilter!) {\n    subjectGroups(filter: $filter) {\n      partyId\n      name\n      avatarUrl\n      subjects {\n        name\n        colour\n      }\n      studentMembers {\n        memberCount\n      }\n      staff {\n        firstName\n        lastName\n        avatarUrl\n      }\n      irePP {\n        level\n      }\n      programmeStages {\n        programme {\n          name\n        }\n      }\n      yearGroups {\n        name\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query supportGroupById($filter: SubjectGroupFilter!) {\n    subjectGroups(filter: $filter) {\n      partyId\n      name\n      avatarUrl\n      yearGroups {\n        name\n      }\n      subjects {\n        name\n        colour\n      }\n      staff {\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        type\n      }\n      students {\n        partyId\n        classGroup {\n          name\n        }\n        person {\n          firstName\n          lastName\n          avatarUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query supportGroupById($filter: SubjectGroupFilter!) {\n    subjectGroups(filter: $filter) {\n      partyId\n      name\n      avatarUrl\n      yearGroups {\n        name\n      }\n      subjects {\n        name\n        colour\n      }\n      staff {\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        type\n      }\n      students {\n        partyId\n        classGroup {\n          name\n        }\n        person {\n          firstName\n          lastName\n          avatarUrl\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query yearGroupsList($filter: YearGroupEnrollmentFilter) {\n    core_yearGroupEnrollments(filter: $filter) {\n      yearGroupEnrollmentPartyId\n      name\n      nationalCode\n      yearGroupId\n      shortName\n      description\n      yearGroupLeads {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      studentMembers {\n        memberCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query yearGroupsList($filter: YearGroupEnrollmentFilter) {\n    core_yearGroupEnrollments(filter: $filter) {\n      yearGroupEnrollmentPartyId\n      name\n      nationalCode\n      yearGroupId\n      shortName\n      description\n      yearGroupLeads {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      studentMembers {\n        memberCount\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query yearGroupById($filter: YearGroupEnrollmentFilter) {\n    core_yearGroupEnrollments(filter: $filter) {\n      yearGroupEnrollmentPartyId\n      name\n      students {\n        partyId\n        person {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        classGroup {\n          name\n        }\n        tutors {\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query yearGroupById($filter: YearGroupEnrollmentFilter) {\n    core_yearGroupEnrollments(filter: $filter) {\n      yearGroupEnrollmentPartyId\n      name\n      students {\n        partyId\n        person {\n          partyId\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        classGroup {\n          name\n        }\n        tutors {\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation core_updateYearGroupEnrollments(\n    $input: [UpdateYearGroupEnrollmentInput!]\n  ) {\n    core_updateYearGroupEnrollments(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation core_updateYearGroupEnrollments(\n    $input: [UpdateYearGroupEnrollmentInput!]\n  ) {\n    core_updateYearGroupEnrollments(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query communications_label($filter: LabelFilter) {\n    communications_label(filter: $filter) {\n      id\n      name\n      personPartyId\n      colour\n      custom\n      type\n    }\n  }\n"): (typeof documents)["\n  query communications_label($filter: LabelFilter) {\n    communications_label(filter: $filter) {\n      id\n      name\n      personPartyId\n      colour\n      custom\n      type\n    }\n  }\n"];
export function graphql(source: "\n  mutation update_communications_label($input: LabelInput) {\n    communications_saveLabel(input: $input) {\n      id\n      name\n      personPartyId\n      colour\n      custom\n    }\n  }\n"): (typeof documents)["\n  mutation update_communications_label($input: LabelInput) {\n    communications_saveLabel(input: $input) {\n      id\n      name\n      personPartyId\n      colour\n      custom\n    }\n  }\n"];
export function graphql(source: "\n  query communications_unreadCount($filter: UnreadCountFilter) {\n    communications_unreadCount(filter: $filter) {\n      labelId\n      labelType\n      count\n    }\n  }\n"): (typeof documents)["\n  query communications_unreadCount($filter: UnreadCountFilter) {\n    communications_unreadCount(filter: $filter) {\n      labelId\n      labelType\n      count\n    }\n  }\n"];
export function graphql(source: "\n  mutation communications_assignLabel($input: AssignLabelInput) {\n    communications_assignLabel(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation communications_assignLabel($input: AssignLabelInput) {\n    communications_assignLabel(input: $input) {\n      id\n    }\n  }\n"];
export function graphql(source: "\n  query communications_recipients($filter: RecipientFilter) {\n    communications_recipients(filter: $filter) {\n      partyId\n      type\n      text\n      avatarUrl\n    }\n  }\n"): (typeof documents)["\n  query communications_recipients($filter: RecipientFilter) {\n    communications_recipients(filter: $filter) {\n      partyId\n      type\n      text\n      avatarUrl\n    }\n  }\n"];
export function graphql(source: "\n  query mailSearchQuery($filter: SearchFilter) {\n    search_search(filter: $filter) {\n      partyId\n      type\n      text\n      avatarUrl\n    }\n  }\n"): (typeof documents)["\n  query mailSearchQuery($filter: SearchFilter) {\n    search_search(filter: $filter) {\n      partyId\n      type\n      text\n      avatarUrl\n    }\n  }\n"];
export function graphql(source: "\n  query communications_mail($filter: MailFilter) {\n    communications_mail(filter: $filter) {\n      id\n      rootMailId\n      threadId\n      subject\n      body\n      senderPartyId\n      sender {\n        partyId\n        title {\n          id\n          nameTextId\n          name\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      sentOn\n      latestMessage\n      canReply\n      starred\n      readOn\n      recipients {\n        id\n        recipientPartyId\n        recipientType\n        recipient {\n          partyId\n          title {\n            id\n            nameTextId\n            name\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n      }\n      labels {\n        id\n        name\n        personPartyId\n        colour\n        custom\n      }\n      threads {\n        id\n        rootMailId\n        threadId\n        subject\n        body\n        senderPartyId\n        sentOn\n        latestMessage\n        canReply\n        starred\n        readOn\n        sender {\n          partyId\n          title {\n            id\n            nameTextId\n            name\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        recipients {\n          id\n          recipientPartyId\n          recipientType\n          recipient {\n            partyId\n            title {\n              id\n              nameTextId\n              name\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        labels {\n          id\n          name\n          personPartyId\n          colour\n          custom\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query communications_mail($filter: MailFilter) {\n    communications_mail(filter: $filter) {\n      id\n      rootMailId\n      threadId\n      subject\n      body\n      senderPartyId\n      sender {\n        partyId\n        title {\n          id\n          nameTextId\n          name\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      sentOn\n      latestMessage\n      canReply\n      starred\n      readOn\n      recipients {\n        id\n        recipientPartyId\n        recipientType\n        recipient {\n          partyId\n          title {\n            id\n            nameTextId\n            name\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n      }\n      labels {\n        id\n        name\n        personPartyId\n        colour\n        custom\n      }\n      threads {\n        id\n        rootMailId\n        threadId\n        subject\n        body\n        senderPartyId\n        sentOn\n        latestMessage\n        canReply\n        starred\n        readOn\n        sender {\n          partyId\n          title {\n            id\n            nameTextId\n            name\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        recipients {\n          id\n          recipientPartyId\n          recipientType\n          recipient {\n            partyId\n            title {\n              id\n              nameTextId\n              name\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        labels {\n          id\n          name\n          personPartyId\n          colour\n          custom\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation communications_sendMail($input: SendMailInput) {\n    communications_sendMail(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation communications_sendMail($input: SendMailInput) {\n    communications_sendMail(input: $input) {\n      id\n    }\n  }\n"];
export function graphql(source: "\n  mutation communications_starred($input: MailStarredInput) {\n    communications_starred(input: $input)\n  }\n"): (typeof documents)["\n  mutation communications_starred($input: MailStarredInput) {\n    communications_starred(input: $input)\n  }\n"];
export function graphql(source: "\n  mutation communications_read($input: MailReadInput) {\n    communications_read(input: $input)\n  }\n"): (typeof documents)["\n  mutation communications_read($input: MailReadInput) {\n    communications_read(input: $input)\n  }\n"];
export function graphql(source: "\n  query notes_behaviourCategories($filter: Notes_BehaviourCategoryFilter) {\n    notes_behaviourCategories(filter: $filter) {\n      behaviourCategoryId\n      name\n      description\n      colour\n      behaviourType\n    }\n  }\n"): (typeof documents)["\n  query notes_behaviourCategories($filter: Notes_BehaviourCategoryFilter) {\n    notes_behaviourCategories(filter: $filter) {\n      behaviourCategoryId\n      name\n      description\n      colour\n      behaviourType\n    }\n  }\n"];
export function graphql(source: "\n  query notes_behaviourLevels($filter: Notes_BehaviourCategoryFilter) {\n    notes_behaviourCategories(filter: $filter) {\n      behaviourType\n      behaviourCategoryId\n      name\n      description\n      colour\n      tags {\n        id\n        category\n        name\n        nameTextId\n        description\n        descriptionTextId\n        tag_l1\n        tag_l2\n        tag_l3\n        behaviourType\n      }\n    }\n  }\n"): (typeof documents)["\n  query notes_behaviourLevels($filter: Notes_BehaviourCategoryFilter) {\n    notes_behaviourCategories(filter: $filter) {\n      behaviourType\n      behaviourCategoryId\n      name\n      description\n      colour\n      tags {\n        id\n        category\n        name\n        nameTextId\n        description\n        descriptionTextId\n        tag_l1\n        tag_l2\n        tag_l3\n        behaviourType\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query notes_tags_behaviours($filter: Notes_TagFilter!) {\n    notes_tags(filter: $filter) {\n      id\n      name\n      description\n      behaviourType\n      tag_l2\n      category\n      behaviourCategory {\n        behaviourCategoryId\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query notes_tags_behaviours($filter: Notes_TagFilter!) {\n    notes_tags(filter: $filter) {\n      id\n      name\n      description\n      behaviourType\n      tag_l2\n      category\n      behaviourCategory {\n        behaviourCategoryId\n        name\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation notes_deleteBehaviour($input: Notes_DeleteNotes!) {\n    notes_deleteNote(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation notes_deleteBehaviour($input: Notes_DeleteNotes!) {\n    notes_deleteNote(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query notes_notes_behaviour($filter: Notes_NotesFilter!) {\n    notes_notes(filter: $filter) {\n      id\n      note\n      createdOn\n      createdBy\n      incidentDate\n      createdByPerson {\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n      }\n      tags {\n        id\n        name\n        category\n        behaviourType\n        descriptionTextId\n        nameTextId\n      }\n      associatedGroups {\n        __typename\n        partyId\n        ... on SubjectGroup {\n          subjects {\n            name\n            colour\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query notes_notes_behaviour($filter: Notes_NotesFilter!) {\n    notes_notes(filter: $filter) {\n      id\n      note\n      createdOn\n      createdBy\n      incidentDate\n      createdByPerson {\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n      }\n      tags {\n        id\n        name\n        category\n        behaviourType\n        descriptionTextId\n        nameTextId\n      }\n      associatedGroups {\n        __typename\n        partyId\n        ... on SubjectGroup {\n          subjects {\n            name\n            colour\n          }\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query notes_behaviour($filter: Notes_BehaviourFilter) {\n    notes_behaviour(filter: $filter) {\n      behaviours {\n        noteId\n        incidentDate\n        referencedParties {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        associatedParties {\n          __typename\n          partyId\n          ... on SubjectGroup {\n            name\n            subjects {\n              name\n              colour\n            }\n          }\n          ... on Student {\n            person {\n              partyId\n              firstName\n              lastName\n              avatarUrl\n              type\n            }\n          }\n        }\n        associatedPartyIds\n        category\n        details\n        takenByPartyId\n        takenBy {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        tags {\n          id\n          name\n          description\n          behaviourType\n        }\n        tagIds\n      }\n    }\n  }\n"): (typeof documents)["\n  query notes_behaviour($filter: Notes_BehaviourFilter) {\n    notes_behaviour(filter: $filter) {\n      behaviours {\n        noteId\n        incidentDate\n        referencedParties {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        associatedParties {\n          __typename\n          partyId\n          ... on SubjectGroup {\n            name\n            subjects {\n              name\n              colour\n            }\n          }\n          ... on Student {\n            person {\n              partyId\n              firstName\n              lastName\n              avatarUrl\n              type\n            }\n          }\n        }\n        associatedPartyIds\n        category\n        details\n        takenByPartyId\n        takenBy {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        tags {\n          id\n          name\n          description\n          behaviourType\n        }\n        tagIds\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query notes_categories($filter: Notes_BehaviourFilter) {\n    notes_behaviour(filter: $filter) {\n      categories {\n        behaviourCategoryId\n        name\n        colour\n        count\n      }\n    }\n  }\n"): (typeof documents)["\n  query notes_categories($filter: Notes_BehaviourFilter) {\n    notes_behaviour(filter: $filter) {\n      categories {\n        behaviourCategoryId\n        name\n        colour\n        count\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation notes_upsertBehaviourCategory($input: Notes_BehaviourCategoryInput) {\n    notes_upsertBehaviourCategory(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation notes_upsertBehaviourCategory($input: Notes_BehaviourCategoryInput) {\n    notes_upsertBehaviourCategory(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation notes_upsertBehaviourTags($input: [Notes_UpsertBehaviourTagInput]) {\n    notes_upsertBehaviourTags(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation notes_upsertBehaviourTags($input: [Notes_UpsertBehaviourTagInput]) {\n    notes_upsertBehaviourTags(input: $input) {\n      id\n    }\n  }\n"];
export function graphql(source: "\n  mutation notes_upsertNotes($input: [Notes_UpsertNote]) {\n    notes_upsertNotes(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation notes_upsertNotes($input: [Notes_UpsertNote]) {\n    notes_upsertNotes(input: $input) {\n      id\n    }\n  }\n"];
export function graphql(source: "\n  query core_people($filter: Core_PeopleFilter!) {\n    core_people(filter: $filter) {\n      partyId\n      title {\n        id\n        name\n        nameTextId\n      }\n      firstName\n      lastName\n      avatarUrl\n      type\n    }\n  }\n"): (typeof documents)["\n  query core_people($filter: Core_PeopleFilter!) {\n    core_people(filter: $filter) {\n      partyId\n      title {\n        id\n        name\n        nameTextId\n      }\n      firstName\n      lastName\n      avatarUrl\n      type\n    }\n  }\n"];
export function graphql(source: "\n  query catalogue_personalTitles {\n    catalogue_personalTitles {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query catalogue_personalTitles {\n    catalogue_personalTitles {\n      id\n      name\n    }\n  }\n"];
export function graphql(source: "\n  query printPersonsGroupMemberships($filter: Print_PersonsGroupMemberships!) {\n    print_personsGroupMemberships(filter: $filter) {\n      url\n      html\n    }\n  }\n"): (typeof documents)["\n  query printPersonsGroupMemberships($filter: Print_PersonsGroupMemberships!) {\n    print_personsGroupMemberships(filter: $filter) {\n      url\n      html\n    }\n  }\n"];
export function graphql(source: "\n  mutation core_archiveStudentContacts($input: ArchiveStudentContactInput!) {\n    core_archiveStudentContacts(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation core_archiveStudentContacts($input: ArchiveStudentContactInput!) {\n    core_archiveStudentContacts(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query core_studentContacts {\n    core_studentContacts {\n      partyId\n      person {\n        avatarUrl\n        firstName\n        lastName\n      }\n      personalInformation {\n        primaryAddress {\n          line1\n          line2\n          line3\n          city\n          country\n          postCode\n        }\n        primaryPhoneNumber {\n          number\n        }\n        primaryEmail {\n          email\n        }\n      }\n      relationships {\n        student {\n          person {\n            avatarUrl\n            firstName\n            lastName\n          }\n        }\n        allowedToContact\n        includeInSms\n      }\n    }\n  }\n"): (typeof documents)["\n  query core_studentContacts {\n    core_studentContacts {\n      partyId\n      person {\n        avatarUrl\n        firstName\n        lastName\n      }\n      personalInformation {\n        primaryAddress {\n          line1\n          line2\n          line3\n          city\n          country\n          postCode\n        }\n        primaryPhoneNumber {\n          number\n        }\n        primaryEmail {\n          email\n        }\n      }\n      relationships {\n        student {\n          person {\n            avatarUrl\n            firstName\n            lastName\n          }\n        }\n        allowedToContact\n        includeInSms\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query core_studentContactsForSelect {\n    core_studentContacts {\n      person {\n        partyId\n        title {\n          nameTextId\n          id\n          name\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n    }\n  }\n"): (typeof documents)["\n  query core_studentContactsForSelect {\n    core_studentContacts {\n      person {\n        partyId\n        title {\n          nameTextId\n          id\n          name\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query core_studentContacts_personal($filter: StudentContactFilter!) {\n    core_studentContacts(filter: $filter) {\n      partyId\n      person {\n        title {\n          id\n          name\n          nameTextId\n        }\n        avatarUrl\n        firstName\n        lastName\n      }\n      personalInformation {\n        firstName\n        lastName\n        preferredFirstName\n        middleName\n        gender\n        dateOfBirth\n        ire {\n          ppsNumber\n          religion\n          countryOfBirth\n        }\n        nationality\n        mothersMaidenName\n        primaryAddress {\n          id\n          line1\n          line2\n          line3\n          city\n          country\n          postCode\n        }\n        primaryPhoneNumber {\n          phoneNumberId\n          number\n          areaCode\n          countryCode\n        }\n        phoneNumbers {\n          phoneNumberId\n          primaryPhoneNumber\n          number\n          areaCode\n          countryCode\n        }\n        primaryEmail {\n          emailId\n          email\n        }\n      }\n      occupation\n      requiresInterpreter\n      spokenLanguages\n      relationships {\n        relationshipType\n        studentPartyId\n        priority\n        allowedToContact\n        includeInSms\n        includeInTmail\n        pickupRights\n        legalGuardian\n        allowAccessToStudentData\n      }\n    }\n  }\n"): (typeof documents)["\n  query core_studentContacts_personal($filter: StudentContactFilter!) {\n    core_studentContacts(filter: $filter) {\n      partyId\n      person {\n        title {\n          id\n          name\n          nameTextId\n        }\n        avatarUrl\n        firstName\n        lastName\n      }\n      personalInformation {\n        firstName\n        lastName\n        preferredFirstName\n        middleName\n        gender\n        dateOfBirth\n        ire {\n          ppsNumber\n          religion\n          countryOfBirth\n        }\n        nationality\n        mothersMaidenName\n        primaryAddress {\n          id\n          line1\n          line2\n          line3\n          city\n          country\n          postCode\n        }\n        primaryPhoneNumber {\n          phoneNumberId\n          number\n          areaCode\n          countryCode\n        }\n        phoneNumbers {\n          phoneNumberId\n          primaryPhoneNumber\n          number\n          areaCode\n          countryCode\n        }\n        primaryEmail {\n          emailId\n          email\n        }\n      }\n      occupation\n      requiresInterpreter\n      spokenLanguages\n      relationships {\n        relationshipType\n        studentPartyId\n        priority\n        allowedToContact\n        includeInSms\n        includeInTmail\n        pickupRights\n        legalGuardian\n        allowAccessToStudentData\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query core_studentContacts_students($filter: StudentContactFilter!) {\n    core_studentContacts(filter: $filter) {\n      partyId\n      relationships {\n        studentPartyId\n        relationshipType\n        priority\n        allowedToContact\n        includeInSms\n        includeInTmail\n        pickupRights\n        legalGuardian\n        allowAccessToStudentData\n        ... on StudentContactRelationshipInfo {\n          student {\n            partyId\n            classGroup {\n              name\n            }\n            ... on Student {\n              person {\n                partyId\n                firstName\n                lastName\n                avatarUrl\n                type\n              }\n              extensions {\n                priority\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query core_studentContacts_students($filter: StudentContactFilter!) {\n    core_studentContacts(filter: $filter) {\n      partyId\n      relationships {\n        studentPartyId\n        relationshipType\n        priority\n        allowedToContact\n        includeInSms\n        includeInTmail\n        pickupRights\n        legalGuardian\n        allowAccessToStudentData\n        ... on StudentContactRelationshipInfo {\n          student {\n            partyId\n            classGroup {\n              name\n            }\n            ... on Student {\n              person {\n                partyId\n                firstName\n                lastName\n                avatarUrl\n                type\n              }\n              extensions {\n                priority\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation core_upsertStudentContact($input: UpsertStudentContactInput!) {\n    core_upsertStudentContact(input: $input) {\n      partyId\n    }\n  }\n"): (typeof documents)["\n  mutation core_upsertStudentContact($input: UpsertStudentContactInput!) {\n    core_upsertStudentContact(input: $input) {\n      partyId\n    }\n  }\n"];
export function graphql(source: "\n  mutation notes_deleteNote($input: Notes_DeleteNotes!) {\n    notes_deleteNote(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation notes_deleteNote($input: Notes_DeleteNotes!) {\n    notes_deleteNote(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query notes_notes($filter: Notes_NotesFilter!) {\n    notes_notes(filter: $filter) {\n      id\n      note\n      createdOn\n      createdBy\n      createdByPerson {\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n      }\n      tags {\n        id\n        name\n        category\n        descriptionTextId\n        nameTextId\n      }\n      priorityNote\n      priorityStartDate\n      priorityEndDate\n    }\n  }\n"): (typeof documents)["\n  query notes_notes($filter: Notes_NotesFilter!) {\n    notes_notes(filter: $filter) {\n      id\n      note\n      createdOn\n      createdBy\n      createdByPerson {\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n      }\n      tags {\n        id\n        name\n        category\n        descriptionTextId\n        nameTextId\n      }\n      priorityNote\n      priorityStartDate\n      priorityEndDate\n    }\n  }\n"];
export function graphql(source: "\n  query notes_tags($filter: Notes_TagFilter!) {\n    notes_tags(filter: $filter) {\n      id\n      name\n      description\n      category\n      tag_l1\n    }\n  }\n"): (typeof documents)["\n  query notes_tags($filter: Notes_TagFilter!) {\n    notes_tags(filter: $filter) {\n      id\n      name\n      description\n      category\n      tag_l1\n    }\n  }\n"];
export function graphql(source: "\n  mutation notes_upsertNotesTags($input: [Notes_UpsertNotesTagInput]) {\n    notes_upsertNotesTags(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation notes_upsertNotesTags($input: [Notes_UpsertNotesTagInput]) {\n    notes_upsertNotesTags(input: $input) {\n      id\n    }\n  }\n"];
export function graphql(source: "\n  query personStatus($filter: PersonStatusFilter) {\n      composite_personStatus(filter: $filter) {\n          partyId\n          sessionAttendance {\n              name\n              status\n          }\n          currentLocation {\n              partyId\n              eventId\n              room {\n                  roomId\n                  name\n                  capacity\n              }\n              lesson\n              teacher\n              currentAttendance {\n                  attendanceCodeName\n                  codeType\n              }\n          }\n          priorityStudent\n          activeSupportPlan\n      }\n  }\n"): (typeof documents)["\n  query personStatus($filter: PersonStatusFilter) {\n      composite_personStatus(filter: $filter) {\n          partyId\n          sessionAttendance {\n              name\n              status\n          }\n          currentLocation {\n              partyId\n              eventId\n              room {\n                  roomId\n                  name\n                  capacity\n              }\n              lesson\n              teacher\n              currentAttendance {\n                  attendanceCodeName\n                  codeType\n              }\n          }\n          priorityStudent\n          activeSupportPlan\n      }\n  }\n"];
export function graphql(source: "\n  mutation eire_deleteNonClassContactHours(\n    $input: DeleteNonClassContactHoursInput!\n  ) {\n    eire_deleteNonClassContactHours(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation eire_deleteNonClassContactHours(\n    $input: DeleteNonClassContactHoursInput!\n  ) {\n    eire_deleteNonClassContactHours(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query catalogue_staffCapacities {\n    catalogue_staffCapacities {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query catalogue_staffCapacities {\n    catalogue_staffCapacities {\n      id\n      name\n    }\n  }\n"];
export function graphql(source: "\n  query core_staff($filter: StaffFilter) {\n    core_staff(filter: $filter) {\n      partyId\n      person {\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n      }\n      employmentCapacity {\n        name\n      }\n      startDate\n      endDate\n      personalInformation {\n        gender\n        primaryPhoneNumber {\n          number\n        }\n        primaryEmail {\n          email\n        }\n        ire {\n          ppsNumber\n        }\n      }\n      staffIre {\n        teacherCouncilNumber\n        staffPost {\n          id\n          name\n        }\n      }\n      carRegistrationNumber\n      parking\n      position\n    }\n  }\n"): (typeof documents)["\n  query core_staff($filter: StaffFilter) {\n    core_staff(filter: $filter) {\n      partyId\n      person {\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n      }\n      employmentCapacity {\n        name\n      }\n      startDate\n      endDate\n      personalInformation {\n        gender\n        primaryPhoneNumber {\n          number\n        }\n        primaryEmail {\n          email\n        }\n        ire {\n          ppsNumber\n        }\n      }\n      staffIre {\n        teacherCouncilNumber\n        staffPost {\n          id\n          name\n        }\n      }\n      carRegistrationNumber\n      parking\n      position\n    }\n  }\n"];
export function graphql(source: "\n  query core_staffInfoForSelect($filter: StaffFilter) {\n    core_staff(filter: $filter) {\n      person {\n        partyId\n        title {\n          nameTextId\n          id\n          name\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n    }\n  }\n"): (typeof documents)["\n  query core_staffInfoForSelect($filter: StaffFilter) {\n    core_staff(filter: $filter) {\n      person {\n        partyId\n        title {\n          nameTextId\n          id\n          name\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query eire_nonClassContactHours($filter: NonClassContactHoursFilter) {\n    eire_nonClassContactHours(filter: $filter) {\n      academicNameSpaceId\n      activity\n      dayOfTheWeek\n      description\n      hours\n      minutes\n      nonClassContactHoursId\n      programme\n      staffPartyId\n    }\n  }\n"): (typeof documents)["\n  query eire_nonClassContactHours($filter: NonClassContactHoursFilter) {\n    eire_nonClassContactHours(filter: $filter) {\n      academicNameSpaceId\n      activity\n      dayOfTheWeek\n      description\n      hours\n      minutes\n      nonClassContactHoursId\n      programme\n      staffPartyId\n    }\n  }\n"];
export function graphql(source: "\n  query core_staff_personal($filter: StaffFilter) {\n    core_staff(filter: $filter) {\n      partyId\n      person {\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n      }\n      startDate\n      endDate\n      noLongerStaffMember\n      personalInformation {\n        gender\n        dateOfBirth\n        ire {\n          ppsNumber\n        }\n        primaryAddress {\n          id\n          line1\n          line2\n          line3\n          city\n          country\n          postCode\n        }\n        primaryPhoneNumber {\n          phoneNumberId\n          number\n          areaCode\n          countryCode\n        }\n        phoneNumbers {\n          phoneNumberId\n          primaryPhoneNumber\n          number\n          areaCode\n          countryCode\n        }\n        primaryEmail {\n          emailId\n          email\n        }\n        emails {\n          emailId\n          email\n          primaryEmail\n        }\n        nextOfKin {\n          firstName\n          lastName\n          phoneNumbers\n        }\n      }\n      staffIre {\n        teacherCouncilNumber\n        staffPost {\n          id\n          name\n        }\n      }\n      payrollNumber\n      employmentCapacity {\n        id\n        name\n      }\n      emergencyContact {\n        firstName\n        lastName\n        primaryNumber\n        additionalNumber\n      }\n      displayCode\n      carRegistrationNumber\n      makeAndModel\n      parking\n      jobSharing\n      qualifications\n      competencies\n      availableForTeaching\n      availableForSubstitution\n      availableForSupportClasses\n      position\n      competencySubjects {\n        id\n        name\n        colour\n      }\n    }\n  }\n"): (typeof documents)["\n  query core_staff_personal($filter: StaffFilter) {\n    core_staff(filter: $filter) {\n      partyId\n      person {\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n      }\n      startDate\n      endDate\n      noLongerStaffMember\n      personalInformation {\n        gender\n        dateOfBirth\n        ire {\n          ppsNumber\n        }\n        primaryAddress {\n          id\n          line1\n          line2\n          line3\n          city\n          country\n          postCode\n        }\n        primaryPhoneNumber {\n          phoneNumberId\n          number\n          areaCode\n          countryCode\n        }\n        phoneNumbers {\n          phoneNumberId\n          primaryPhoneNumber\n          number\n          areaCode\n          countryCode\n        }\n        primaryEmail {\n          emailId\n          email\n        }\n        emails {\n          emailId\n          email\n          primaryEmail\n        }\n        nextOfKin {\n          firstName\n          lastName\n          phoneNumbers\n        }\n      }\n      staffIre {\n        teacherCouncilNumber\n        staffPost {\n          id\n          name\n        }\n      }\n      payrollNumber\n      employmentCapacity {\n        id\n        name\n      }\n      emergencyContact {\n        firstName\n        lastName\n        primaryNumber\n        additionalNumber\n      }\n      displayCode\n      carRegistrationNumber\n      makeAndModel\n      parking\n      jobSharing\n      qualifications\n      competencies\n      availableForTeaching\n      availableForSubstitution\n      availableForSupportClasses\n      position\n      competencySubjects {\n        id\n        name\n        colour\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query catalogue_staffPosts {\n    catalogue_staffPosts {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query catalogue_staffPosts {\n    catalogue_staffPosts {\n      id\n      name\n    }\n  }\n"];
export function graphql(source: "\n  query core_staff_subjectGroups(\n    $filter: StaffFilter\n    $filter2: SubjectGroupRelationshipFilter\n  ) {\n    core_staff(filter: $filter) {\n      subjectGroups(filter: $filter2) {\n        partyId\n        name\n        avatarUrl\n        subjects {\n          name\n          colour\n        }\n        irePP {\n          level\n        }\n        studentMembers {\n          memberCount\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query core_staff_subjectGroups(\n    $filter: StaffFilter\n    $filter2: SubjectGroupRelationshipFilter\n  ) {\n    core_staff(filter: $filter) {\n      subjectGroups(filter: $filter2) {\n        partyId\n        name\n        avatarUrl\n        subjects {\n          name\n          colour\n        }\n        irePP {\n          level\n        }\n        studentMembers {\n          memberCount\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation eire_upsertNonClassContactHours(\n    $input: SaveNonClassContactHoursInput\n  ) {\n    eire_upsertNonClassContactHours(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation eire_upsertNonClassContactHours(\n    $input: SaveNonClassContactHoursInput\n  ) {\n    eire_upsertNonClassContactHours(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation core_upsertStaff($input: [UpsertStaffInput]) {\n    core_upsertStaff(input: $input) {\n      partyId\n    }\n  }\n"): (typeof documents)["\n  mutation core_upsertStaff($input: [UpsertStaffInput]) {\n    core_upsertStaff(input: $input) {\n      partyId\n    }\n  }\n"];
export function graphql(source: "\n  mutation wellbeing_deleteStudentAen(\n    $input: Wellbeing_DeleteStudentAenInput!\n  ) {\n    wellbeing_deleteStudentAen(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation wellbeing_deleteStudentAen(\n    $input: Wellbeing_DeleteStudentAenInput!\n  ) {\n    wellbeing_deleteStudentAen(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query wellbeing_studentAen($filter: StudentAenFilter!) {\n    wellbeing_studentAen(filter: $filter) {\n      studentPartyId\n      entries {\n        id\n        studentPartyId\n        startDate\n        endDate\n        type\n        typeNote\n        contact\n        snaSupport\n        provision\n        note\n      }\n    }\n  }\n"): (typeof documents)["\n  query wellbeing_studentAen($filter: StudentAenFilter!) {\n    wellbeing_studentAen(filter: $filter) {\n      studentPartyId\n      entries {\n        id\n        studentPartyId\n        startDate\n        endDate\n        type\n        typeNote\n        contact\n        snaSupport\n        provision\n        note\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation wellbeing_upsertStudentAen(\n    $input: Wellbeing_UpsertStudentAenInput!\n  ) {\n    wellbeing_upsertStudentAen(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation wellbeing_upsertStudentAen(\n    $input: Wellbeing_UpsertStudentAenInput!\n  ) {\n    wellbeing_upsertStudentAen(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation enrollment_ire_changeProgrammeStage(\n    $input: [EnrollmentIre_ChangeProgrammeStage!]!\n  ) {\n    enrollment_ire_changeProgrammeStage(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation enrollment_ire_changeProgrammeStage(\n    $input: [EnrollmentIre_ChangeProgrammeStage!]!\n  ) {\n    enrollment_ire_changeProgrammeStage(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation wellbeing_deleteStudentMedicalCondition(\n    $input: DeleteStudentMedicalConditionInput!\n  ) {\n    wellbeing_deleteStudentMedicalCondition(input: $input) {\n      studentPartyId\n      conditions {\n        id\n        name\n        description\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation wellbeing_deleteStudentMedicalCondition(\n    $input: DeleteStudentMedicalConditionInput!\n  ) {\n    wellbeing_deleteStudentMedicalCondition(input: $input) {\n      studentPartyId\n      conditions {\n        id\n        name\n        description\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation wellbeing_deleteStudentMedicalContact(\n    $input: DeleteStudentMedicalContactInput!\n  ) {\n    wellbeing_deleteStudentMedicalContact(input: $input) {\n      studentPartyId\n      medicalContacts {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation wellbeing_deleteStudentMedicalContact(\n    $input: DeleteStudentMedicalContactInput!\n  ) {\n    wellbeing_deleteStudentMedicalContact(input: $input) {\n      studentPartyId\n      medicalContacts {\n        id\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query wellbeing_studentMedicalConditionLookup {\n    wellbeing_studentMedicalConditionLookup {\n      values\n    }\n  }\n"): (typeof documents)["\n  query wellbeing_studentMedicalConditionLookup {\n    wellbeing_studentMedicalConditionLookup {\n      values\n    }\n  }\n"];
export function graphql(source: "\n  query wellbeing_studentMedical($filter: StudentMedicalFilter) {\n    wellbeing_studentMedical(filter: $filter) {\n      studentPartyId\n      student {\n        contacts {\n          partyId\n          person {\n            firstName\n            lastName\n          }\n          personalInformation {\n            preferredFirstName\n            preferredLastName\n            primaryPhoneNumber {\n              number\n            }\n          }\n          relationships {\n            relationshipType\n          }\n        }\n        siblings {\n          enrolledSiblings {\n            partyId\n            person {\n              title {\n                id\n                nameTextId\n                name\n              }\n              firstName\n              lastName\n              avatarUrl\n              type\n            }\n            classGroup {\n              name\n            }\n          }\n          nonEnrolledSiblings {\n            partyId\n            firstName\n            lastName\n          }\n        }\n      }\n      conditions {\n        id\n        name\n        description\n        equipment {\n          id\n          name\n          expiryDate\n          location\n          notes\n        }\n        emergencyPlan\n      }\n      medicalContacts {\n        id\n        personalTitle\n        firstName\n        lastName\n        occupation\n        addressLine1\n        addressLine2\n        addressLine3\n        county\n        postcode\n        primaryPhone\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  query wellbeing_studentMedical($filter: StudentMedicalFilter) {\n    wellbeing_studentMedical(filter: $filter) {\n      studentPartyId\n      student {\n        contacts {\n          partyId\n          person {\n            firstName\n            lastName\n          }\n          personalInformation {\n            preferredFirstName\n            preferredLastName\n            primaryPhoneNumber {\n              number\n            }\n          }\n          relationships {\n            relationshipType\n          }\n        }\n        siblings {\n          enrolledSiblings {\n            partyId\n            person {\n              title {\n                id\n                nameTextId\n                name\n              }\n              firstName\n              lastName\n              avatarUrl\n              type\n            }\n            classGroup {\n              name\n            }\n          }\n          nonEnrolledSiblings {\n            partyId\n            firstName\n            lastName\n          }\n        }\n      }\n      conditions {\n        id\n        name\n        description\n        equipment {\n          id\n          name\n          expiryDate\n          location\n          notes\n        }\n        emergencyPlan\n      }\n      medicalContacts {\n        id\n        personalTitle\n        firstName\n        lastName\n        occupation\n        addressLine1\n        addressLine2\n        addressLine3\n        county\n        postcode\n        primaryPhone\n        email\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation wellbeing_upsertStudentMedicalCondition(\n    $input: UpsertStudentMedicalConditionInput!\n  ) {\n    wellbeing_upsertStudentMedicalCondition(input: $input) {\n      studentPartyId\n      conditions {\n        id\n        name\n        description\n        equipment {\n          id\n          name\n          location\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation wellbeing_upsertStudentMedicalCondition(\n    $input: UpsertStudentMedicalConditionInput!\n  ) {\n    wellbeing_upsertStudentMedicalCondition(input: $input) {\n      studentPartyId\n      conditions {\n        id\n        name\n        description\n        equipment {\n          id\n          name\n          location\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation wellbeing_upsertStudentMedicalContact(\n    $input: UpsertStudentMedicalContactInput!\n  ) {\n    wellbeing_upsertStudentMedicalContact(input: $input) {\n      studentPartyId\n      medicalContacts {\n        id\n        personalTitleId\n        firstName\n        lastName\n        addressLine1\n        addressLine2\n        addressLine3\n        county\n        postcode\n        primaryPhone\n        email\n        occupation\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation wellbeing_upsertStudentMedicalContact(\n    $input: UpsertStudentMedicalContactInput!\n  ) {\n    wellbeing_upsertStudentMedicalContact(input: $input) {\n      studentPartyId\n      medicalContacts {\n        id\n        personalTitleId\n        firstName\n        lastName\n        addressLine1\n        addressLine2\n        addressLine3\n        county\n        postcode\n        primaryPhone\n        email\n        occupation\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query core_student_contacts($filter: StudentFilter!) {\n    core_students(filter: $filter) {\n      partyId\n      contacts {\n        partyId\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        personalInformation {\n          gender\n          nationality\n          primaryAddress {\n            line1\n            line2\n            line3\n            city\n            country\n            postCode\n          }\n          primaryPhoneNumber {\n            number\n            areaCode\n            countryCode\n          }\n          primaryEmail {\n            email\n          }\n        }\n        relationships {\n          relationshipType\n          priority\n          allowedToContact\n          includeInSms\n          includeInTmail\n          pickupRights\n          legalGuardian\n          allowAccessToStudentData\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query core_student_contacts($filter: StudentFilter!) {\n    core_students(filter: $filter) {\n      partyId\n      contacts {\n        partyId\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        personalInformation {\n          gender\n          nationality\n          primaryAddress {\n            line1\n            line2\n            line3\n            city\n            country\n            postCode\n          }\n          primaryPhoneNumber {\n            number\n            areaCode\n            countryCode\n          }\n          primaryEmail {\n            email\n          }\n        }\n        relationships {\n          relationshipType\n          priority\n          allowedToContact\n          includeInSms\n          includeInTmail\n          pickupRights\n          legalGuardian\n          allowAccessToStudentData\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query core_subjectGroupStudents($filter: SubjectGroupStudentFilter!) {\n    core_subjectGroupStudents(filter: $filter) {\n      students {\n        examinable\n      }\n      subjectGroup {\n        partyId\n        name\n        avatarUrl\n        subjects {\n          name\n          colour\n        }\n        staff {\n          firstName\n          lastName\n          avatarUrl\n        }\n        irePP {\n          level\n          examinable\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query core_subjectGroupStudents($filter: SubjectGroupStudentFilter!) {\n    core_subjectGroupStudents(filter: $filter) {\n      students {\n        examinable\n      }\n      subjectGroup {\n        partyId\n        name\n        avatarUrl\n        subjects {\n          name\n          colour\n        }\n        staff {\n          firstName\n          lastName\n          avatarUrl\n        }\n        irePP {\n          level\n          examinable\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query core_student_personal($filter: StudentFilter!) {\n    core_students(filter: $filter) {\n      partyId\n      startDate\n      leftEarly\n      endDate\n      guardianshipNote\n      exemptions {\n        id\n        exemption\n        exemptionTypeCode\n        grantor\n      }\n      person {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      personalInformation {\n        firstName\n        lastName\n        preferredFirstName\n        preferredLastName\n        middleName\n        gender\n        dateOfBirth\n        birthCertFirstName\n        birthCertLastName\n        ire {\n          ppsNumber\n          religion\n          countryOfBirth\n        }\n        nationality\n        mothersMaidenName\n        primaryAddress {\n          line1\n          line2\n          line3\n          city\n          country\n          postCode\n        }\n        addresses {\n          line1\n          line2\n          line3\n          city\n          country\n          postCode\n          primaryAddress\n        }\n        primaryPhoneNumber {\n          number\n          areaCode\n          countryCode\n        }\n        primaryEmail {\n          email\n        }\n      }\n      studentIrePP {\n        medicalCard\n        travellerHeritage\n        languageSupportApplicant\n        borderIndicator\n        examNumber\n        lockerNumber\n        previousSchoolRollNumber\n        dpin\n        examEntrant\n        repeatYear\n        boardingDays\n        shortTermPupil\n        shortTermPupilNumWeeks\n        reasonForLeaving\n        destinationRollNo\n        previousSchoolName\n        previousSchoolType\n      }\n      classGroup {\n        name\n      }\n      tutors {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n      }\n      yearGroupLeads {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n      }\n      yearGroups {\n        name\n      }\n      programmeStages {\n        name\n        programme {\n          name\n        }\n      }\n      siblings {\n        enrolledSiblings {\n          partyId\n          person {\n            partyId\n            title {\n              id\n              nameTextId\n              name\n            }\n            firstName\n            lastName\n            avatarUrl\n          }\n          classGroup {\n            name\n          }\n        }\n        nonEnrolledSiblings {\n          partyId\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query core_student_personal($filter: StudentFilter!) {\n    core_students(filter: $filter) {\n      partyId\n      startDate\n      leftEarly\n      endDate\n      guardianshipNote\n      exemptions {\n        id\n        exemption\n        exemptionTypeCode\n        grantor\n      }\n      person {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      personalInformation {\n        firstName\n        lastName\n        preferredFirstName\n        preferredLastName\n        middleName\n        gender\n        dateOfBirth\n        birthCertFirstName\n        birthCertLastName\n        ire {\n          ppsNumber\n          religion\n          countryOfBirth\n        }\n        nationality\n        mothersMaidenName\n        primaryAddress {\n          line1\n          line2\n          line3\n          city\n          country\n          postCode\n        }\n        addresses {\n          line1\n          line2\n          line3\n          city\n          country\n          postCode\n          primaryAddress\n        }\n        primaryPhoneNumber {\n          number\n          areaCode\n          countryCode\n        }\n        primaryEmail {\n          email\n        }\n      }\n      studentIrePP {\n        medicalCard\n        travellerHeritage\n        languageSupportApplicant\n        borderIndicator\n        examNumber\n        lockerNumber\n        previousSchoolRollNumber\n        dpin\n        examEntrant\n        repeatYear\n        boardingDays\n        shortTermPupil\n        shortTermPupilNumWeeks\n        reasonForLeaving\n        destinationRollNo\n        previousSchoolName\n        previousSchoolType\n      }\n      classGroup {\n        name\n      }\n      tutors {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n      }\n      yearGroupLeads {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n      }\n      yearGroups {\n        name\n      }\n      programmeStages {\n        name\n        programme {\n          name\n        }\n      }\n      siblings {\n        enrolledSiblings {\n          partyId\n          person {\n            partyId\n            title {\n              id\n              nameTextId\n              name\n            }\n            firstName\n            lastName\n            avatarUrl\n          }\n          classGroup {\n            name\n          }\n        }\n        nonEnrolledSiblings {\n          partyId\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query studentsForSiblingSearch {\n    core_students {\n      partyId\n      person {\n        partyId\n        title {\n          id\n          nameTextId\n          name\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      classGroup {\n        name\n      }\n      contacts {\n        partyId\n        person {\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query studentsForSiblingSearch {\n    core_students {\n      partyId\n      person {\n        partyId\n        title {\n          id\n          nameTextId\n          name\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      classGroup {\n        name\n      }\n      contacts {\n        partyId\n        person {\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query core_students {\n    core_students {\n      partyId\n      person {\n        partyId\n        avatarUrl\n        firstName\n        lastName\n        type\n      }\n      classGroup {\n        name\n        staff {\n          firstName\n          lastName\n        }\n      }\n      personalInformation {\n        preferredFirstName\n        dateOfBirth\n        primaryPhoneNumber {\n          number\n        }\n        primaryEmail {\n          email\n        }\n      }\n      studentIrePP {\n        examNumber\n        previousSchoolName\n        dpin\n      }\n      tutors {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n      }\n      yearGroupLeads {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n      }\n      yearGroups {\n        name\n      }\n      programmeStages {\n        id\n        name\n        programme {\n          name\n        }\n      }\n      extensions {\n        priority\n      }\n    }\n  }\n"): (typeof documents)["\n  query core_students {\n    core_students {\n      partyId\n      person {\n        partyId\n        avatarUrl\n        firstName\n        lastName\n        type\n      }\n      classGroup {\n        name\n        staff {\n          firstName\n          lastName\n        }\n      }\n      personalInformation {\n        preferredFirstName\n        dateOfBirth\n        primaryPhoneNumber {\n          number\n        }\n        primaryEmail {\n          email\n        }\n      }\n      studentIrePP {\n        examNumber\n        previousSchoolName\n        dpin\n      }\n      tutors {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n      }\n      yearGroupLeads {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n      }\n      yearGroups {\n        name\n      }\n      programmeStages {\n        id\n        name\n        programme {\n          name\n        }\n      }\n      extensions {\n        priority\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query core_student($filter: StudentFilter!) {\n    core_students(filter: $filter) {\n      partyId\n      person {\n        partyId\n        avatarUrl\n        firstName\n        lastName\n      }\n      classGroup {\n        name\n        staff {\n          firstName\n          lastName\n        }\n      }\n      yearGroupLeads {\n        firstName\n        lastName\n        avatarUrl\n      }\n      yearGroups {\n        shortName\n      }\n      tutors {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      extensions {\n        priority\n      }\n    }\n  }\n"): (typeof documents)["\n  query core_student($filter: StudentFilter!) {\n    core_students(filter: $filter) {\n      partyId\n      person {\n        partyId\n        avatarUrl\n        firstName\n        lastName\n      }\n      classGroup {\n        name\n        staff {\n          firstName\n          lastName\n        }\n      }\n      yearGroupLeads {\n        firstName\n        lastName\n        avatarUrl\n      }\n      yearGroups {\n        shortName\n      }\n      tutors {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      extensions {\n        priority\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query core_studentsInfoForSelect($filter: StudentFilter) {\n    core_students(filter: $filter) {\n      person {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      classGroup {\n        name\n      }\n      yearGroups {\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query core_studentsInfoForSelect($filter: StudentFilter) {\n    core_students(filter: $filter) {\n      person {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      classGroup {\n        name\n      }\n      yearGroups {\n        name\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation updateCoreStudents($input: [UpdateStudentInput]!) {\n    core_updateStudents(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation updateCoreStudents($input: [UpdateStudentInput]!) {\n    core_updateStudents(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation core_linkSiblingsAndContacts($input: Core_LinkSiblingsAndContacts!) {\n    core_linkSiblingsAndContacts(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation core_linkSiblingsAndContacts($input: Core_LinkSiblingsAndContacts!) {\n    core_linkSiblingsAndContacts(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation core_updateStudentContactRelationships(\n    $input: [Core_UpdateStudentContactRelationshipInput]\n  ) {\n    core_updateStudentContactRelationships(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation core_updateStudentContactRelationships(\n    $input: [Core_UpdateStudentContactRelationshipInput]\n  ) {\n    core_updateStudentContactRelationships(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation core_updateStudentSubjectGroup(\n    $input: [Core_UpdateStudentSubjectGroupInput]!\n  ) {\n    core_updateStudentSubjectGroup(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation core_updateStudentSubjectGroup(\n    $input: [Core_UpdateStudentSubjectGroupInput]!\n  ) {\n    core_updateStudentSubjectGroup(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation updateStudent($input: [UpdateStudentInput]!) {\n    core_updateStudents(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation updateStudent($input: [UpdateStudentInput]!) {\n    core_updateStudents(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query printTimetable($filter: Print_TimetableOptions!) {\n    print_printTimetable(filter: $filter) {\n      url\n      html\n    }\n  }\n"): (typeof documents)["\n  query printTimetable($filter: Print_TimetableOptions!) {\n    print_printTimetable(filter: $filter) {\n      url\n      html\n    }\n  }\n"];
export function graphql(source: "\n  query attendance_awolReport($filter: AwolFilter!) {\n    attendance_awolReport(filter: $filter) {\n      date\n      partyId\n      student {\n        partyId\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n        yearGroups {\n          name\n        }\n      }\n      classGroupId\n      classGroup {\n        partyId\n        name\n      }\n      absentEvent {\n        eventId\n        startTime\n        endTime\n        name\n        description\n        rooms {\n          name\n        }\n      }\n      absentSubjectGroup {\n        partyId\n        subjectGroupType\n        name\n        subjects {\n          colour\n        }\n      }\n      absentUpdatedBy {\n        firstName\n        lastName\n        avatarUrl\n      }\n      absentCreatedBy {\n        firstName\n        lastName\n        avatarUrl\n      }\n      presentEvent {\n        eventId\n        allDayEvent\n        startTime\n        endTime\n        name\n        rooms {\n          name\n        }\n      }\n      presentSubjectGroup {\n        partyId\n        subjectGroupType\n        name\n        subjects {\n          colour\n        }\n      }\n      presentUpdatedBy {\n        avatarUrl\n        firstName\n        lastName\n      }\n      presentCreatedBy {\n        avatarUrl\n        firstName\n        lastName\n      }\n    }\n  }\n"): (typeof documents)["\n  query attendance_awolReport($filter: AwolFilter!) {\n    attendance_awolReport(filter: $filter) {\n      date\n      partyId\n      student {\n        partyId\n        person {\n          partyId\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        extensions {\n          priority\n        }\n        yearGroups {\n          name\n        }\n      }\n      classGroupId\n      classGroup {\n        partyId\n        name\n      }\n      absentEvent {\n        eventId\n        startTime\n        endTime\n        name\n        description\n        rooms {\n          name\n        }\n      }\n      absentSubjectGroup {\n        partyId\n        subjectGroupType\n        name\n        subjects {\n          colour\n        }\n      }\n      absentUpdatedBy {\n        firstName\n        lastName\n        avatarUrl\n      }\n      absentCreatedBy {\n        firstName\n        lastName\n        avatarUrl\n      }\n      presentEvent {\n        eventId\n        allDayEvent\n        startTime\n        endTime\n        name\n        rooms {\n          name\n        }\n      }\n      presentSubjectGroup {\n        partyId\n        subjectGroupType\n        name\n        subjects {\n          colour\n        }\n      }\n      presentUpdatedBy {\n        avatarUrl\n        firstName\n        lastName\n      }\n      presentCreatedBy {\n        avatarUrl\n        firstName\n        lastName\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query reporting_reports {\n    reporting_reports {\n      info {\n        id\n        name\n      }\n      reports {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query reporting_reports {\n    reporting_reports {\n      info {\n        id\n        name\n      }\n      reports {\n        id\n        name\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query reporting_runReportExpand($filter: Reporting_ReportFilterExpand) {\n    reporting_runReportExpand(filter: $filter) {\n      id\n      fields {\n        id\n        label\n        visibleByDefault\n      }\n      data\n    }\n  }\n"): (typeof documents)["\n  query reporting_runReportExpand($filter: Reporting_ReportFilterExpand) {\n    reporting_runReportExpand(filter: $filter) {\n      id\n      fields {\n        id\n        label\n        visibleByDefault\n      }\n      data\n    }\n  }\n"];
export function graphql(source: "\n  query reporting_reportInfo($filter: Reporting_ReportFilter) {\n    reporting_runReport(filter: $filter) {\n      id\n      info {\n        name\n        supportsExpandRow\n      }\n      innerReports {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query reporting_reportInfo($filter: Reporting_ReportFilter) {\n    reporting_runReport(filter: $filter) {\n      id\n      info {\n        name\n        supportsExpandRow\n      }\n      innerReports {\n        id\n        name\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query reporting_runReport($filter: Reporting_ReportFilter) {\n    reporting_runReport(filter: $filter) {\n      id\n      info {\n        name\n        supportsExpandRow\n        isInteractive\n      }\n      innerReports {\n        id\n        name\n      }\n      debug {\n        sql\n      }\n      filters {\n        id\n        inputType\n        label\n        defaultValue\n        required\n        values {\n          id\n          value\n        }\n        minValue\n        maxValue\n      }\n      fields {\n        id\n        label\n        visibleByDefault\n        checkExpandedRows\n        hideMenu\n        sortable\n        maxWidth\n        minWidth\n        pinned\n      }\n      metrics {\n        defaultValue\n        values {\n          id\n          name\n        }\n      }\n      timeGroupBy {\n        defaultValue\n        values {\n          id\n          name\n          description\n        }\n      }\n      groupBy {\n        defaultValue\n        values {\n          id\n          name\n          description\n        }\n      }\n      data\n      tableDisplayOptions {\n        gridOptions\n        tableContainerSx\n      }\n    }\n  }\n"): (typeof documents)["\n  query reporting_runReport($filter: Reporting_ReportFilter) {\n    reporting_runReport(filter: $filter) {\n      id\n      info {\n        name\n        supportsExpandRow\n        isInteractive\n      }\n      innerReports {\n        id\n        name\n      }\n      debug {\n        sql\n      }\n      filters {\n        id\n        inputType\n        label\n        defaultValue\n        required\n        values {\n          id\n          value\n        }\n        minValue\n        maxValue\n      }\n      fields {\n        id\n        label\n        visibleByDefault\n        checkExpandedRows\n        hideMenu\n        sortable\n        maxWidth\n        minWidth\n        pinned\n      }\n      metrics {\n        defaultValue\n        values {\n          id\n          name\n        }\n      }\n      timeGroupBy {\n        defaultValue\n        values {\n          id\n          name\n          description\n        }\n      }\n      groupBy {\n        defaultValue\n        values {\n          id\n          name\n          description\n        }\n      }\n      data\n      tableDisplayOptions {\n        gridOptions\n        tableContainerSx\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query sa_classAway($filter: Sa_ClassAwayFilter!) {\n    sa_classAway(filter: $filter) {\n      freeStaffPartyIds\n      cancelled\n      staffAreFreed\n      freeStaff {\n        partyId\n        title {\n          id\n          nameTextId\n          name\n        }\n        firstName\n        lastName\n        avatarUrl\n        archived\n        type\n      }\n      studentsAttendingActivityTotal\n      studentsInGroupTotal\n      event {\n        name\n        colour\n        calendarEventId {\n          eventId\n          date\n        }\n        eventId\n        calendarIds\n        startTime\n        endTime\n        type\n        allDayEvent\n        attendees {\n          partyId\n          type\n          partyInfo {\n            partyId\n          }\n        }\n        lessonInfo {\n          subjectGroupId\n          lessonId\n        }\n        roomIds\n        rooms {\n          roomId\n          name\n          capacity\n          description\n          pools\n          includeInTimetable\n          externalSystemId\n          location\n          disabled\n        }\n      }\n      affectedAttendees {\n        partyId\n      }\n    }\n  }\n"): (typeof documents)["\n  query sa_classAway($filter: Sa_ClassAwayFilter!) {\n    sa_classAway(filter: $filter) {\n      freeStaffPartyIds\n      cancelled\n      staffAreFreed\n      freeStaff {\n        partyId\n        title {\n          id\n          nameTextId\n          name\n        }\n        firstName\n        lastName\n        avatarUrl\n        archived\n        type\n      }\n      studentsAttendingActivityTotal\n      studentsInGroupTotal\n      event {\n        name\n        colour\n        calendarEventId {\n          eventId\n          date\n        }\n        eventId\n        calendarIds\n        startTime\n        endTime\n        type\n        allDayEvent\n        attendees {\n          partyId\n          type\n          partyInfo {\n            partyId\n          }\n        }\n        lessonInfo {\n          subjectGroupId\n          lessonId\n        }\n        roomIds\n        rooms {\n          roomId\n          name\n          capacity\n          description\n          pools\n          includeInTimetable\n          externalSystemId\n          location\n          disabled\n        }\n      }\n      affectedAttendees {\n        partyId\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query roomsList {\n    core_rooms {\n      roomId\n      name\n      capacity\n      description\n    }\n  }\n"): (typeof documents)["\n  query roomsList {\n    core_rooms {\n      roomId\n      name\n      capacity\n      description\n    }\n  }\n"];
export function graphql(source: "\n  query activitiesList($filter: Sa_SchoolActivityFilter!) {\n    sa_activities(filter: $filter) {\n      schoolActivityId\n      customGroupId\n      lastPublished\n      name\n      createdBy {\n        person {\n          firstName\n          lastName\n          avatarUrl\n        }\n      }\n      dates {\n        date\n        startTime\n        endTime\n        partial\n      }\n      location {\n        locationDetails\n        inSchoolGrounds\n        roomIds\n        rooms {\n          roomId\n          name\n        }\n      }\n      tripPurpose\n      notes\n      published\n      customGroup {\n        partyId\n        name\n        avatarUrl\n        relatedSubjectGroups {\n          partyId\n          name\n          subjects {\n            name\n          }\n        }\n        studentMembers {\n          groupPartyId\n          memberCount\n          members {\n            partyId\n            person {\n              avatarUrl\n              partyId\n              firstName\n              lastName\n            }\n          }\n        }\n        staffMembers {\n          groupPartyId\n          memberIds\n          members {\n            partyId\n            person {\n              avatarUrl\n              partyId\n              firstName\n              lastName\n            }\n          }\n          memberCount\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query activitiesList($filter: Sa_SchoolActivityFilter!) {\n    sa_activities(filter: $filter) {\n      schoolActivityId\n      customGroupId\n      lastPublished\n      name\n      createdBy {\n        person {\n          firstName\n          lastName\n          avatarUrl\n        }\n      }\n      dates {\n        date\n        startTime\n        endTime\n        partial\n      }\n      location {\n        locationDetails\n        inSchoolGrounds\n        roomIds\n        rooms {\n          roomId\n          name\n        }\n      }\n      tripPurpose\n      notes\n      published\n      customGroup {\n        partyId\n        name\n        avatarUrl\n        relatedSubjectGroups {\n          partyId\n          name\n          subjects {\n            name\n          }\n        }\n        studentMembers {\n          groupPartyId\n          memberCount\n          members {\n            partyId\n            person {\n              avatarUrl\n              partyId\n              firstName\n              lastName\n            }\n          }\n        }\n        staffMembers {\n          groupPartyId\n          memberIds\n          members {\n            partyId\n            person {\n              avatarUrl\n              partyId\n              firstName\n              lastName\n            }\n          }\n          memberCount\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query activitiesById($filter: Sa_SchoolActivityFilter!) {\n    sa_activities(filter: $filter) {\n      schoolActivityId\n      customGroupId\n      lastPublished\n      name\n      staffAbsenceTypeId\n      dates {\n        date\n        startTime\n        endTime\n        partial\n      }\n      location {\n        locationDetails\n        inSchoolGrounds\n        roomIds\n        rooms {\n          roomId\n          name\n        }\n      }\n      tripPurpose\n      notes\n      published\n      customGroup {\n        partyId\n        name\n        avatarUrl\n        relatedSubjectGroups {\n          partyId\n          name\n          subjects {\n            name\n          }\n        }\n        studentMembers {\n          groupPartyId\n          memberCount\n          members {\n            partyId\n            person {\n              avatarUrl\n              partyId\n              firstName\n              lastName\n            }\n          }\n        }\n        staffMembers {\n          groupPartyId\n          memberIds\n          members {\n            partyId\n            person {\n              avatarUrl\n              partyId\n              firstName\n              lastName\n            }\n          }\n          memberCount\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query activitiesById($filter: Sa_SchoolActivityFilter!) {\n    sa_activities(filter: $filter) {\n      schoolActivityId\n      customGroupId\n      lastPublished\n      name\n      staffAbsenceTypeId\n      dates {\n        date\n        startTime\n        endTime\n        partial\n      }\n      location {\n        locationDetails\n        inSchoolGrounds\n        roomIds\n        rooms {\n          roomId\n          name\n        }\n      }\n      tripPurpose\n      notes\n      published\n      customGroup {\n        partyId\n        name\n        avatarUrl\n        relatedSubjectGroups {\n          partyId\n          name\n          subjects {\n            name\n          }\n        }\n        studentMembers {\n          groupPartyId\n          memberCount\n          members {\n            partyId\n            person {\n              avatarUrl\n              partyId\n              firstName\n              lastName\n            }\n          }\n        }\n        staffMembers {\n          groupPartyId\n          memberIds\n          members {\n            partyId\n            person {\n              avatarUrl\n              partyId\n              firstName\n              lastName\n            }\n          }\n          memberCount\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query sa_lessonsNeedingCover($filter: Sa_LessonsNeedingCoverFilter!) {\n    sa_lessonsNeedingCover(filter: $filter) {\n      awayStaffPartyIds\n      awayStaff {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n        type\n        archived\n      }\n      studentsAttendingActivityTotal\n      studentsInGroupTotal\n      event {\n        colour\n        calendarEventId {\n          eventId\n        }\n        name\n        eventId\n        startTime\n        endTime\n        rooms {\n          name\n        }\n      }\n      affectedAttendees {\n        partyId\n      }\n    }\n  }\n"): (typeof documents)["\n  query sa_lessonsNeedingCover($filter: Sa_LessonsNeedingCoverFilter!) {\n    sa_lessonsNeedingCover(filter: $filter) {\n      awayStaffPartyIds\n      awayStaff {\n        partyId\n        firstName\n        lastName\n        avatarUrl\n        type\n        archived\n      }\n      studentsAttendingActivityTotal\n      studentsInGroupTotal\n      event {\n        colour\n        calendarEventId {\n          eventId\n        }\n        name\n        eventId\n        startTime\n        endTime\n        rooms {\n          name\n        }\n      }\n      affectedAttendees {\n        partyId\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation sa_upsertPublish($input: Sa_PublishInput) {\n    sa_upsertPublish(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation sa_upsertPublish($input: Sa_PublishInput) {\n    sa_upsertPublish(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation sa_upsertActivity($input: Sa_SchoolActivityInput) {\n    sa_upsertActivity(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation sa_upsertActivity($input: Sa_SchoolActivityInput) {\n    sa_upsertActivity(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation core_upsertAcademicNamespace($input: SaveAcademicNamespaceInput) {\n    core_upsertAcademicNamespace(input: $input) {\n      academicNamespaceId\n    }\n  }\n"): (typeof documents)["\n  mutation core_upsertAcademicNamespace($input: SaveAcademicNamespaceInput) {\n    core_upsertAcademicNamespace(input: $input) {\n      academicNamespaceId\n    }\n  }\n"];
export function graphql(source: "\n  mutation core_setActiveActiveAcademicNamespace(\n    $input: SetActiveAcademicNamespace\n  ) {\n    core_setActiveActiveAcademicNamespace(input: $input) {\n      academicNamespaceId\n      type\n      name\n      year\n      description\n      isActiveDefaultNamespace\n    }\n  }\n"): (typeof documents)["\n  mutation core_setActiveActiveAcademicNamespace(\n    $input: SetActiveAcademicNamespace\n  ) {\n    core_setActiveActiveAcademicNamespace(input: $input) {\n      academicNamespaceId\n      type\n      name\n      year\n      description\n      isActiveDefaultNamespace\n    }\n  }\n"];
export function graphql(source: "\n  mutation core_upsertRooms($input: [UpsertRoomInput]) {\n    core_upsertRooms(input: $input) {\n      roomId\n    }\n  }\n"): (typeof documents)["\n  mutation core_upsertRooms($input: [UpsertRoomInput]) {\n    core_upsertRooms(input: $input) {\n      roomId\n    }\n  }\n"];
export function graphql(source: "\n  query assessment_commentBank($filter: CommentBankFilter) {\n    assessment_commentBank(filter: $filter) {\n      id\n      name\n      description\n      active\n      comments {\n        id\n        comment\n        active\n      }\n    }\n  }\n"): (typeof documents)["\n  query assessment_commentBank($filter: CommentBankFilter) {\n    assessment_commentBank(filter: $filter) {\n      id\n      name\n      description\n      active\n      comments {\n        id\n        comment\n        active\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query commentBankById($filter: CommentBankFilter) {\n    assessment_commentBank(filter: $filter) {\n      id\n      name\n      comments {\n        id\n        comment\n        active\n      }\n    }\n  }\n"): (typeof documents)["\n  query commentBankById($filter: CommentBankFilter) {\n    assessment_commentBank(filter: $filter) {\n      id\n      name\n      comments {\n        id\n        comment\n        active\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation assessment_saveCommentBank($input: [SaveCommentBankInput]) {\n    assessment_saveCommentBank(input: $input) {\n      id\n      name\n      description\n      active\n      comments {\n        id\n        comment\n        active\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation assessment_saveCommentBank($input: [SaveCommentBankInput]) {\n    assessment_saveCommentBank(input: $input) {\n      id\n      name\n      description\n      active\n      comments {\n        id\n        comment\n        active\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query core_staff_form_b($filter: StaffFilter) {\n    core_staff(filter: $filter) {\n      partyId\n      person {\n        firstName\n        lastName\n      }\n      personalInformation {\n        gender\n        ire {\n          ppsNumber\n        }\n      }\n      payrollNumber\n      jobSharing\n      qualifications\n      employmentCapacity {\n        id\n        name\n      }\n      staffIre {\n        teacherCouncilNumber\n        teacherReferenceNumber\n        includeDtrReturns\n        staffPost {\n          id\n          name\n        }\n        qualifications2\n        qualifications3\n        qualifications4\n        otherSchool1\n        otherSchool2\n        previousSchool1\n        previousSchool2\n      }\n    }\n  }\n"): (typeof documents)["\n  query core_staff_form_b($filter: StaffFilter) {\n    core_staff(filter: $filter) {\n      partyId\n      person {\n        firstName\n        lastName\n      }\n      personalInformation {\n        gender\n        ire {\n          ppsNumber\n        }\n      }\n      payrollNumber\n      jobSharing\n      qualifications\n      employmentCapacity {\n        id\n        name\n      }\n      staffIre {\n        teacherCouncilNumber\n        teacherReferenceNumber\n        includeDtrReturns\n        staffPost {\n          id\n          name\n        }\n        qualifications2\n        qualifications3\n        qualifications4\n        otherSchool1\n        otherSchool2\n        previousSchool1\n        previousSchool2\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation core_updateStaff($input: [UpdateStaffInput!]!) {\n    core_updateStaff(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation core_updateStaff($input: [UpdateStaffInput!]!) {\n    core_updateStaff(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation savePermissionGroup($input: SavePermissionGroup) {\n    users_savePermissionGroup(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation savePermissionGroup($input: SavePermissionGroup) {\n    users_savePermissionGroup(input: $input) {\n      id\n    }\n  }\n"];
export function graphql(source: "\n  query composite_permissionGroups($filter: PermissionGroupFilter!) {\n    composite_permissionGroups(filter: $filter) {\n      id\n      name\n      description\n      memberType\n      memberPartyIds\n      custom\n      permissionSets {\n        id\n        toggle\n        permissionType\n        feature\n      }\n    }\n  }\n"): (typeof documents)["\n  query composite_permissionGroups($filter: PermissionGroupFilter!) {\n    composite_permissionGroups(filter: $filter) {\n      id\n      name\n      description\n      memberType\n      memberPartyIds\n      custom\n      permissionSets {\n        id\n        toggle\n        permissionType\n        feature\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query users_permissionSets($filter: PermissionSetFilter!) {\n    users_permissionSets(filter: $filter) {\n      id\n      name\n      description\n      permissionType\n      toggle\n      feature\n    }\n  }\n"): (typeof documents)["\n  query users_permissionSets($filter: PermissionSetFilter!) {\n    users_permissionSets(filter: $filter) {\n      id\n      name\n      description\n      permissionType\n      toggle\n      feature\n    }\n  }\n"];
export function graphql(source: "\n  query ppod_PPODCredentials {\n    ppod_PPODCredentials {\n      username\n      password\n      lastSyncSuccessful\n    }\n  }\n"): (typeof documents)["\n  query ppod_PPODCredentials {\n    ppod_PPODCredentials {\n      username\n      password\n      lastSyncSuccessful\n    }\n  }\n"];
export function graphql(source: "\n  mutation ppod_savePPODCredentials($input: SavePPODCredentials!) {\n    ppod_savePPODCredentials(input: $input) {\n      username\n      password\n    }\n  }\n"): (typeof documents)["\n  mutation ppod_savePPODCredentials($input: SavePPODCredentials!) {\n    ppod_savePPODCredentials(input: $input) {\n      username\n      password\n    }\n  }\n"];
export function graphql(source: "\n  query users_schoolInfo {\n    users_schoolInfo {\n      id\n      rollNo\n      name\n      email\n      website\n      fax\n      principal\n      boardingFeeFiveDay\n      boardingFeeSixOrSevenDay\n      schoolGender\n      parentAssociation\n      studentCouncil\n      boardOfManagement\n      irishClassification\n      coOperatingSchoolRollNo1\n      coOperatingSchoolRollNo2\n      octoberReturnsContact\n      octoberReturnsPhoneNo\n      octoberReturnsFaxNo\n      octoberReturnsEmail\n      phones {\n        phone\n      }\n      addresses {\n        address1\n        address2\n        address3\n        address4\n        county\n        localAuthority\n      }\n      chairPeople {\n        chairPersonId\n        forename\n        surname\n        phoneNo\n        startDate\n        endDate\n      }\n      owners {\n        ownerId\n        forename\n        surname\n        addressLine1\n        addressLine2\n        addressLine3\n        addressLine4\n        startDate\n        endDate\n      }\n      trustees {\n        trusteeId\n        forename\n        surname\n        addressLine1\n        addressLine2\n        addressLine3\n        addressLine4\n        startDate\n        endDate\n      }\n    }\n  }\n"): (typeof documents)["\n  query users_schoolInfo {\n    users_schoolInfo {\n      id\n      rollNo\n      name\n      email\n      website\n      fax\n      principal\n      boardingFeeFiveDay\n      boardingFeeSixOrSevenDay\n      schoolGender\n      parentAssociation\n      studentCouncil\n      boardOfManagement\n      irishClassification\n      coOperatingSchoolRollNo1\n      coOperatingSchoolRollNo2\n      octoberReturnsContact\n      octoberReturnsPhoneNo\n      octoberReturnsFaxNo\n      octoberReturnsEmail\n      phones {\n        phone\n      }\n      addresses {\n        address1\n        address2\n        address3\n        address4\n        county\n        localAuthority\n      }\n      chairPeople {\n        chairPersonId\n        forename\n        surname\n        phoneNo\n        startDate\n        endDate\n      }\n      owners {\n        ownerId\n        forename\n        surname\n        addressLine1\n        addressLine2\n        addressLine3\n        addressLine4\n        startDate\n        endDate\n      }\n      trustees {\n        trusteeId\n        forename\n        surname\n        addressLine1\n        addressLine2\n        addressLine3\n        addressLine4\n        startDate\n        endDate\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query ppod_syncRequests($filter: SyncRequestsFilter!) {\n    ppod_syncRequests(filter: $filter) {\n      id\n      syncRequestStatus\n      requesterPartyId\n      requester {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      failureReason\n      requestedOn\n    }\n  }\n"): (typeof documents)["\n  query ppod_syncRequests($filter: SyncRequestsFilter!) {\n    ppod_syncRequests(filter: $filter) {\n      id\n      syncRequestStatus\n      requesterPartyId\n      requester {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      failureReason\n      requestedOn\n    }\n  }\n"];
export function graphql(source: "\n  query core_rooms {\n    core_rooms {\n      roomId\n      name\n      capacity\n      description\n      pools\n      includeInTimetable\n      externalSystemId\n      location\n      disabled\n    }\n  }\n"): (typeof documents)["\n  query core_rooms {\n    core_rooms {\n      roomId\n      name\n      capacity\n      description\n      pools\n      includeInTimetable\n      externalSystemId\n      location\n      disabled\n    }\n  }\n"];
export function graphql(source: "\n  query catalogueSubjects($filter: SubjectFilter) {\n    catalogue_subjects(filter: $filter) {\n      id\n      name\n      description\n      shortCode\n      nationalCode\n      subjectSource\n      examinable\n      colour\n      icon\n      active\n    }\n  }\n"): (typeof documents)["\n  query catalogueSubjects($filter: SubjectFilter) {\n    catalogue_subjects(filter: $filter) {\n      id\n      name\n      description\n      shortCode\n      nationalCode\n      subjectSource\n      examinable\n      colour\n      icon\n      active\n    }\n  }\n"];
export function graphql(source: "\n  mutation catalogue_upsertSubjects($input: [UpsertSubject!]!) {\n    catalogue_upsertSubjects(input: $input) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation catalogue_upsertSubjects($input: [UpsertSubject!]!) {\n    catalogue_upsertSubjects(input: $input) {\n      success\n      message\n    }\n  }\n"];
export function graphql(source: "\n  mutation users_inviteUsers($input: [InviteUser]) {\n    users_inviteUsers(input: $input) {\n      userAccesses {\n        personPartyId\n        webLastLogin\n        mobileLastLogin\n        status\n        invitationId\n        invitingPersonPartyId\n        invitedOn\n      }\n      validations {\n        message\n        associatedUsers\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation users_inviteUsers($input: [InviteUser]) {\n    users_inviteUsers(input: $input) {\n      userAccesses {\n        personPartyId\n        webLastLogin\n        mobileLastLogin\n        status\n        invitationId\n        invitingPersonPartyId\n        invitedOn\n      }\n      validations {\n        message\n        associatedUsers\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation core_updateStudentContacts($input: [UpdateStudentContactInput!]!) {\n    core_updateStudentContacts(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation core_updateStudentContacts($input: [UpdateStudentContactInput!]!) {\n    core_updateStudentContacts(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation core_updateStudent($input: [UpdateStudentInput!]!) {\n    core_updateStudents(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation core_updateStudent($input: [UpdateStudentInput!]!) {\n    core_updateStudents(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query users_userAccess($filter: UserAccessFilter) {\n    users_userAccess(filter: $filter) {\n      personPartyId\n      personalInfo {\n        firstName\n        lastName\n        primaryEmail {\n          email\n        }\n      }\n      contactStudents {\n        firstName\n        lastName\n      }\n      webLastLogin\n      mobileLastLogin\n      status\n      invitedOn\n      yearGroup {\n        shortName\n      }\n      yearGroupContacts {\n        shortName\n      }\n      mobileAppVersion\n    }\n  }\n"): (typeof documents)["\n  query users_userAccess($filter: UserAccessFilter) {\n    users_userAccess(filter: $filter) {\n      personPartyId\n      personalInfo {\n        firstName\n        lastName\n        primaryEmail {\n          email\n        }\n      }\n      contactStudents {\n        firstName\n        lastName\n      }\n      webLastLogin\n      mobileLastLogin\n      status\n      invitedOn\n      yearGroup {\n        shortName\n      }\n      yearGroupContacts {\n        shortName\n      }\n      mobileAppVersion\n    }\n  }\n"];
export function graphql(source: "\n  mutation sendSms($input: SendSmsInput) {\n    communications_sendSms(input: $input)\n  }\n"): (typeof documents)["\n  mutation sendSms($input: SendSmsInput) {\n    communications_sendSms(input: $input)\n  }\n"];
export function graphql(source: "\n  query communications_sms($filter: SmsFilter) {\n    communications_sms(filter: $filter) {\n      id\n      name\n      sender {\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      body\n      sentOn\n      canReply\n      numRecipients\n      totalCost\n      recipients {\n        id {\n          tenant\n          smsId\n          recipientPartyId\n        }\n        recipient {\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        recipientPhoneNumber\n        smsStatus\n      }\n    }\n  }\n"): (typeof documents)["\n  query communications_sms($filter: SmsFilter) {\n    communications_sms(filter: $filter) {\n      id\n      name\n      sender {\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      body\n      sentOn\n      canReply\n      numRecipients\n      totalCost\n      recipients {\n        id {\n          tenant\n          smsId\n          recipientPartyId\n        }\n        recipient {\n          title {\n            id\n            name\n            nameTextId\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n        recipientPhoneNumber\n        smsStatus\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query communications_smsCost($filter: SmsCostFilter) {\n    communications_smsCost(filter: $filter) {\n      total\n    }\n  }\n"): (typeof documents)["\n  query communications_smsCost($filter: SmsCostFilter) {\n    communications_smsCost(filter: $filter) {\n      total\n    }\n  }\n"];
export function graphql(source: "\n  query communications_currentMonthlySpend {\n    communications_currentMonthlySpend {\n      currentMonthlySpend\n    }\n  }\n"): (typeof documents)["\n  query communications_currentMonthlySpend {\n    communications_currentMonthlySpend {\n      currentMonthlySpend\n    }\n  }\n"];
export function graphql(source: "\n  mutation swm_applySubstitutions($input: SWM_InsertSubstitution!) {\n    swm_applySubstitutions(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation swm_applySubstitutions($input: SWM_InsertSubstitution!) {\n    swm_applySubstitutions(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation swm_deleteSubstitutions($input: SWM_DeleteSubstitution!) {\n    swm_deleteSubstitutions(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation swm_deleteSubstitutions($input: SWM_DeleteSubstitution!) {\n    swm_deleteSubstitutions(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query swm_absenceTypes($filter: SWM_StaffAbsenceTypeFilter) {\n    swm_absenceTypes(filter: $filter) {\n      absenceTypeId\n      name\n      nameTextId\n      description\n      descriptionTextId\n      code\n      availableForRequests\n    }\n  }\n"): (typeof documents)["\n  query swm_absenceTypes($filter: SWM_StaffAbsenceTypeFilter) {\n    swm_absenceTypes(filter: $filter) {\n      absenceTypeId\n      name\n      nameTextId\n      description\n      descriptionTextId\n      code\n      availableForRequests\n    }\n  }\n"];
export function graphql(source: "\n  mutation swm_upsertAbsenceType($input: [SWM_UpsertStaffAbsenceType]) {\n    swm_upsertAbsenceType(input: $input) {\n      absenceTypeId\n    }\n  }\n"): (typeof documents)["\n  mutation swm_upsertAbsenceType($input: [SWM_UpsertStaffAbsenceType]) {\n    swm_upsertAbsenceType(input: $input) {\n      absenceTypeId\n    }\n  }\n"];
export function graphql(source: "\n  query swm_absences($filter: SWM_StaffAbsenceFilter) {\n    swm_absences(filter: $filter) {\n      absenceId\n      absenceTypeId\n      staffPartyId\n      absenceType {\n        absenceTypeId\n        name\n        code\n      }\n      isLongTermLeave\n      longTermLeaveGroupsRequired\n      longTermLeaveGroupsApplied\n      staff {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      absenceReasonText\n      substitutionRequired\n      dates {\n        continuousStartDate\n        continuousEndDate\n        individualDates\n        partialAbsence\n        leavesAt\n        returnsAt\n      }\n      longTermLeaveGroups {\n        groupId\n        group {\n          name\n          avatarUrl\n        }\n        coveringStaffId\n        coveringStaff {\n          person {\n            partyId\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query swm_absences($filter: SWM_StaffAbsenceFilter) {\n    swm_absences(filter: $filter) {\n      absenceId\n      absenceTypeId\n      staffPartyId\n      absenceType {\n        absenceTypeId\n        name\n        code\n      }\n      isLongTermLeave\n      longTermLeaveGroupsRequired\n      longTermLeaveGroupsApplied\n      staff {\n        partyId\n        title {\n          id\n          name\n          nameTextId\n        }\n        firstName\n        lastName\n        avatarUrl\n        type\n      }\n      absenceReasonText\n      substitutionRequired\n      dates {\n        continuousStartDate\n        continuousEndDate\n        individualDates\n        partialAbsence\n        leavesAt\n        returnsAt\n      }\n      longTermLeaveGroups {\n        groupId\n        group {\n          name\n          avatarUrl\n        }\n        coveringStaffId\n        coveringStaff {\n          person {\n            partyId\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation swm_upsertAbsence($input: [SWM_UpsertStaffAbsence!]!) {\n    swm_upsertAbsence(input: $input) {\n      staffPartyId\n      absenceTypeId\n      fromAbsenceRequestId\n      absenceReasonText\n    }\n  }\n"): (typeof documents)["\n  mutation swm_upsertAbsence($input: [SWM_UpsertStaffAbsence!]!) {\n    swm_upsertAbsence(input: $input) {\n      staffPartyId\n      absenceTypeId\n      fromAbsenceRequestId\n      absenceReasonText\n    }\n  }\n"];
export function graphql(source: "\n  mutation swm_deleteAbsence($input: SWM_DeleteStaffAbsence!) {\n    swm_deleteAbsence(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation swm_deleteAbsence($input: SWM_DeleteStaffAbsence!) {\n    swm_deleteAbsence(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query swm_substitutionLookup($filter: SWM_SubstitutionLookupFilter) {\n    swm_substitutionLookup(filter: $filter) {\n      staff {\n        staff {\n          person {\n            partyId\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n          extensions {\n            timetableSummary {\n              fulltimePeriods\n            }\n            substitutionSummary {\n              substitutionCountThisWeek\n              substitutionTimeThisWeekMinutes\n              substitutionCountThisYear\n              substitutionTimeThisYearMinutes\n            }\n          }\n        }\n        available\n        clashingEvents\n        substitutionStats {\n          sandsWeekCount\n          sandsWeekMinutes\n          sandsYearCount\n          sandsYearMinutes\n          casualWeekCount\n          casualWeekMinutes\n        }\n      }\n      freeRooms {\n        roomId\n        name\n        pools\n      }\n      clashingRooms {\n        room {\n          roomId\n          name\n          pools\n        }\n        clash\n      }\n    }\n  }\n"): (typeof documents)["\n  query swm_substitutionLookup($filter: SWM_SubstitutionLookupFilter) {\n    swm_substitutionLookup(filter: $filter) {\n      staff {\n        staff {\n          person {\n            partyId\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n          extensions {\n            timetableSummary {\n              fulltimePeriods\n            }\n            substitutionSummary {\n              substitutionCountThisWeek\n              substitutionTimeThisWeekMinutes\n              substitutionCountThisYear\n              substitutionTimeThisYearMinutes\n            }\n          }\n        }\n        available\n        clashingEvents\n        substitutionStats {\n          sandsWeekCount\n          sandsWeekMinutes\n          sandsYearCount\n          sandsYearMinutes\n          casualWeekCount\n          casualWeekMinutes\n        }\n      }\n      freeRooms {\n        roomId\n        name\n        pools\n      }\n      clashingRooms {\n        room {\n          roomId\n          name\n          pools\n        }\n        clash\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query swm_eventsForSubstitutionsByStaffByPeriod(\n    $filter: SWM_EventsForSubstitutionFilter\n  ) {\n    swm_eventsForSubstitutionsByStaffByPeriod(filter: $filter) {\n      eventsByStaff {\n        staff {\n          person {\n            partyId\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        substitutionEventsByDay {\n          dayInfo {\n            date\n            startTime\n            endTime\n            dayType\n            periods {\n              startTime\n              endTime\n              type\n            }\n          }\n          requireSubstitutionReason {\n            reason\n            note\n          }\n          substitutionEventsByPeriod {\n            absenceId\n            staffPartyId\n            coverTeacherDuplicatedAtSameTime {\n              staffPartyId\n              event {\n                eventId\n                startTime\n                endTime\n                type\n                allDayEvent\n                attendees {\n                  partyInfo {\n                    __typename\n                    ... on Staff {\n                      person {\n                        partyId\n                        title {\n                          id\n                          name\n                          nameTextId\n                        }\n                        firstName\n                        lastName\n                        avatarUrl\n                        type\n                      }\n                    }\n                  }\n                }\n                rooms {\n                  name\n                  roomId\n                }\n                tags {\n                  label\n                  context\n                }\n                colour\n                name\n                description\n              }\n              substitution {\n                substitutionId\n                originalStaff {\n                  partyId\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  avatarUrl\n                  type\n                }\n                substituteStaff {\n                  partyId\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  avatarUrl\n                  type\n                }\n                substitutionType {\n                  substitutionTypeId\n                  name\n                  description\n                  code\n                }\n                substituteRoom {\n                  name\n                  roomId\n                }\n                note\n              }\n            }\n            event {\n              eventId\n              startTime\n              endTime\n              type\n              allDayEvent\n              attendees {\n                partyInfo {\n                  __typename\n                  ... on Staff {\n                    person {\n                      partyId\n                      title {\n                        id\n                        name\n                        nameTextId\n                      }\n                      firstName\n                      lastName\n                      avatarUrl\n                      type\n                    }\n                  }\n                }\n              }\n              rooms {\n                name\n                roomId\n              }\n              tags {\n                label\n                context\n              }\n              colour\n              name\n              description\n            }\n            substitution {\n              substitutionId\n              originalStaff {\n                partyId\n                title {\n                  id\n                  name\n                  nameTextId\n                }\n                firstName\n                lastName\n                avatarUrl\n                type\n              }\n              substituteStaff {\n                partyId\n                title {\n                  id\n                  name\n                  nameTextId\n                }\n                firstName\n                lastName\n                avatarUrl\n                type\n              }\n              substitutionType {\n                substitutionTypeId\n                name\n                description\n                code\n              }\n              substituteRoom {\n                name\n                roomId\n              }\n              note\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query swm_eventsForSubstitutionsByStaffByPeriod(\n    $filter: SWM_EventsForSubstitutionFilter\n  ) {\n    swm_eventsForSubstitutionsByStaffByPeriod(filter: $filter) {\n      eventsByStaff {\n        staff {\n          person {\n            partyId\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        substitutionEventsByDay {\n          dayInfo {\n            date\n            startTime\n            endTime\n            dayType\n            periods {\n              startTime\n              endTime\n              type\n            }\n          }\n          requireSubstitutionReason {\n            reason\n            note\n          }\n          substitutionEventsByPeriod {\n            absenceId\n            staffPartyId\n            coverTeacherDuplicatedAtSameTime {\n              staffPartyId\n              event {\n                eventId\n                startTime\n                endTime\n                type\n                allDayEvent\n                attendees {\n                  partyInfo {\n                    __typename\n                    ... on Staff {\n                      person {\n                        partyId\n                        title {\n                          id\n                          name\n                          nameTextId\n                        }\n                        firstName\n                        lastName\n                        avatarUrl\n                        type\n                      }\n                    }\n                  }\n                }\n                rooms {\n                  name\n                  roomId\n                }\n                tags {\n                  label\n                  context\n                }\n                colour\n                name\n                description\n              }\n              substitution {\n                substitutionId\n                originalStaff {\n                  partyId\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  avatarUrl\n                  type\n                }\n                substituteStaff {\n                  partyId\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  avatarUrl\n                  type\n                }\n                substitutionType {\n                  substitutionTypeId\n                  name\n                  description\n                  code\n                }\n                substituteRoom {\n                  name\n                  roomId\n                }\n                note\n              }\n            }\n            event {\n              eventId\n              startTime\n              endTime\n              type\n              allDayEvent\n              attendees {\n                partyInfo {\n                  __typename\n                  ... on Staff {\n                    person {\n                      partyId\n                      title {\n                        id\n                        name\n                        nameTextId\n                      }\n                      firstName\n                      lastName\n                      avatarUrl\n                      type\n                    }\n                  }\n                }\n              }\n              rooms {\n                name\n                roomId\n              }\n              tags {\n                label\n                context\n              }\n              colour\n              name\n              description\n            }\n            substitution {\n              substitutionId\n              originalStaff {\n                partyId\n                title {\n                  id\n                  name\n                  nameTextId\n                }\n                firstName\n                lastName\n                avatarUrl\n                type\n              }\n              substituteStaff {\n                partyId\n                title {\n                  id\n                  name\n                  nameTextId\n                }\n                firstName\n                lastName\n                avatarUrl\n                type\n              }\n              substitutionType {\n                substitutionTypeId\n                name\n                description\n                code\n              }\n              substituteRoom {\n                name\n                roomId\n              }\n              note\n            }\n          }\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query swm_substitutionTypes($filter: SWM_StaffSubstitutionTypeFilter) {\n    swm_substitutionTypes(filter: $filter) {\n      substitutionTypeId\n      name\n      description\n      code\n    }\n  }\n"): (typeof documents)["\n  query swm_substitutionTypes($filter: SWM_StaffSubstitutionTypeFilter) {\n    swm_substitutionTypes(filter: $filter) {\n      substitutionTypeId\n      name\n      description\n      code\n    }\n  }\n"];
export function graphql(source: "\n  query tt_timetables($filter: TTTimetableFilter) {\n    tt_timetables(filter: $filter) {\n      timetableId\n      name\n      liveStatus {\n        totalChanges\n        lessonChanges\n        timetableGroupChanges\n        lastPublishedDate\n      }\n    }\n  }\n"): (typeof documents)["\n  query tt_timetables($filter: TTTimetableFilter) {\n    tt_timetables(filter: $filter) {\n      timetableId\n      name\n      liveStatus {\n        totalChanges\n        lessonChanges\n        timetableGroupChanges\n        lastPublishedDate\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation tt_addLesson($input: Tt_AddLessonInput) {\n    tt_addLesson(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation tt_addLesson($input: Tt_AddLessonInput) {\n    tt_addLesson(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query tt_addLessonOptions($filter: Tt_AddLessonFilter) {\n    tt_addLessonOptions(filter: $filter) {\n      freeStaffIds\n      freeStaff {\n        person {\n          partyId\n          title {\n            id\n            nameTextId\n            name\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n      }\n      freeTimetableGroupIds\n      freeTimetableGroups {\n        partyId\n        name\n        avatarUrl\n      }\n      freeRoomIds\n      freeRooms {\n        roomId\n        name\n        capacity\n        description\n        pools\n        includeInTimetable\n        externalSystemId\n        location\n        disabled\n      }\n    }\n  }\n"): (typeof documents)["\n  query tt_addLessonOptions($filter: Tt_AddLessonFilter) {\n    tt_addLessonOptions(filter: $filter) {\n      freeStaffIds\n      freeStaff {\n        person {\n          partyId\n          title {\n            id\n            nameTextId\n            name\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n      }\n      freeTimetableGroupIds\n      freeTimetableGroups {\n        partyId\n        name\n        avatarUrl\n      }\n      freeRoomIds\n      freeRooms {\n        roomId\n        name\n        capacity\n        description\n        pools\n        includeInTimetable\n        externalSystemId\n        location\n        disabled\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query tt_swapTeacherOptions($filter: TTSwapTeacherFilter!) {\n    tt_swapTeacherOptions(filter: $filter) {\n      timeslots {\n        id {\n          gridIdx\n          dayIdx\n          periodIdx\n        }\n        info {\n          dayOfWeek\n          startTime\n          endTime\n        }\n      }\n      teachers {\n        staffId\n        teacher {\n          person {\n            partyId\n            title {\n              id\n              nameTextId\n              name\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        lessonOnTimeslots {\n          id {\n            lessonIdx\n            lessonInstanceIdx\n            timetableGroupId\n          }\n          partyGroup {\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query tt_swapTeacherOptions($filter: TTSwapTeacherFilter!) {\n    tt_swapTeacherOptions(filter: $filter) {\n      timeslots {\n        id {\n          gridIdx\n          dayIdx\n          periodIdx\n        }\n        info {\n          dayOfWeek\n          startTime\n          endTime\n        }\n      }\n      teachers {\n        staffId\n        teacher {\n          person {\n            partyId\n            title {\n              id\n              nameTextId\n              name\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        lessonOnTimeslots {\n          id {\n            lessonIdx\n            lessonInstanceIdx\n            timetableGroupId\n          }\n          partyGroup {\n            name\n          }\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query tt_swapRoomOptions($filter: TTSwapRoomFilter!) {\n    tt_swapRoomOptions(filter: $filter) {\n      timeslots {\n        id {\n          gridIdx\n          dayIdx\n          periodIdx\n        }\n        info {\n          dayOfWeek\n          startTime\n          endTime\n        }\n      }\n      rooms {\n        roomId\n        room {\n          name\n          capacity\n          description\n          pools\n        }\n        lessonOnTimeslots {\n          id {\n            lessonIdx\n            lessonInstanceIdx\n            timetableGroupId\n          }\n          partyGroup {\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query tt_swapRoomOptions($filter: TTSwapRoomFilter!) {\n    tt_swapRoomOptions(filter: $filter) {\n      timeslots {\n        id {\n          gridIdx\n          dayIdx\n          periodIdx\n        }\n        info {\n          dayOfWeek\n          startTime\n          endTime\n        }\n      }\n      rooms {\n        roomId\n        room {\n          name\n          capacity\n          description\n          pools\n        }\n        lessonOnTimeslots {\n          id {\n            lessonIdx\n            lessonInstanceIdx\n            timetableGroupId\n          }\n          partyGroup {\n            name\n          }\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation tt_removeLesson($input: [Tt_RemoveLessonInput!]) {\n    tt_removeLesson(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation tt_removeLesson($input: [Tt_RemoveLessonInput!]) {\n    tt_removeLesson(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query tt_editLessonOptions($filter: Tt_EditLessonFilter) {\n    tt_editLessonOptions(filter: $filter) {\n      freeStaffIds\n      freeStaff {\n        person {\n          partyId\n          title {\n            id\n            nameTextId\n            name\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n      }\n      freeTimetableGroupIds\n      freeTimetableGroups {\n        partyId\n        name\n        avatarUrl\n      }\n      freeRoomIds\n      freeRooms {\n        roomId\n        name\n        capacity\n        description\n        pools\n        includeInTimetable\n        externalSystemId\n        location\n        disabled\n      }\n    }\n  }\n"): (typeof documents)["\n  query tt_editLessonOptions($filter: Tt_EditLessonFilter) {\n    tt_editLessonOptions(filter: $filter) {\n      freeStaffIds\n      freeStaff {\n        person {\n          partyId\n          title {\n            id\n            nameTextId\n            name\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n      }\n      freeTimetableGroupIds\n      freeTimetableGroups {\n        partyId\n        name\n        avatarUrl\n      }\n      freeRoomIds\n      freeRooms {\n        roomId\n        name\n        capacity\n        description\n        pools\n        includeInTimetable\n        externalSystemId\n        location\n        disabled\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation tt_publish($input: TTPublishTimetableInput!) {\n    tt_publish(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation tt_publish($input: TTPublishTimetableInput!) {\n    tt_publish(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation tt_reset($input: TT_Reset!) {\n    tt_reset(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation tt_reset($input: TT_Reset!) {\n    tt_reset(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query tt_resourceTimetableView($filter: TTResourceTimetableViewFilter!) {\n    tt_resourceTimetableView(filter: $filter) {\n      timeslots {\n        timeslotIds {\n          gridIdx\n          dayIdx\n          periodIdx\n        }\n        timeslots {\n          dayOfWeek\n          startTime\n          endTime\n          periodType\n        }\n        lessons {\n          id {\n            lessonIdx\n            lessonInstanceIdx\n            timetableGroupId\n          }\n          timeslotId {\n            gridIdx\n            dayIdx\n            periodIdx\n          }\n          timeslotInfo {\n            startTime\n            endTime\n          }\n          partyGroup {\n            __typename\n            partyId\n            name\n            avatarUrl\n            ... on SubjectGroup {\n              subjects {\n                name\n                colour\n              }\n            }\n          }\n          room {\n            roomId\n            name\n          }\n          teachers {\n            person {\n              partyId\n              title {\n                id\n                name\n                nameTextId\n              }\n              firstName\n              lastName\n              avatarUrl\n              type\n            }\n          }\n          spread\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query tt_resourceTimetableView($filter: TTResourceTimetableViewFilter!) {\n    tt_resourceTimetableView(filter: $filter) {\n      timeslots {\n        timeslotIds {\n          gridIdx\n          dayIdx\n          periodIdx\n        }\n        timeslots {\n          dayOfWeek\n          startTime\n          endTime\n          periodType\n        }\n        lessons {\n          id {\n            lessonIdx\n            lessonInstanceIdx\n            timetableGroupId\n          }\n          timeslotId {\n            gridIdx\n            dayIdx\n            periodIdx\n          }\n          timeslotInfo {\n            startTime\n            endTime\n          }\n          partyGroup {\n            __typename\n            partyId\n            name\n            avatarUrl\n            ... on SubjectGroup {\n              subjects {\n                name\n                colour\n              }\n            }\n          }\n          room {\n            roomId\n            name\n          }\n          teachers {\n            person {\n              partyId\n              title {\n                id\n                name\n                nameTextId\n              }\n              firstName\n              lastName\n              avatarUrl\n              type\n            }\n          }\n          spread\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query tt_groups($filter: TT_GroupsFilter!) {\n    tt_groups(filter: $filter) {\n      partyGroup {\n        __typename\n        name\n        partyId\n        avatarUrl\n        ... on SubjectGroup {\n          yearGroups {\n            name\n          }\n          subjects {\n            colour\n          }\n            subjectGroupType  \n            subjectIds  \n          studentMembershipType {\n            type\n            classGroupId\n            blockId\n            classGroupName\n          }\n        }\n      }\n      studentMembershipType\n      teachers {\n        person {\n          partyId\n          title {\n            id\n            nameTextId\n            name\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n      }\n      lessons {\n        id {\n          lessonIdx\n          lessonInstanceIdx\n          timetableGroupId\n        }\n        timeslotId {\n          gridIdx\n          dayIdx\n          periodIdx\n        }\n        timeslotInfo {\n          startTime\n          endTime\n        }\n        partyGroup {\n          __typename\n          partyId\n          name\n          avatarUrl\n          ... on SubjectGroup {\n            subjects {\n              name\n              colour\n            }\n             \n          }\n        }\n        room {\n          roomId\n          name\n        }\n        teachers {\n          person {\n            partyId\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        spread\n      }\n    }\n  }\n"): (typeof documents)["\n  query tt_groups($filter: TT_GroupsFilter!) {\n    tt_groups(filter: $filter) {\n      partyGroup {\n        __typename\n        name\n        partyId\n        avatarUrl\n        ... on SubjectGroup {\n          yearGroups {\n            name\n          }\n          subjects {\n            colour\n          }\n            subjectGroupType  \n            subjectIds  \n          studentMembershipType {\n            type\n            classGroupId\n            blockId\n            classGroupName\n          }\n        }\n      }\n      studentMembershipType\n      teachers {\n        person {\n          partyId\n          title {\n            id\n            nameTextId\n            name\n          }\n          firstName\n          lastName\n          avatarUrl\n          type\n        }\n      }\n      lessons {\n        id {\n          lessonIdx\n          lessonInstanceIdx\n          timetableGroupId\n        }\n        timeslotId {\n          gridIdx\n          dayIdx\n          periodIdx\n        }\n        timeslotInfo {\n          startTime\n          endTime\n        }\n        partyGroup {\n          __typename\n          partyId\n          name\n          avatarUrl\n          ... on SubjectGroup {\n            subjects {\n              name\n              colour\n            }\n             \n          }\n        }\n        room {\n          roomId\n          name\n        }\n        teachers {\n          person {\n            partyId\n            title {\n              id\n              name\n              nameTextId\n            }\n            firstName\n            lastName\n            avatarUrl\n            type\n          }\n        }\n        spread\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation tt_swap($input: TTSwapsInput!) {\n    tt_swap(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation tt_swap($input: TTSwapsInput!) {\n    tt_swap(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query tt_unpublishedChanges($filter: TTTimetableFilter) {\n    tt_timetables(filter: $filter) {\n      timetableId\n      liveStatus {\n        totalChanges\n        publishDiff {\n          lessonDiffs {\n            newLesson {\n              id {\n                lessonIdx\n                lessonInstanceIdx\n                timetableGroupId\n              }\n              timeslotId {\n                gridIdx\n                dayIdx\n                periodIdx\n              }\n              timeslotInfo {\n                startTime\n                endTime\n              }\n              partyGroup {\n                __typename\n                partyId\n                name\n                avatarUrl\n                ... on SubjectGroup {\n                  subjects {\n                    name\n                    colour\n                  }\n                }\n              }\n              room {\n                roomId\n                name\n              }\n              teachers {\n                person {\n                  partyId\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  avatarUrl\n                  type\n                }\n              }\n              spread\n            }\n            oldLesson {\n              id {\n                lessonIdx\n                lessonInstanceIdx\n                timetableGroupId\n              }\n              timeslotId {\n                gridIdx\n                dayIdx\n                periodIdx\n              }\n              timeslotInfo {\n                startTime\n                endTime\n              }\n              partyGroup {\n                __typename\n                partyId\n                name\n                avatarUrl\n                ... on SubjectGroup {\n                  subjects {\n                    name\n                    colour\n                  }\n                }\n              }\n              room {\n                roomId\n                name\n              }\n              teachers {\n                person {\n                  partyId\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  avatarUrl\n                  type\n                }\n              }\n              spread\n            }\n            type\n            roomChanged\n            teachersChanged\n            timeslotChanged\n          }\n          groupDiffs {\n            newGroup {\n              partyGroup {\n                __typename\n                partyId\n                name\n                avatarUrl\n                ... on SubjectGroup {\n                  subjects {\n                    name\n                    colour\n                  }\n                }\n              }\n              partyId\n              teachers {\n                person {\n                  partyId\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  avatarUrl\n                  type\n                }\n              }\n            }\n            oldGroup {\n              partyGroup {\n                __typename\n                partyId\n                name\n                avatarUrl\n                ... on SubjectGroup {\n                  subjects {\n                    name\n                    colour\n                  }\n                }\n              }\n              partyId\n              teachers {\n                person {\n                  partyId\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  avatarUrl\n                  type\n                }\n              }\n            }\n            type\n            teachersChanged\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query tt_unpublishedChanges($filter: TTTimetableFilter) {\n    tt_timetables(filter: $filter) {\n      timetableId\n      liveStatus {\n        totalChanges\n        publishDiff {\n          lessonDiffs {\n            newLesson {\n              id {\n                lessonIdx\n                lessonInstanceIdx\n                timetableGroupId\n              }\n              timeslotId {\n                gridIdx\n                dayIdx\n                periodIdx\n              }\n              timeslotInfo {\n                startTime\n                endTime\n              }\n              partyGroup {\n                __typename\n                partyId\n                name\n                avatarUrl\n                ... on SubjectGroup {\n                  subjects {\n                    name\n                    colour\n                  }\n                }\n              }\n              room {\n                roomId\n                name\n              }\n              teachers {\n                person {\n                  partyId\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  avatarUrl\n                  type\n                }\n              }\n              spread\n            }\n            oldLesson {\n              id {\n                lessonIdx\n                lessonInstanceIdx\n                timetableGroupId\n              }\n              timeslotId {\n                gridIdx\n                dayIdx\n                periodIdx\n              }\n              timeslotInfo {\n                startTime\n                endTime\n              }\n              partyGroup {\n                __typename\n                partyId\n                name\n                avatarUrl\n                ... on SubjectGroup {\n                  subjects {\n                    name\n                    colour\n                  }\n                }\n              }\n              room {\n                roomId\n                name\n              }\n              teachers {\n                person {\n                  partyId\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  avatarUrl\n                  type\n                }\n              }\n              spread\n            }\n            type\n            roomChanged\n            teachersChanged\n            timeslotChanged\n          }\n          groupDiffs {\n            newGroup {\n              partyGroup {\n                __typename\n                partyId\n                name\n                avatarUrl\n                ... on SubjectGroup {\n                  subjects {\n                    name\n                    colour\n                  }\n                }\n              }\n              partyId\n              teachers {\n                person {\n                  partyId\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  avatarUrl\n                  type\n                }\n              }\n            }\n            oldGroup {\n              partyGroup {\n                __typename\n                partyId\n                name\n                avatarUrl\n                ... on SubjectGroup {\n                  subjects {\n                    name\n                    colour\n                  }\n                }\n              }\n              partyId\n              teachers {\n                person {\n                  partyId\n                  title {\n                    id\n                    name\n                    nameTextId\n                  }\n                  firstName\n                  lastName\n                  avatarUrl\n                  type\n                }\n              }\n            }\n            type\n            teachersChanged\n          }\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation tt_updateTimetableGroup($input: TT_UpdateTimetableGroupInput!) {\n    tt_updateTimetableGroup(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation tt_updateTimetableGroup($input: TT_UpdateTimetableGroupInput!) {\n    tt_updateTimetableGroup(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  mutation tt_upsertTimetableGroup($input: Tt_UpsertSubjectGroup!) {\n    tt_upsertSubjectGroup(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation tt_upsertTimetableGroup($input: Tt_UpsertSubjectGroup!) {\n    tt_upsertSubjectGroup(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query timetableSearchQuery($filter: SearchFilter) {\n    search_search(filter: $filter) {\n      partyId\n      type\n      text\n      avatarUrl\n    }\n  }\n"): (typeof documents)["\n  query timetableSearchQuery($filter: SearchFilter) {\n    search_search(filter: $filter) {\n      partyId\n      type\n      text\n      avatarUrl\n    }\n  }\n"];
export function graphql(source: "\n  mutation tt_editLessonInstance($input: TTEditLessonPeriodInstanceWrapper!) {\n    tt_editLessonInstance(input: $input) {\n      id {\n        lessonIdx\n        lessonInstanceIdx\n        timetableGroupId\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation tt_editLessonInstance($input: TTEditLessonPeriodInstanceWrapper!) {\n    tt_editLessonInstance(input: $input) {\n      id {\n        lessonIdx\n        lessonInstanceIdx\n        timetableGroupId\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query admin__party_people($tenant: Int!) {\n    admin__party_people(tenant: $tenant) {\n      partyId\n      firstName\n      lastName\n      avatarUrl\n      type\n    }\n  }\n"): (typeof documents)["\n  query admin__party_people($tenant: Int!) {\n    admin__party_people(tenant: $tenant) {\n      partyId\n      firstName\n      lastName\n      avatarUrl\n      type\n    }\n  }\n"];
export function graphql(source: "\n  query admin__tenants {\n    admin__tenants {\n      tenant\n      name\n      imgUrl\n      liveSchool\n    }\n  }\n"): (typeof documents)["\n  query admin__tenants {\n    admin__tenants {\n      tenant\n      name\n      imgUrl\n      liveSchool\n    }\n  }\n"];
export function graphql(source: "\n  mutation admin__resetTenantCache($input: Int) {\n    admin__resetTenantCache(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation admin__resetTenantCache($input: Int) {\n    admin__resetTenantCache(input: $input) {\n      success\n    }\n  }\n"];
export function graphql(source: "\n  query core_academicNamespaces {\n    core_academicNamespaces {\n      academicNamespaceId\n      type\n      name\n      year\n      description\n      isActiveDefaultNamespace\n      startDate\n      endDate\n    }\n  }\n"): (typeof documents)["\n  query core_academicNamespaces {\n    core_academicNamespaces {\n      academicNamespaceId\n      type\n      name\n      year\n      description\n      isActiveDefaultNamespace\n      startDate\n      endDate\n    }\n  }\n"];
export function graphql(source: "\n  query catalogue_programmeStages {\n    catalogue_programmeStages {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query catalogue_programmeStages {\n    catalogue_programmeStages {\n      id\n      name\n    }\n  }\n"];
export function graphql(source: "\n  query years($filter: YearGroupFilter) {\n    catalogue_years(filter: $filter) {\n      yearGroupId\n      name\n    }\n  }\n"): (typeof documents)["\n  query years($filter: YearGroupFilter) {\n    catalogue_years(filter: $filter) {\n      yearGroupId\n      name\n    }\n  }\n"];
export function graphql(source: "\n  query myAuthDetails {\n    myAuthDetails {\n      id\n      email\n      name\n      defaultProfileId\n      activeProfileId\n      profiles {\n        id\n        nickName\n        avatarUrl\n        tenant {\n          tenant\n          name\n          imgUrl\n        }\n        profileType {\n          name\n          description\n          userType\n        }\n        permissionIds\n        partyId\n      }\n    }\n  }\n"): (typeof documents)["\n  query myAuthDetails {\n    myAuthDetails {\n      id\n      email\n      name\n      defaultProfileId\n      activeProfileId\n      profiles {\n        id\n        nickName\n        avatarUrl\n        tenant {\n          tenant\n          name\n          imgUrl\n        }\n        profileType {\n          name\n          description\n          userType\n        }\n        permissionIds\n        partyId\n      }\n    }\n  }\n"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;